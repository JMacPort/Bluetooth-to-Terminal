
Bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019c8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08001b98  08001b98  00002b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bf4  08001bf4  00003060  2**0
                  CONTENTS
  4 .ARM          00000008  08001bf4  08001bf4  00002bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001bfc  08001bfc  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bfc  08001bfc  00002bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001c00  08001c00  00002c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08001c04  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000060  08001c64  00003060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08001c64  000031d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001e80  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000081a  00000000  00000000  00004f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002f0  00000000  00000000  00005730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000216  00000000  00000000  00005a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e16  00000000  00000000  00005c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000339d  00000000  00000000  00026a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6bf5  00000000  00000000  00029de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f09de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001320  00000000  00000000  000f0a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000f1d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001b80 	.word	0x08001b80

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08001b80 	.word	0x08001b80

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <main>:
void I2C1_Init();
void Light_Sensor_Init();
uint16_t Light_Read();
void Bluetooth_Print(const char*);

int main() {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b090      	sub	sp, #64	@ 0x40
 80002b4:	af00      	add	r7, sp, #0
    USART2_Init();
 80002b6:	f000 f82b 	bl	8000310 <USART2_Init>
    USART1_Init();
 80002ba:	f000 f86b 	bl	8000394 <USART1_Init>
    I2C1_Init();
 80002be:	f000 f8ab 	bl	8000418 <I2C1_Init>
    Light_Sensor_Init();
 80002c2:	f000 f996 	bl	80005f2 <Light_Sensor_Init>

    while(1) {
        uint16_t value = Light_Read();
 80002c6:	f000 f9a1 	bl	800060c <Light_Read>
 80002ca:	4603      	mov	r3, r0
 80002cc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        char buffer[50];
        sprintf(buffer, "Light Level: %d\r\n", value);
 80002ce:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	490c      	ldr	r1, [pc, #48]	@ (8000304 <main+0x54>)
 80002d4:	4618      	mov	r0, r3
 80002d6:	f000 fc21 	bl	8000b1c <siprintf>
        Bluetooth_Print(buffer);
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	4618      	mov	r0, r3
 80002de:	f000 f9ff 	bl	80006e0 <Bluetooth_Print>
        printf("Light Reading: %d\r\n", value);
 80002e2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80002e4:	4619      	mov	r1, r3
 80002e6:	4808      	ldr	r0, [pc, #32]	@ (8000308 <main+0x58>)
 80002e8:	f000 fc06 	bl	8000af8 <iprintf>
        // Delay between readings
        for(volatile int i = 0; i < 1000000; i++);
 80002ec:	2300      	movs	r3, #0
 80002ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80002f0:	e002      	b.n	80002f8 <main+0x48>
 80002f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80002f4:	3301      	adds	r3, #1
 80002f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80002f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80002fa:	4a04      	ldr	r2, [pc, #16]	@ (800030c <main+0x5c>)
 80002fc:	4293      	cmp	r3, r2
 80002fe:	ddf8      	ble.n	80002f2 <main+0x42>
    while(1) {
 8000300:	e7e1      	b.n	80002c6 <main+0x16>
 8000302:	bf00      	nop
 8000304:	08001b98 	.word	0x08001b98
 8000308:	08001bac 	.word	0x08001bac
 800030c:	000f423f 	.word	0x000f423f

08000310 <USART2_Init>:
    }
}

// USART2 - ST-Link Setup
void USART2_Init() {
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	RCC -> APB1ENR |= (1 << 17);								// USART2
 8000314:	4b1c      	ldr	r3, [pc, #112]	@ (8000388 <USART2_Init+0x78>)
 8000316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000318:	4a1b      	ldr	r2, [pc, #108]	@ (8000388 <USART2_Init+0x78>)
 800031a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800031e:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC -> AHB1ENR |= (1 << 0);									// GPIOA
 8000320:	4b19      	ldr	r3, [pc, #100]	@ (8000388 <USART2_Init+0x78>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000324:	4a18      	ldr	r2, [pc, #96]	@ (8000388 <USART2_Init+0x78>)
 8000326:	f043 0301 	orr.w	r3, r3, #1
 800032a:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA -> MODER &= ~((3 << (2 * 2)) | (3 << (2 * 3)));		// PA2 & 3 Set to Alternate Function
 800032c:	4b17      	ldr	r3, [pc, #92]	@ (800038c <USART2_Init+0x7c>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a16      	ldr	r2, [pc, #88]	@ (800038c <USART2_Init+0x7c>)
 8000332:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000336:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= (2 << (2 * 2)) | (2 << (2 * 3));
 8000338:	4b14      	ldr	r3, [pc, #80]	@ (800038c <USART2_Init+0x7c>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a13      	ldr	r2, [pc, #76]	@ (800038c <USART2_Init+0x7c>)
 800033e:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000342:	6013      	str	r3, [r2, #0]

	GPIOA -> AFR[0] &= ~((15 << (4 * 2)) | (15 << (4 * 3)));	// Alternate Function to AF7
 8000344:	4b11      	ldr	r3, [pc, #68]	@ (800038c <USART2_Init+0x7c>)
 8000346:	6a1b      	ldr	r3, [r3, #32]
 8000348:	4a10      	ldr	r2, [pc, #64]	@ (800038c <USART2_Init+0x7c>)
 800034a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800034e:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] |= (7 << (4 * 2)) | (7 << (4 * 3));
 8000350:	4b0e      	ldr	r3, [pc, #56]	@ (800038c <USART2_Init+0x7c>)
 8000352:	6a1b      	ldr	r3, [r3, #32]
 8000354:	4a0d      	ldr	r2, [pc, #52]	@ (800038c <USART2_Init+0x7c>)
 8000356:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800035a:	6213      	str	r3, [r2, #32]

	USART2 -> BRR = 0x0683;										// 9600 Baud Rate
 800035c:	4b0c      	ldr	r3, [pc, #48]	@ (8000390 <USART2_Init+0x80>)
 800035e:	f240 6283 	movw	r2, #1667	@ 0x683
 8000362:	609a      	str	r2, [r3, #8]

	USART2 -> CR1 |= (1 << 3);									// Transmitter Enabled
 8000364:	4b0a      	ldr	r3, [pc, #40]	@ (8000390 <USART2_Init+0x80>)
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	4a09      	ldr	r2, [pc, #36]	@ (8000390 <USART2_Init+0x80>)
 800036a:	f043 0308 	orr.w	r3, r3, #8
 800036e:	60d3      	str	r3, [r2, #12]
	USART2 -> CR1 |= (1 << 13);									// USART2 Enabled
 8000370:	4b07      	ldr	r3, [pc, #28]	@ (8000390 <USART2_Init+0x80>)
 8000372:	68db      	ldr	r3, [r3, #12]
 8000374:	4a06      	ldr	r2, [pc, #24]	@ (8000390 <USART2_Init+0x80>)
 8000376:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800037a:	60d3      	str	r3, [r2, #12]
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	40023800 	.word	0x40023800
 800038c:	40020000 	.word	0x40020000
 8000390:	40004400 	.word	0x40004400

08000394 <USART1_Init>:

// USART1 - Bluetooth Module
void USART1_Init() {
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
	RCC -> APB2ENR |= (1 << 4);									// USART1
 8000398:	4b1c      	ldr	r3, [pc, #112]	@ (800040c <USART1_Init+0x78>)
 800039a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800039c:	4a1b      	ldr	r2, [pc, #108]	@ (800040c <USART1_Init+0x78>)
 800039e:	f043 0310 	orr.w	r3, r3, #16
 80003a2:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC -> AHB1ENR |= (1 << 1);									// GPIOB
 80003a4:	4b19      	ldr	r3, [pc, #100]	@ (800040c <USART1_Init+0x78>)
 80003a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a8:	4a18      	ldr	r2, [pc, #96]	@ (800040c <USART1_Init+0x78>)
 80003aa:	f043 0302 	orr.w	r3, r3, #2
 80003ae:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOB -> MODER &= ~((3 << (2 * 6)) | (3 << (2 * 7)));		// PB6 & 7 Set to Alternate Function
 80003b0:	4b17      	ldr	r3, [pc, #92]	@ (8000410 <USART1_Init+0x7c>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a16      	ldr	r2, [pc, #88]	@ (8000410 <USART1_Init+0x7c>)
 80003b6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80003ba:	6013      	str	r3, [r2, #0]
	GPIOB -> MODER |= (2 << (2 * 6)) | (2 << (2 * 7));
 80003bc:	4b14      	ldr	r3, [pc, #80]	@ (8000410 <USART1_Init+0x7c>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a13      	ldr	r2, [pc, #76]	@ (8000410 <USART1_Init+0x7c>)
 80003c2:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 80003c6:	6013      	str	r3, [r2, #0]

	GPIOB -> AFR[0] &= ~((15 << (4 * 6)) | (15 << (4 * 7)));	// Alternate Function to AF7
 80003c8:	4b11      	ldr	r3, [pc, #68]	@ (8000410 <USART1_Init+0x7c>)
 80003ca:	6a1b      	ldr	r3, [r3, #32]
 80003cc:	4a10      	ldr	r2, [pc, #64]	@ (8000410 <USART1_Init+0x7c>)
 80003ce:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80003d2:	6213      	str	r3, [r2, #32]
	GPIOB -> AFR[0] |= (7 << (4 * 6)) | (7 << (4 * 7));
 80003d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000410 <USART1_Init+0x7c>)
 80003d6:	6a1b      	ldr	r3, [r3, #32]
 80003d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000410 <USART1_Init+0x7c>)
 80003da:	f043 43ee 	orr.w	r3, r3, #1996488704	@ 0x77000000
 80003de:	6213      	str	r3, [r2, #32]

	USART1 -> BRR = 0x0683;										// 9600 Baud Rate
 80003e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000414 <USART1_Init+0x80>)
 80003e2:	f240 6283 	movw	r2, #1667	@ 0x683
 80003e6:	609a      	str	r2, [r3, #8]

	USART1 -> CR1 |= (1 << 2) | (1 << 3);						// Transmitter/Receiver Enabled
 80003e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000414 <USART1_Init+0x80>)
 80003ea:	68db      	ldr	r3, [r3, #12]
 80003ec:	4a09      	ldr	r2, [pc, #36]	@ (8000414 <USART1_Init+0x80>)
 80003ee:	f043 030c 	orr.w	r3, r3, #12
 80003f2:	60d3      	str	r3, [r2, #12]
	USART1 -> CR1 |= (1 << 13);									// USART1 Enabled
 80003f4:	4b07      	ldr	r3, [pc, #28]	@ (8000414 <USART1_Init+0x80>)
 80003f6:	68db      	ldr	r3, [r3, #12]
 80003f8:	4a06      	ldr	r2, [pc, #24]	@ (8000414 <USART1_Init+0x80>)
 80003fa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003fe:	60d3      	str	r3, [r2, #12]
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	40023800 	.word	0x40023800
 8000410:	40020400 	.word	0x40020400
 8000414:	40011000 	.word	0x40011000

08000418 <I2C1_Init>:

// I2C for sensor/s; Maybe more than 1 but starting with BH1750 light sensor
void I2C1_Init() {
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
	RCC -> AHB1ENR |= (1 << 1);									// GPIOB
 800041c:	4b27      	ldr	r3, [pc, #156]	@ (80004bc <I2C1_Init+0xa4>)
 800041e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000420:	4a26      	ldr	r2, [pc, #152]	@ (80004bc <I2C1_Init+0xa4>)
 8000422:	f043 0302 	orr.w	r3, r3, #2
 8000426:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC -> APB1ENR |= (1 << 21);								// I2C1
 8000428:	4b24      	ldr	r3, [pc, #144]	@ (80004bc <I2C1_Init+0xa4>)
 800042a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800042c:	4a23      	ldr	r2, [pc, #140]	@ (80004bc <I2C1_Init+0xa4>)
 800042e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000432:	6413      	str	r3, [r2, #64]	@ 0x40

	GPIOB -> OTYPER &= ~((1 << 8) | (1 << 9));					// Open-Drain on PB8 & 9
 8000434:	4b22      	ldr	r3, [pc, #136]	@ (80004c0 <I2C1_Init+0xa8>)
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	4a21      	ldr	r2, [pc, #132]	@ (80004c0 <I2C1_Init+0xa8>)
 800043a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800043e:	6053      	str	r3, [r2, #4]
	GPIOB -> OTYPER |= (1 << 8) | (1 << 9);
 8000440:	4b1f      	ldr	r3, [pc, #124]	@ (80004c0 <I2C1_Init+0xa8>)
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	4a1e      	ldr	r2, [pc, #120]	@ (80004c0 <I2C1_Init+0xa8>)
 8000446:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800044a:	6053      	str	r3, [r2, #4]

	GPIOB -> PUPDR &= ~((3 << (2 * 8)) | (3 << (2 * 9)));		// Pull-Up on PB8 & 9
 800044c:	4b1c      	ldr	r3, [pc, #112]	@ (80004c0 <I2C1_Init+0xa8>)
 800044e:	68db      	ldr	r3, [r3, #12]
 8000450:	4a1b      	ldr	r2, [pc, #108]	@ (80004c0 <I2C1_Init+0xa8>)
 8000452:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000456:	60d3      	str	r3, [r2, #12]
	GPIOB -> PUPDR |= (1 << (2 * 8)) | (1 << (2 * 9));
 8000458:	4b19      	ldr	r3, [pc, #100]	@ (80004c0 <I2C1_Init+0xa8>)
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	4a18      	ldr	r2, [pc, #96]	@ (80004c0 <I2C1_Init+0xa8>)
 800045e:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000462:	60d3      	str	r3, [r2, #12]

	GPIOB -> MODER &= ~((3 << (2 * 8)) | (3 << (2 * 9)));		// PB8 & 9 Set to Alternate Function
 8000464:	4b16      	ldr	r3, [pc, #88]	@ (80004c0 <I2C1_Init+0xa8>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a15      	ldr	r2, [pc, #84]	@ (80004c0 <I2C1_Init+0xa8>)
 800046a:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800046e:	6013      	str	r3, [r2, #0]
	GPIOB -> MODER |= (2 << (2 * 8)) | (2 << (2 * 9));
 8000470:	4b13      	ldr	r3, [pc, #76]	@ (80004c0 <I2C1_Init+0xa8>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a12      	ldr	r2, [pc, #72]	@ (80004c0 <I2C1_Init+0xa8>)
 8000476:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 800047a:	6013      	str	r3, [r2, #0]

	GPIOB -> AFR[1] &= ~((15 << (4 * 0)) | (15 << (4 * 1)));	// Alternate Function to AF4
 800047c:	4b10      	ldr	r3, [pc, #64]	@ (80004c0 <I2C1_Init+0xa8>)
 800047e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000480:	4a0f      	ldr	r2, [pc, #60]	@ (80004c0 <I2C1_Init+0xa8>)
 8000482:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000486:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB -> AFR[1] |= (4 << (4 * 0)) | (4 << 4 * 1);
 8000488:	4b0d      	ldr	r3, [pc, #52]	@ (80004c0 <I2C1_Init+0xa8>)
 800048a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800048c:	4a0c      	ldr	r2, [pc, #48]	@ (80004c0 <I2C1_Init+0xa8>)
 800048e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8000492:	6253      	str	r3, [r2, #36]	@ 0x24

	I2C1 -> CR2 = 42;											// 42MHz Frequency
 8000494:	4b0b      	ldr	r3, [pc, #44]	@ (80004c4 <I2C1_Init+0xac>)
 8000496:	222a      	movs	r2, #42	@ 0x2a
 8000498:	605a      	str	r2, [r3, #4]
	I2C1 -> CCR = 210; 											// 100kHz Frequency
 800049a:	4b0a      	ldr	r3, [pc, #40]	@ (80004c4 <I2C1_Init+0xac>)
 800049c:	22d2      	movs	r2, #210	@ 0xd2
 800049e:	61da      	str	r2, [r3, #28]
	I2C1 -> TRISE = 43;											// Max Rise Time
 80004a0:	4b08      	ldr	r3, [pc, #32]	@ (80004c4 <I2C1_Init+0xac>)
 80004a2:	222b      	movs	r2, #43	@ 0x2b
 80004a4:	621a      	str	r2, [r3, #32]
	I2C1 -> CR1 |= (1 << 0);									// I2C1 Enabled
 80004a6:	4b07      	ldr	r3, [pc, #28]	@ (80004c4 <I2C1_Init+0xac>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a06      	ldr	r2, [pc, #24]	@ (80004c4 <I2C1_Init+0xac>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	6013      	str	r3, [r2, #0]
}
 80004b2:	bf00      	nop
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr
 80004bc:	40023800 	.word	0x40023800
 80004c0:	40020400 	.word	0x40020400
 80004c4:	40005400 	.word	0x40005400

080004c8 <I2C_Check_Busy>:

// Checks if I2C bus is busy
uint8_t I2C_Check_Busy() {
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
	if (I2C1 -> SR2 & (1 << 1)) {
 80004cc:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <I2C_Check_Busy+0x20>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0302 	and.w	r3, r3, #2
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <I2C_Check_Busy+0x14>
		return 1;
 80004d8:	2301      	movs	r3, #1
 80004da:	e000      	b.n	80004de <I2C_Check_Busy+0x16>
	}
	return 0;
 80004dc:	2300      	movs	r3, #0
}
 80004de:	4618      	mov	r0, r3
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	40005400 	.word	0x40005400

080004ec <I2C_Start>:

// Generates start condition
void I2C_Start() {
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
	I2C1 -> CR1 |= (1 << 8);
 80004f0:	4b09      	ldr	r3, [pc, #36]	@ (8000518 <I2C_Start+0x2c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a08      	ldr	r2, [pc, #32]	@ (8000518 <I2C_Start+0x2c>)
 80004f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004fa:	6013      	str	r3, [r2, #0]
	while (!(I2C1 -> SR1 & (1 << 0)));
 80004fc:	bf00      	nop
 80004fe:	4b06      	ldr	r3, [pc, #24]	@ (8000518 <I2C_Start+0x2c>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	2b00      	cmp	r3, #0
 8000508:	d0f9      	beq.n	80004fe <I2C_Start+0x12>
}
 800050a:	bf00      	nop
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	40005400 	.word	0x40005400

0800051c <I2C_Send_Address>:

// Sends device address and clears associated flags
void I2C_Send_Address(uint8_t addr, uint8_t read) {
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	460a      	mov	r2, r1
 8000526:	71fb      	strb	r3, [r7, #7]
 8000528:	4613      	mov	r3, r2
 800052a:	71bb      	strb	r3, [r7, #6]
	I2C1 -> DR = (addr << 1) | read;
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	005a      	lsls	r2, r3, #1
 8000530:	79bb      	ldrb	r3, [r7, #6]
 8000532:	431a      	orrs	r2, r3
 8000534:	4b0a      	ldr	r3, [pc, #40]	@ (8000560 <I2C_Send_Address+0x44>)
 8000536:	611a      	str	r2, [r3, #16]
	while(!(I2C1 -> SR1 & (1 << 1)));
 8000538:	bf00      	nop
 800053a:	4b09      	ldr	r3, [pc, #36]	@ (8000560 <I2C_Send_Address+0x44>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f003 0302 	and.w	r3, r3, #2
 8000542:	2b00      	cmp	r3, #0
 8000544:	d0f9      	beq.n	800053a <I2C_Send_Address+0x1e>

	uint8_t temp = I2C1 -> SR1;
 8000546:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <I2C_Send_Address+0x44>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	73fb      	strb	r3, [r7, #15]
	temp = I2C1 -> SR2;
 800054c:	4b04      	ldr	r3, [pc, #16]	@ (8000560 <I2C_Send_Address+0x44>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	73fb      	strb	r3, [r7, #15]
	(void) temp;
}
 8000552:	bf00      	nop
 8000554:	3714      	adds	r7, #20
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	40005400 	.word	0x40005400

08000564 <I2C_Send_Data>:

// Sends a byte of data to device from master
void I2C_Send_Data(uint8_t data) {
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
	I2C1 -> DR = data;
 800056e:	4a08      	ldr	r2, [pc, #32]	@ (8000590 <I2C_Send_Data+0x2c>)
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	6113      	str	r3, [r2, #16]
	while(!(I2C1 -> SR1 & (1 << 2)));
 8000574:	bf00      	nop
 8000576:	4b06      	ldr	r3, [pc, #24]	@ (8000590 <I2C_Send_Data+0x2c>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	f003 0304 	and.w	r3, r3, #4
 800057e:	2b00      	cmp	r3, #0
 8000580:	d0f9      	beq.n	8000576 <I2C_Send_Data+0x12>
}
 8000582:	bf00      	nop
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	40005400 	.word	0x40005400

08000594 <I2C_Stop>:

// Generates stop condition
void I2C_Stop() {
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	I2C1 -> CR1 |= (1 << 9);
 8000598:	4b05      	ldr	r3, [pc, #20]	@ (80005b0 <I2C_Stop+0x1c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a04      	ldr	r2, [pc, #16]	@ (80005b0 <I2C_Stop+0x1c>)
 800059e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005a2:	6013      	str	r3, [r2, #0]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40005400 	.word	0x40005400

080005b4 <I2C_Write>:

// Entire write to a device
void I2C_Write(uint8_t addr, uint8_t data) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	460a      	mov	r2, r1
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	4613      	mov	r3, r2
 80005c2:	71bb      	strb	r3, [r7, #6]
	while(I2C_Check_Busy());
 80005c4:	bf00      	nop
 80005c6:	f7ff ff7f 	bl	80004c8 <I2C_Check_Busy>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d1fa      	bne.n	80005c6 <I2C_Write+0x12>
	I2C_Start();
 80005d0:	f7ff ff8c 	bl	80004ec <I2C_Start>
	I2C_Send_Address(addr, 0);
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ff9f 	bl	800051c <I2C_Send_Address>
	I2C_Send_Data(data);
 80005de:	79bb      	ldrb	r3, [r7, #6]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ffbf 	bl	8000564 <I2C_Send_Data>
	I2C_Stop();
 80005e6:	f7ff ffd5 	bl	8000594 <I2C_Stop>
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <Light_Sensor_Init>:

// Initializes BH1750 light sensor
void Light_Sensor_Init() {
 80005f2:	b580      	push	{r7, lr}
 80005f4:	af00      	add	r7, sp, #0
	I2C_Write(LIGHT_ADDR, LIGHT_ON);
 80005f6:	2101      	movs	r1, #1
 80005f8:	2023      	movs	r0, #35	@ 0x23
 80005fa:	f7ff ffdb 	bl	80005b4 <I2C_Write>
	I2C_Write(LIGHT_ADDR, LIGHT_CONT);
 80005fe:	2110      	movs	r1, #16
 8000600:	2023      	movs	r0, #35	@ 0x23
 8000602:	f7ff ffd7 	bl	80005b4 <I2C_Write>
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <Light_Read>:

// Returns the value from the light sensor
uint16_t Light_Read() {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
	uint8_t upper, lower;

	while(I2C_Check_Busy());
 8000612:	bf00      	nop
 8000614:	f7ff ff58 	bl	80004c8 <I2C_Check_Busy>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d1fa      	bne.n	8000614 <Light_Read+0x8>
	I2C_Start();
 800061e:	f7ff ff65 	bl	80004ec <I2C_Start>
	I2C_Send_Address(LIGHT_ADDR, 1);
 8000622:	2101      	movs	r1, #1
 8000624:	2023      	movs	r0, #35	@ 0x23
 8000626:	f7ff ff79 	bl	800051c <I2C_Send_Address>

	I2C1 -> CR1 |= (1 << 10);
 800062a:	4b17      	ldr	r3, [pc, #92]	@ (8000688 <Light_Read+0x7c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a16      	ldr	r2, [pc, #88]	@ (8000688 <Light_Read+0x7c>)
 8000630:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000634:	6013      	str	r3, [r2, #0]
	while(!(I2C1 -> SR1 & (1 << 6)));
 8000636:	bf00      	nop
 8000638:	4b13      	ldr	r3, [pc, #76]	@ (8000688 <Light_Read+0x7c>)
 800063a:	695b      	ldr	r3, [r3, #20]
 800063c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000640:	2b00      	cmp	r3, #0
 8000642:	d0f9      	beq.n	8000638 <Light_Read+0x2c>
	upper = I2C1 -> DR;
 8000644:	4b10      	ldr	r3, [pc, #64]	@ (8000688 <Light_Read+0x7c>)
 8000646:	691b      	ldr	r3, [r3, #16]
 8000648:	71fb      	strb	r3, [r7, #7]

	I2C1 -> CR1 &= ~(1 << 10);
 800064a:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <Light_Read+0x7c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a0e      	ldr	r2, [pc, #56]	@ (8000688 <Light_Read+0x7c>)
 8000650:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000654:	6013      	str	r3, [r2, #0]

	while(!(I2C1 -> SR1 & (1 << 6)));
 8000656:	bf00      	nop
 8000658:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <Light_Read+0x7c>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0f9      	beq.n	8000658 <Light_Read+0x4c>
	lower = I2C1 -> DR;
 8000664:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <Light_Read+0x7c>)
 8000666:	691b      	ldr	r3, [r3, #16]
 8000668:	71bb      	strb	r3, [r7, #6]

	I2C_Stop();
 800066a:	f7ff ff93 	bl	8000594 <I2C_Stop>

	uint16_t value = (upper << 8) | lower;
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	021b      	lsls	r3, r3, #8
 8000672:	b21a      	sxth	r2, r3
 8000674:	79bb      	ldrb	r3, [r7, #6]
 8000676:	b21b      	sxth	r3, r3
 8000678:	4313      	orrs	r3, r2
 800067a:	b21b      	sxth	r3, r3
 800067c:	80bb      	strh	r3, [r7, #4]
	return value;
 800067e:	88bb      	ldrh	r3, [r7, #4]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40005400 	.word	0x40005400

0800068c <__io_putchar>:


// printf retarget with putchar
int __io_putchar(int c) {
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
    while(!(USART2 -> SR & (1 << 7)));
 8000694:	bf00      	nop
 8000696:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <__io_putchar+0x50>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d0f9      	beq.n	8000696 <__io_putchar+0xa>
    USART2 -> DR = c;
 80006a2:	4a0e      	ldr	r2, [pc, #56]	@ (80006dc <__io_putchar+0x50>)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6053      	str	r3, [r2, #4]

    while(!(USART2 -> SR & (1 << 6)));
 80006a8:	bf00      	nop
 80006aa:	4b0c      	ldr	r3, [pc, #48]	@ (80006dc <__io_putchar+0x50>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d0f9      	beq.n	80006aa <__io_putchar+0x1e>
    USART2 -> SR &= ~(1 << 6);
 80006b6:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <__io_putchar+0x50>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a08      	ldr	r2, [pc, #32]	@ (80006dc <__io_putchar+0x50>)
 80006bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80006c0:	6013      	str	r3, [r2, #0]
    USART2 -> SR &= ~(1 << 5);
 80006c2:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <__io_putchar+0x50>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a05      	ldr	r2, [pc, #20]	@ (80006dc <__io_putchar+0x50>)
 80006c8:	f023 0320 	bic.w	r3, r3, #32
 80006cc:	6013      	str	r3, [r2, #0]

    return c;
 80006ce:	687b      	ldr	r3, [r7, #4]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	40004400 	.word	0x40004400

080006e0 <Bluetooth_Print>:

void Bluetooth_Print(const char* str) {
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
    while(*str) {
 80006e8:	e014      	b.n	8000714 <Bluetooth_Print+0x34>
        while(!(USART1->SR & (1 << 7)));
 80006ea:	bf00      	nop
 80006ec:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <Bluetooth_Print+0x4c>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d0f9      	beq.n	80006ec <Bluetooth_Print+0xc>
        USART1->DR = *str;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	781a      	ldrb	r2, [r3, #0]
 80006fc:	4b0b      	ldr	r3, [pc, #44]	@ (800072c <Bluetooth_Print+0x4c>)
 80006fe:	605a      	str	r2, [r3, #4]
        while(!(USART1->SR & (1 << 6)));
 8000700:	bf00      	nop
 8000702:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <Bluetooth_Print+0x4c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800070a:	2b00      	cmp	r3, #0
 800070c:	d0f9      	beq.n	8000702 <Bluetooth_Print+0x22>
        str++;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	3301      	adds	r3, #1
 8000712:	607b      	str	r3, [r7, #4]
    while(*str) {
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d1e6      	bne.n	80006ea <Bluetooth_Print+0xa>
    }
}
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	40011000 	.word	0x40011000

08000730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <NMI_Handler+0x4>

08000738 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <HardFault_Handler+0x4>

08000740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <MemManage_Handler+0x4>

08000748 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <BusFault_Handler+0x4>

08000750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <UsageFault_Handler+0x4>

08000758 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000786:	f000 f8e1 	bl	800094c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}

0800078e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b086      	sub	sp, #24
 8000792:	af00      	add	r7, sp, #0
 8000794:	60f8      	str	r0, [r7, #12]
 8000796:	60b9      	str	r1, [r7, #8]
 8000798:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
 800079e:	e00a      	b.n	80007b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007a0:	f3af 8000 	nop.w
 80007a4:	4601      	mov	r1, r0
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	1c5a      	adds	r2, r3, #1
 80007aa:	60ba      	str	r2, [r7, #8]
 80007ac:	b2ca      	uxtb	r2, r1
 80007ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	3301      	adds	r3, #1
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	697a      	ldr	r2, [r7, #20]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	dbf0      	blt.n	80007a0 <_read+0x12>
  }

  return len;
 80007be:	687b      	ldr	r3, [r7, #4]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3718      	adds	r7, #24
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	e009      	b.n	80007ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	1c5a      	adds	r2, r3, #1
 80007de:	60ba      	str	r2, [r7, #8]
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ff52 	bl	800068c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	3301      	adds	r3, #1
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	697a      	ldr	r2, [r7, #20]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	dbf1      	blt.n	80007da <_write+0x12>
  }
  return len;
 80007f6:	687b      	ldr	r3, [r7, #4]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <_close>:

int _close(int file)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000808:	f04f 33ff 	mov.w	r3, #4294967295
}
 800080c:	4618      	mov	r0, r3
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000828:	605a      	str	r2, [r3, #4]
  return 0;
 800082a:	2300      	movs	r3, #0
}
 800082c:	4618      	mov	r0, r3
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <_isatty>:

int _isatty(int file)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000840:	2301      	movs	r3, #1
}
 8000842:	4618      	mov	r0, r3
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800084e:	b480      	push	{r7}
 8000850:	b085      	sub	sp, #20
 8000852:	af00      	add	r7, sp, #0
 8000854:	60f8      	str	r0, [r7, #12]
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800085a:	2300      	movs	r3, #0
}
 800085c:	4618      	mov	r0, r3
 800085e:	3714      	adds	r7, #20
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000870:	4a14      	ldr	r2, [pc, #80]	@ (80008c4 <_sbrk+0x5c>)
 8000872:	4b15      	ldr	r3, [pc, #84]	@ (80008c8 <_sbrk+0x60>)
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800087c:	4b13      	ldr	r3, [pc, #76]	@ (80008cc <_sbrk+0x64>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d102      	bne.n	800088a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000884:	4b11      	ldr	r3, [pc, #68]	@ (80008cc <_sbrk+0x64>)
 8000886:	4a12      	ldr	r2, [pc, #72]	@ (80008d0 <_sbrk+0x68>)
 8000888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800088a:	4b10      	ldr	r3, [pc, #64]	@ (80008cc <_sbrk+0x64>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4413      	add	r3, r2
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	429a      	cmp	r2, r3
 8000896:	d207      	bcs.n	80008a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000898:	f000 f9f2 	bl	8000c80 <__errno>
 800089c:	4603      	mov	r3, r0
 800089e:	220c      	movs	r2, #12
 80008a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008a2:	f04f 33ff 	mov.w	r3, #4294967295
 80008a6:	e009      	b.n	80008bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008a8:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <_sbrk+0x64>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ae:	4b07      	ldr	r3, [pc, #28]	@ (80008cc <_sbrk+0x64>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	4a05      	ldr	r2, [pc, #20]	@ (80008cc <_sbrk+0x64>)
 80008b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ba:	68fb      	ldr	r3, [r7, #12]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3718      	adds	r7, #24
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20020000 	.word	0x20020000
 80008c8:	00000400 	.word	0x00000400
 80008cc:	2000007c 	.word	0x2000007c
 80008d0:	200001d0 	.word	0x200001d0

080008d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <SystemInit+0x20>)
 80008da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008de:	4a05      	ldr	r2, [pc, #20]	@ (80008f4 <SystemInit+0x20>)
 80008e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000930 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008fc:	f7ff ffea 	bl	80008d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000900:	480c      	ldr	r0, [pc, #48]	@ (8000934 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000902:	490d      	ldr	r1, [pc, #52]	@ (8000938 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000904:	4a0d      	ldr	r2, [pc, #52]	@ (800093c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000908:	e002      	b.n	8000910 <LoopCopyDataInit>

0800090a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800090c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090e:	3304      	adds	r3, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000914:	d3f9      	bcc.n	800090a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000916:	4a0a      	ldr	r2, [pc, #40]	@ (8000940 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000918:	4c0a      	ldr	r4, [pc, #40]	@ (8000944 <LoopFillZerobss+0x22>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800091c:	e001      	b.n	8000922 <LoopFillZerobss>

0800091e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000920:	3204      	adds	r2, #4

08000922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000924:	d3fb      	bcc.n	800091e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000926:	f000 f9b1 	bl	8000c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800092a:	f7ff fcc1 	bl	80002b0 <main>
  bx  lr    
 800092e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000930:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000938:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800093c:	08001c04 	.word	0x08001c04
  ldr r2, =_sbss
 8000940:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000944:	200001d0 	.word	0x200001d0

08000948 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000948:	e7fe      	b.n	8000948 <ADC_IRQHandler>
	...

0800094c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000950:	4b06      	ldr	r3, [pc, #24]	@ (800096c <HAL_IncTick+0x20>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	461a      	mov	r2, r3
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <HAL_IncTick+0x24>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4413      	add	r3, r2
 800095c:	4a04      	ldr	r2, [pc, #16]	@ (8000970 <HAL_IncTick+0x24>)
 800095e:	6013      	str	r3, [r2, #0]
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	20000000 	.word	0x20000000
 8000970:	20000080 	.word	0x20000080

08000974 <std>:
 8000974:	2300      	movs	r3, #0
 8000976:	b510      	push	{r4, lr}
 8000978:	4604      	mov	r4, r0
 800097a:	e9c0 3300 	strd	r3, r3, [r0]
 800097e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000982:	6083      	str	r3, [r0, #8]
 8000984:	8181      	strh	r1, [r0, #12]
 8000986:	6643      	str	r3, [r0, #100]	@ 0x64
 8000988:	81c2      	strh	r2, [r0, #14]
 800098a:	6183      	str	r3, [r0, #24]
 800098c:	4619      	mov	r1, r3
 800098e:	2208      	movs	r2, #8
 8000990:	305c      	adds	r0, #92	@ 0x5c
 8000992:	f000 f926 	bl	8000be2 <memset>
 8000996:	4b0d      	ldr	r3, [pc, #52]	@ (80009cc <std+0x58>)
 8000998:	6263      	str	r3, [r4, #36]	@ 0x24
 800099a:	4b0d      	ldr	r3, [pc, #52]	@ (80009d0 <std+0x5c>)
 800099c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800099e:	4b0d      	ldr	r3, [pc, #52]	@ (80009d4 <std+0x60>)
 80009a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80009a2:	4b0d      	ldr	r3, [pc, #52]	@ (80009d8 <std+0x64>)
 80009a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <std+0x68>)
 80009a8:	6224      	str	r4, [r4, #32]
 80009aa:	429c      	cmp	r4, r3
 80009ac:	d006      	beq.n	80009bc <std+0x48>
 80009ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80009b2:	4294      	cmp	r4, r2
 80009b4:	d002      	beq.n	80009bc <std+0x48>
 80009b6:	33d0      	adds	r3, #208	@ 0xd0
 80009b8:	429c      	cmp	r4, r3
 80009ba:	d105      	bne.n	80009c8 <std+0x54>
 80009bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80009c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009c4:	f000 b986 	b.w	8000cd4 <__retarget_lock_init_recursive>
 80009c8:	bd10      	pop	{r4, pc}
 80009ca:	bf00      	nop
 80009cc:	08000b5d 	.word	0x08000b5d
 80009d0:	08000b7f 	.word	0x08000b7f
 80009d4:	08000bb7 	.word	0x08000bb7
 80009d8:	08000bdb 	.word	0x08000bdb
 80009dc:	20000084 	.word	0x20000084

080009e0 <stdio_exit_handler>:
 80009e0:	4a02      	ldr	r2, [pc, #8]	@ (80009ec <stdio_exit_handler+0xc>)
 80009e2:	4903      	ldr	r1, [pc, #12]	@ (80009f0 <stdio_exit_handler+0x10>)
 80009e4:	4803      	ldr	r0, [pc, #12]	@ (80009f4 <stdio_exit_handler+0x14>)
 80009e6:	f000 b869 	b.w	8000abc <_fwalk_sglue>
 80009ea:	bf00      	nop
 80009ec:	20000004 	.word	0x20000004
 80009f0:	08001825 	.word	0x08001825
 80009f4:	20000014 	.word	0x20000014

080009f8 <cleanup_stdio>:
 80009f8:	6841      	ldr	r1, [r0, #4]
 80009fa:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <cleanup_stdio+0x34>)
 80009fc:	4299      	cmp	r1, r3
 80009fe:	b510      	push	{r4, lr}
 8000a00:	4604      	mov	r4, r0
 8000a02:	d001      	beq.n	8000a08 <cleanup_stdio+0x10>
 8000a04:	f000 ff0e 	bl	8001824 <_fflush_r>
 8000a08:	68a1      	ldr	r1, [r4, #8]
 8000a0a:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <cleanup_stdio+0x38>)
 8000a0c:	4299      	cmp	r1, r3
 8000a0e:	d002      	beq.n	8000a16 <cleanup_stdio+0x1e>
 8000a10:	4620      	mov	r0, r4
 8000a12:	f000 ff07 	bl	8001824 <_fflush_r>
 8000a16:	68e1      	ldr	r1, [r4, #12]
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <cleanup_stdio+0x3c>)
 8000a1a:	4299      	cmp	r1, r3
 8000a1c:	d004      	beq.n	8000a28 <cleanup_stdio+0x30>
 8000a1e:	4620      	mov	r0, r4
 8000a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a24:	f000 befe 	b.w	8001824 <_fflush_r>
 8000a28:	bd10      	pop	{r4, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000084 	.word	0x20000084
 8000a30:	200000ec 	.word	0x200000ec
 8000a34:	20000154 	.word	0x20000154

08000a38 <global_stdio_init.part.0>:
 8000a38:	b510      	push	{r4, lr}
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <global_stdio_init.part.0+0x30>)
 8000a3c:	4c0b      	ldr	r4, [pc, #44]	@ (8000a6c <global_stdio_init.part.0+0x34>)
 8000a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8000a70 <global_stdio_init.part.0+0x38>)
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	4620      	mov	r0, r4
 8000a44:	2200      	movs	r2, #0
 8000a46:	2104      	movs	r1, #4
 8000a48:	f7ff ff94 	bl	8000974 <std>
 8000a4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000a50:	2201      	movs	r2, #1
 8000a52:	2109      	movs	r1, #9
 8000a54:	f7ff ff8e 	bl	8000974 <std>
 8000a58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a62:	2112      	movs	r1, #18
 8000a64:	f7ff bf86 	b.w	8000974 <std>
 8000a68:	200001bc 	.word	0x200001bc
 8000a6c:	20000084 	.word	0x20000084
 8000a70:	080009e1 	.word	0x080009e1

08000a74 <__sfp_lock_acquire>:
 8000a74:	4801      	ldr	r0, [pc, #4]	@ (8000a7c <__sfp_lock_acquire+0x8>)
 8000a76:	f000 b92e 	b.w	8000cd6 <__retarget_lock_acquire_recursive>
 8000a7a:	bf00      	nop
 8000a7c:	200001c5 	.word	0x200001c5

08000a80 <__sfp_lock_release>:
 8000a80:	4801      	ldr	r0, [pc, #4]	@ (8000a88 <__sfp_lock_release+0x8>)
 8000a82:	f000 b929 	b.w	8000cd8 <__retarget_lock_release_recursive>
 8000a86:	bf00      	nop
 8000a88:	200001c5 	.word	0x200001c5

08000a8c <__sinit>:
 8000a8c:	b510      	push	{r4, lr}
 8000a8e:	4604      	mov	r4, r0
 8000a90:	f7ff fff0 	bl	8000a74 <__sfp_lock_acquire>
 8000a94:	6a23      	ldr	r3, [r4, #32]
 8000a96:	b11b      	cbz	r3, 8000aa0 <__sinit+0x14>
 8000a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a9c:	f7ff bff0 	b.w	8000a80 <__sfp_lock_release>
 8000aa0:	4b04      	ldr	r3, [pc, #16]	@ (8000ab4 <__sinit+0x28>)
 8000aa2:	6223      	str	r3, [r4, #32]
 8000aa4:	4b04      	ldr	r3, [pc, #16]	@ (8000ab8 <__sinit+0x2c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d1f5      	bne.n	8000a98 <__sinit+0xc>
 8000aac:	f7ff ffc4 	bl	8000a38 <global_stdio_init.part.0>
 8000ab0:	e7f2      	b.n	8000a98 <__sinit+0xc>
 8000ab2:	bf00      	nop
 8000ab4:	080009f9 	.word	0x080009f9
 8000ab8:	200001bc 	.word	0x200001bc

08000abc <_fwalk_sglue>:
 8000abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ac0:	4607      	mov	r7, r0
 8000ac2:	4688      	mov	r8, r1
 8000ac4:	4614      	mov	r4, r2
 8000ac6:	2600      	movs	r6, #0
 8000ac8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000acc:	f1b9 0901 	subs.w	r9, r9, #1
 8000ad0:	d505      	bpl.n	8000ade <_fwalk_sglue+0x22>
 8000ad2:	6824      	ldr	r4, [r4, #0]
 8000ad4:	2c00      	cmp	r4, #0
 8000ad6:	d1f7      	bne.n	8000ac8 <_fwalk_sglue+0xc>
 8000ad8:	4630      	mov	r0, r6
 8000ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ade:	89ab      	ldrh	r3, [r5, #12]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d907      	bls.n	8000af4 <_fwalk_sglue+0x38>
 8000ae4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	d003      	beq.n	8000af4 <_fwalk_sglue+0x38>
 8000aec:	4629      	mov	r1, r5
 8000aee:	4638      	mov	r0, r7
 8000af0:	47c0      	blx	r8
 8000af2:	4306      	orrs	r6, r0
 8000af4:	3568      	adds	r5, #104	@ 0x68
 8000af6:	e7e9      	b.n	8000acc <_fwalk_sglue+0x10>

08000af8 <iprintf>:
 8000af8:	b40f      	push	{r0, r1, r2, r3}
 8000afa:	b507      	push	{r0, r1, r2, lr}
 8000afc:	4906      	ldr	r1, [pc, #24]	@ (8000b18 <iprintf+0x20>)
 8000afe:	ab04      	add	r3, sp, #16
 8000b00:	6808      	ldr	r0, [r1, #0]
 8000b02:	f853 2b04 	ldr.w	r2, [r3], #4
 8000b06:	6881      	ldr	r1, [r0, #8]
 8000b08:	9301      	str	r3, [sp, #4]
 8000b0a:	f000 fb61 	bl	80011d0 <_vfiprintf_r>
 8000b0e:	b003      	add	sp, #12
 8000b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8000b14:	b004      	add	sp, #16
 8000b16:	4770      	bx	lr
 8000b18:	20000010 	.word	0x20000010

08000b1c <siprintf>:
 8000b1c:	b40e      	push	{r1, r2, r3}
 8000b1e:	b500      	push	{lr}
 8000b20:	b09c      	sub	sp, #112	@ 0x70
 8000b22:	ab1d      	add	r3, sp, #116	@ 0x74
 8000b24:	9002      	str	r0, [sp, #8]
 8000b26:	9006      	str	r0, [sp, #24]
 8000b28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000b2c:	4809      	ldr	r0, [pc, #36]	@ (8000b54 <siprintf+0x38>)
 8000b2e:	9107      	str	r1, [sp, #28]
 8000b30:	9104      	str	r1, [sp, #16]
 8000b32:	4909      	ldr	r1, [pc, #36]	@ (8000b58 <siprintf+0x3c>)
 8000b34:	f853 2b04 	ldr.w	r2, [r3], #4
 8000b38:	9105      	str	r1, [sp, #20]
 8000b3a:	6800      	ldr	r0, [r0, #0]
 8000b3c:	9301      	str	r3, [sp, #4]
 8000b3e:	a902      	add	r1, sp, #8
 8000b40:	f000 fa20 	bl	8000f84 <_svfiprintf_r>
 8000b44:	9b02      	ldr	r3, [sp, #8]
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]
 8000b4a:	b01c      	add	sp, #112	@ 0x70
 8000b4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000b50:	b003      	add	sp, #12
 8000b52:	4770      	bx	lr
 8000b54:	20000010 	.word	0x20000010
 8000b58:	ffff0208 	.word	0xffff0208

08000b5c <__sread>:
 8000b5c:	b510      	push	{r4, lr}
 8000b5e:	460c      	mov	r4, r1
 8000b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b64:	f000 f868 	bl	8000c38 <_read_r>
 8000b68:	2800      	cmp	r0, #0
 8000b6a:	bfab      	itete	ge
 8000b6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000b6e:	89a3      	ldrhlt	r3, [r4, #12]
 8000b70:	181b      	addge	r3, r3, r0
 8000b72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000b76:	bfac      	ite	ge
 8000b78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000b7a:	81a3      	strhlt	r3, [r4, #12]
 8000b7c:	bd10      	pop	{r4, pc}

08000b7e <__swrite>:
 8000b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b82:	461f      	mov	r7, r3
 8000b84:	898b      	ldrh	r3, [r1, #12]
 8000b86:	05db      	lsls	r3, r3, #23
 8000b88:	4605      	mov	r5, r0
 8000b8a:	460c      	mov	r4, r1
 8000b8c:	4616      	mov	r6, r2
 8000b8e:	d505      	bpl.n	8000b9c <__swrite+0x1e>
 8000b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b94:	2302      	movs	r3, #2
 8000b96:	2200      	movs	r2, #0
 8000b98:	f000 f83c 	bl	8000c14 <_lseek_r>
 8000b9c:	89a3      	ldrh	r3, [r4, #12]
 8000b9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ba2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ba6:	81a3      	strh	r3, [r4, #12]
 8000ba8:	4632      	mov	r2, r6
 8000baa:	463b      	mov	r3, r7
 8000bac:	4628      	mov	r0, r5
 8000bae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000bb2:	f000 b853 	b.w	8000c5c <_write_r>

08000bb6 <__sseek>:
 8000bb6:	b510      	push	{r4, lr}
 8000bb8:	460c      	mov	r4, r1
 8000bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bbe:	f000 f829 	bl	8000c14 <_lseek_r>
 8000bc2:	1c43      	adds	r3, r0, #1
 8000bc4:	89a3      	ldrh	r3, [r4, #12]
 8000bc6:	bf15      	itete	ne
 8000bc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000bca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000bce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000bd2:	81a3      	strheq	r3, [r4, #12]
 8000bd4:	bf18      	it	ne
 8000bd6:	81a3      	strhne	r3, [r4, #12]
 8000bd8:	bd10      	pop	{r4, pc}

08000bda <__sclose>:
 8000bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bde:	f000 b809 	b.w	8000bf4 <_close_r>

08000be2 <memset>:
 8000be2:	4402      	add	r2, r0
 8000be4:	4603      	mov	r3, r0
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d100      	bne.n	8000bec <memset+0xa>
 8000bea:	4770      	bx	lr
 8000bec:	f803 1b01 	strb.w	r1, [r3], #1
 8000bf0:	e7f9      	b.n	8000be6 <memset+0x4>
	...

08000bf4 <_close_r>:
 8000bf4:	b538      	push	{r3, r4, r5, lr}
 8000bf6:	4d06      	ldr	r5, [pc, #24]	@ (8000c10 <_close_r+0x1c>)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	4604      	mov	r4, r0
 8000bfc:	4608      	mov	r0, r1
 8000bfe:	602b      	str	r3, [r5, #0]
 8000c00:	f7ff fdfe 	bl	8000800 <_close>
 8000c04:	1c43      	adds	r3, r0, #1
 8000c06:	d102      	bne.n	8000c0e <_close_r+0x1a>
 8000c08:	682b      	ldr	r3, [r5, #0]
 8000c0a:	b103      	cbz	r3, 8000c0e <_close_r+0x1a>
 8000c0c:	6023      	str	r3, [r4, #0]
 8000c0e:	bd38      	pop	{r3, r4, r5, pc}
 8000c10:	200001c0 	.word	0x200001c0

08000c14 <_lseek_r>:
 8000c14:	b538      	push	{r3, r4, r5, lr}
 8000c16:	4d07      	ldr	r5, [pc, #28]	@ (8000c34 <_lseek_r+0x20>)
 8000c18:	4604      	mov	r4, r0
 8000c1a:	4608      	mov	r0, r1
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	2200      	movs	r2, #0
 8000c20:	602a      	str	r2, [r5, #0]
 8000c22:	461a      	mov	r2, r3
 8000c24:	f7ff fe13 	bl	800084e <_lseek>
 8000c28:	1c43      	adds	r3, r0, #1
 8000c2a:	d102      	bne.n	8000c32 <_lseek_r+0x1e>
 8000c2c:	682b      	ldr	r3, [r5, #0]
 8000c2e:	b103      	cbz	r3, 8000c32 <_lseek_r+0x1e>
 8000c30:	6023      	str	r3, [r4, #0]
 8000c32:	bd38      	pop	{r3, r4, r5, pc}
 8000c34:	200001c0 	.word	0x200001c0

08000c38 <_read_r>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	4d07      	ldr	r5, [pc, #28]	@ (8000c58 <_read_r+0x20>)
 8000c3c:	4604      	mov	r4, r0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	4611      	mov	r1, r2
 8000c42:	2200      	movs	r2, #0
 8000c44:	602a      	str	r2, [r5, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	f7ff fda1 	bl	800078e <_read>
 8000c4c:	1c43      	adds	r3, r0, #1
 8000c4e:	d102      	bne.n	8000c56 <_read_r+0x1e>
 8000c50:	682b      	ldr	r3, [r5, #0]
 8000c52:	b103      	cbz	r3, 8000c56 <_read_r+0x1e>
 8000c54:	6023      	str	r3, [r4, #0]
 8000c56:	bd38      	pop	{r3, r4, r5, pc}
 8000c58:	200001c0 	.word	0x200001c0

08000c5c <_write_r>:
 8000c5c:	b538      	push	{r3, r4, r5, lr}
 8000c5e:	4d07      	ldr	r5, [pc, #28]	@ (8000c7c <_write_r+0x20>)
 8000c60:	4604      	mov	r4, r0
 8000c62:	4608      	mov	r0, r1
 8000c64:	4611      	mov	r1, r2
 8000c66:	2200      	movs	r2, #0
 8000c68:	602a      	str	r2, [r5, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	f7ff fdac 	bl	80007c8 <_write>
 8000c70:	1c43      	adds	r3, r0, #1
 8000c72:	d102      	bne.n	8000c7a <_write_r+0x1e>
 8000c74:	682b      	ldr	r3, [r5, #0]
 8000c76:	b103      	cbz	r3, 8000c7a <_write_r+0x1e>
 8000c78:	6023      	str	r3, [r4, #0]
 8000c7a:	bd38      	pop	{r3, r4, r5, pc}
 8000c7c:	200001c0 	.word	0x200001c0

08000c80 <__errno>:
 8000c80:	4b01      	ldr	r3, [pc, #4]	@ (8000c88 <__errno+0x8>)
 8000c82:	6818      	ldr	r0, [r3, #0]
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000010 	.word	0x20000010

08000c8c <__libc_init_array>:
 8000c8c:	b570      	push	{r4, r5, r6, lr}
 8000c8e:	4d0d      	ldr	r5, [pc, #52]	@ (8000cc4 <__libc_init_array+0x38>)
 8000c90:	4c0d      	ldr	r4, [pc, #52]	@ (8000cc8 <__libc_init_array+0x3c>)
 8000c92:	1b64      	subs	r4, r4, r5
 8000c94:	10a4      	asrs	r4, r4, #2
 8000c96:	2600      	movs	r6, #0
 8000c98:	42a6      	cmp	r6, r4
 8000c9a:	d109      	bne.n	8000cb0 <__libc_init_array+0x24>
 8000c9c:	4d0b      	ldr	r5, [pc, #44]	@ (8000ccc <__libc_init_array+0x40>)
 8000c9e:	4c0c      	ldr	r4, [pc, #48]	@ (8000cd0 <__libc_init_array+0x44>)
 8000ca0:	f000 ff6e 	bl	8001b80 <_init>
 8000ca4:	1b64      	subs	r4, r4, r5
 8000ca6:	10a4      	asrs	r4, r4, #2
 8000ca8:	2600      	movs	r6, #0
 8000caa:	42a6      	cmp	r6, r4
 8000cac:	d105      	bne.n	8000cba <__libc_init_array+0x2e>
 8000cae:	bd70      	pop	{r4, r5, r6, pc}
 8000cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cb4:	4798      	blx	r3
 8000cb6:	3601      	adds	r6, #1
 8000cb8:	e7ee      	b.n	8000c98 <__libc_init_array+0xc>
 8000cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cbe:	4798      	blx	r3
 8000cc0:	3601      	adds	r6, #1
 8000cc2:	e7f2      	b.n	8000caa <__libc_init_array+0x1e>
 8000cc4:	08001bfc 	.word	0x08001bfc
 8000cc8:	08001bfc 	.word	0x08001bfc
 8000ccc:	08001bfc 	.word	0x08001bfc
 8000cd0:	08001c00 	.word	0x08001c00

08000cd4 <__retarget_lock_init_recursive>:
 8000cd4:	4770      	bx	lr

08000cd6 <__retarget_lock_acquire_recursive>:
 8000cd6:	4770      	bx	lr

08000cd8 <__retarget_lock_release_recursive>:
 8000cd8:	4770      	bx	lr
	...

08000cdc <_free_r>:
 8000cdc:	b538      	push	{r3, r4, r5, lr}
 8000cde:	4605      	mov	r5, r0
 8000ce0:	2900      	cmp	r1, #0
 8000ce2:	d041      	beq.n	8000d68 <_free_r+0x8c>
 8000ce4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ce8:	1f0c      	subs	r4, r1, #4
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	bfb8      	it	lt
 8000cee:	18e4      	addlt	r4, r4, r3
 8000cf0:	f000 f8e0 	bl	8000eb4 <__malloc_lock>
 8000cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8000d6c <_free_r+0x90>)
 8000cf6:	6813      	ldr	r3, [r2, #0]
 8000cf8:	b933      	cbnz	r3, 8000d08 <_free_r+0x2c>
 8000cfa:	6063      	str	r3, [r4, #4]
 8000cfc:	6014      	str	r4, [r2, #0]
 8000cfe:	4628      	mov	r0, r5
 8000d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d04:	f000 b8dc 	b.w	8000ec0 <__malloc_unlock>
 8000d08:	42a3      	cmp	r3, r4
 8000d0a:	d908      	bls.n	8000d1e <_free_r+0x42>
 8000d0c:	6820      	ldr	r0, [r4, #0]
 8000d0e:	1821      	adds	r1, r4, r0
 8000d10:	428b      	cmp	r3, r1
 8000d12:	bf01      	itttt	eq
 8000d14:	6819      	ldreq	r1, [r3, #0]
 8000d16:	685b      	ldreq	r3, [r3, #4]
 8000d18:	1809      	addeq	r1, r1, r0
 8000d1a:	6021      	streq	r1, [r4, #0]
 8000d1c:	e7ed      	b.n	8000cfa <_free_r+0x1e>
 8000d1e:	461a      	mov	r2, r3
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	b10b      	cbz	r3, 8000d28 <_free_r+0x4c>
 8000d24:	42a3      	cmp	r3, r4
 8000d26:	d9fa      	bls.n	8000d1e <_free_r+0x42>
 8000d28:	6811      	ldr	r1, [r2, #0]
 8000d2a:	1850      	adds	r0, r2, r1
 8000d2c:	42a0      	cmp	r0, r4
 8000d2e:	d10b      	bne.n	8000d48 <_free_r+0x6c>
 8000d30:	6820      	ldr	r0, [r4, #0]
 8000d32:	4401      	add	r1, r0
 8000d34:	1850      	adds	r0, r2, r1
 8000d36:	4283      	cmp	r3, r0
 8000d38:	6011      	str	r1, [r2, #0]
 8000d3a:	d1e0      	bne.n	8000cfe <_free_r+0x22>
 8000d3c:	6818      	ldr	r0, [r3, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	6053      	str	r3, [r2, #4]
 8000d42:	4408      	add	r0, r1
 8000d44:	6010      	str	r0, [r2, #0]
 8000d46:	e7da      	b.n	8000cfe <_free_r+0x22>
 8000d48:	d902      	bls.n	8000d50 <_free_r+0x74>
 8000d4a:	230c      	movs	r3, #12
 8000d4c:	602b      	str	r3, [r5, #0]
 8000d4e:	e7d6      	b.n	8000cfe <_free_r+0x22>
 8000d50:	6820      	ldr	r0, [r4, #0]
 8000d52:	1821      	adds	r1, r4, r0
 8000d54:	428b      	cmp	r3, r1
 8000d56:	bf04      	itt	eq
 8000d58:	6819      	ldreq	r1, [r3, #0]
 8000d5a:	685b      	ldreq	r3, [r3, #4]
 8000d5c:	6063      	str	r3, [r4, #4]
 8000d5e:	bf04      	itt	eq
 8000d60:	1809      	addeq	r1, r1, r0
 8000d62:	6021      	streq	r1, [r4, #0]
 8000d64:	6054      	str	r4, [r2, #4]
 8000d66:	e7ca      	b.n	8000cfe <_free_r+0x22>
 8000d68:	bd38      	pop	{r3, r4, r5, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200001cc 	.word	0x200001cc

08000d70 <sbrk_aligned>:
 8000d70:	b570      	push	{r4, r5, r6, lr}
 8000d72:	4e0f      	ldr	r6, [pc, #60]	@ (8000db0 <sbrk_aligned+0x40>)
 8000d74:	460c      	mov	r4, r1
 8000d76:	6831      	ldr	r1, [r6, #0]
 8000d78:	4605      	mov	r5, r0
 8000d7a:	b911      	cbnz	r1, 8000d82 <sbrk_aligned+0x12>
 8000d7c:	f000 fe28 	bl	80019d0 <_sbrk_r>
 8000d80:	6030      	str	r0, [r6, #0]
 8000d82:	4621      	mov	r1, r4
 8000d84:	4628      	mov	r0, r5
 8000d86:	f000 fe23 	bl	80019d0 <_sbrk_r>
 8000d8a:	1c43      	adds	r3, r0, #1
 8000d8c:	d103      	bne.n	8000d96 <sbrk_aligned+0x26>
 8000d8e:	f04f 34ff 	mov.w	r4, #4294967295
 8000d92:	4620      	mov	r0, r4
 8000d94:	bd70      	pop	{r4, r5, r6, pc}
 8000d96:	1cc4      	adds	r4, r0, #3
 8000d98:	f024 0403 	bic.w	r4, r4, #3
 8000d9c:	42a0      	cmp	r0, r4
 8000d9e:	d0f8      	beq.n	8000d92 <sbrk_aligned+0x22>
 8000da0:	1a21      	subs	r1, r4, r0
 8000da2:	4628      	mov	r0, r5
 8000da4:	f000 fe14 	bl	80019d0 <_sbrk_r>
 8000da8:	3001      	adds	r0, #1
 8000daa:	d1f2      	bne.n	8000d92 <sbrk_aligned+0x22>
 8000dac:	e7ef      	b.n	8000d8e <sbrk_aligned+0x1e>
 8000dae:	bf00      	nop
 8000db0:	200001c8 	.word	0x200001c8

08000db4 <_malloc_r>:
 8000db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000db8:	1ccd      	adds	r5, r1, #3
 8000dba:	f025 0503 	bic.w	r5, r5, #3
 8000dbe:	3508      	adds	r5, #8
 8000dc0:	2d0c      	cmp	r5, #12
 8000dc2:	bf38      	it	cc
 8000dc4:	250c      	movcc	r5, #12
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	4606      	mov	r6, r0
 8000dca:	db01      	blt.n	8000dd0 <_malloc_r+0x1c>
 8000dcc:	42a9      	cmp	r1, r5
 8000dce:	d904      	bls.n	8000dda <_malloc_r+0x26>
 8000dd0:	230c      	movs	r3, #12
 8000dd2:	6033      	str	r3, [r6, #0]
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000dda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000eb0 <_malloc_r+0xfc>
 8000dde:	f000 f869 	bl	8000eb4 <__malloc_lock>
 8000de2:	f8d8 3000 	ldr.w	r3, [r8]
 8000de6:	461c      	mov	r4, r3
 8000de8:	bb44      	cbnz	r4, 8000e3c <_malloc_r+0x88>
 8000dea:	4629      	mov	r1, r5
 8000dec:	4630      	mov	r0, r6
 8000dee:	f7ff ffbf 	bl	8000d70 <sbrk_aligned>
 8000df2:	1c43      	adds	r3, r0, #1
 8000df4:	4604      	mov	r4, r0
 8000df6:	d158      	bne.n	8000eaa <_malloc_r+0xf6>
 8000df8:	f8d8 4000 	ldr.w	r4, [r8]
 8000dfc:	4627      	mov	r7, r4
 8000dfe:	2f00      	cmp	r7, #0
 8000e00:	d143      	bne.n	8000e8a <_malloc_r+0xd6>
 8000e02:	2c00      	cmp	r4, #0
 8000e04:	d04b      	beq.n	8000e9e <_malloc_r+0xea>
 8000e06:	6823      	ldr	r3, [r4, #0]
 8000e08:	4639      	mov	r1, r7
 8000e0a:	4630      	mov	r0, r6
 8000e0c:	eb04 0903 	add.w	r9, r4, r3
 8000e10:	f000 fdde 	bl	80019d0 <_sbrk_r>
 8000e14:	4581      	cmp	r9, r0
 8000e16:	d142      	bne.n	8000e9e <_malloc_r+0xea>
 8000e18:	6821      	ldr	r1, [r4, #0]
 8000e1a:	1a6d      	subs	r5, r5, r1
 8000e1c:	4629      	mov	r1, r5
 8000e1e:	4630      	mov	r0, r6
 8000e20:	f7ff ffa6 	bl	8000d70 <sbrk_aligned>
 8000e24:	3001      	adds	r0, #1
 8000e26:	d03a      	beq.n	8000e9e <_malloc_r+0xea>
 8000e28:	6823      	ldr	r3, [r4, #0]
 8000e2a:	442b      	add	r3, r5
 8000e2c:	6023      	str	r3, [r4, #0]
 8000e2e:	f8d8 3000 	ldr.w	r3, [r8]
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	bb62      	cbnz	r2, 8000e90 <_malloc_r+0xdc>
 8000e36:	f8c8 7000 	str.w	r7, [r8]
 8000e3a:	e00f      	b.n	8000e5c <_malloc_r+0xa8>
 8000e3c:	6822      	ldr	r2, [r4, #0]
 8000e3e:	1b52      	subs	r2, r2, r5
 8000e40:	d420      	bmi.n	8000e84 <_malloc_r+0xd0>
 8000e42:	2a0b      	cmp	r2, #11
 8000e44:	d917      	bls.n	8000e76 <_malloc_r+0xc2>
 8000e46:	1961      	adds	r1, r4, r5
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	6025      	str	r5, [r4, #0]
 8000e4c:	bf18      	it	ne
 8000e4e:	6059      	strne	r1, [r3, #4]
 8000e50:	6863      	ldr	r3, [r4, #4]
 8000e52:	bf08      	it	eq
 8000e54:	f8c8 1000 	streq.w	r1, [r8]
 8000e58:	5162      	str	r2, [r4, r5]
 8000e5a:	604b      	str	r3, [r1, #4]
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	f000 f82f 	bl	8000ec0 <__malloc_unlock>
 8000e62:	f104 000b 	add.w	r0, r4, #11
 8000e66:	1d23      	adds	r3, r4, #4
 8000e68:	f020 0007 	bic.w	r0, r0, #7
 8000e6c:	1ac2      	subs	r2, r0, r3
 8000e6e:	bf1c      	itt	ne
 8000e70:	1a1b      	subne	r3, r3, r0
 8000e72:	50a3      	strne	r3, [r4, r2]
 8000e74:	e7af      	b.n	8000dd6 <_malloc_r+0x22>
 8000e76:	6862      	ldr	r2, [r4, #4]
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	bf0c      	ite	eq
 8000e7c:	f8c8 2000 	streq.w	r2, [r8]
 8000e80:	605a      	strne	r2, [r3, #4]
 8000e82:	e7eb      	b.n	8000e5c <_malloc_r+0xa8>
 8000e84:	4623      	mov	r3, r4
 8000e86:	6864      	ldr	r4, [r4, #4]
 8000e88:	e7ae      	b.n	8000de8 <_malloc_r+0x34>
 8000e8a:	463c      	mov	r4, r7
 8000e8c:	687f      	ldr	r7, [r7, #4]
 8000e8e:	e7b6      	b.n	8000dfe <_malloc_r+0x4a>
 8000e90:	461a      	mov	r2, r3
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	42a3      	cmp	r3, r4
 8000e96:	d1fb      	bne.n	8000e90 <_malloc_r+0xdc>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	6053      	str	r3, [r2, #4]
 8000e9c:	e7de      	b.n	8000e5c <_malloc_r+0xa8>
 8000e9e:	230c      	movs	r3, #12
 8000ea0:	6033      	str	r3, [r6, #0]
 8000ea2:	4630      	mov	r0, r6
 8000ea4:	f000 f80c 	bl	8000ec0 <__malloc_unlock>
 8000ea8:	e794      	b.n	8000dd4 <_malloc_r+0x20>
 8000eaa:	6005      	str	r5, [r0, #0]
 8000eac:	e7d6      	b.n	8000e5c <_malloc_r+0xa8>
 8000eae:	bf00      	nop
 8000eb0:	200001cc 	.word	0x200001cc

08000eb4 <__malloc_lock>:
 8000eb4:	4801      	ldr	r0, [pc, #4]	@ (8000ebc <__malloc_lock+0x8>)
 8000eb6:	f7ff bf0e 	b.w	8000cd6 <__retarget_lock_acquire_recursive>
 8000eba:	bf00      	nop
 8000ebc:	200001c4 	.word	0x200001c4

08000ec0 <__malloc_unlock>:
 8000ec0:	4801      	ldr	r0, [pc, #4]	@ (8000ec8 <__malloc_unlock+0x8>)
 8000ec2:	f7ff bf09 	b.w	8000cd8 <__retarget_lock_release_recursive>
 8000ec6:	bf00      	nop
 8000ec8:	200001c4 	.word	0x200001c4

08000ecc <__ssputs_r>:
 8000ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ed0:	688e      	ldr	r6, [r1, #8]
 8000ed2:	461f      	mov	r7, r3
 8000ed4:	42be      	cmp	r6, r7
 8000ed6:	680b      	ldr	r3, [r1, #0]
 8000ed8:	4682      	mov	sl, r0
 8000eda:	460c      	mov	r4, r1
 8000edc:	4690      	mov	r8, r2
 8000ede:	d82d      	bhi.n	8000f3c <__ssputs_r+0x70>
 8000ee0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000ee4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000ee8:	d026      	beq.n	8000f38 <__ssputs_r+0x6c>
 8000eea:	6965      	ldr	r5, [r4, #20]
 8000eec:	6909      	ldr	r1, [r1, #16]
 8000eee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000ef2:	eba3 0901 	sub.w	r9, r3, r1
 8000ef6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000efa:	1c7b      	adds	r3, r7, #1
 8000efc:	444b      	add	r3, r9
 8000efe:	106d      	asrs	r5, r5, #1
 8000f00:	429d      	cmp	r5, r3
 8000f02:	bf38      	it	cc
 8000f04:	461d      	movcc	r5, r3
 8000f06:	0553      	lsls	r3, r2, #21
 8000f08:	d527      	bpl.n	8000f5a <__ssputs_r+0x8e>
 8000f0a:	4629      	mov	r1, r5
 8000f0c:	f7ff ff52 	bl	8000db4 <_malloc_r>
 8000f10:	4606      	mov	r6, r0
 8000f12:	b360      	cbz	r0, 8000f6e <__ssputs_r+0xa2>
 8000f14:	6921      	ldr	r1, [r4, #16]
 8000f16:	464a      	mov	r2, r9
 8000f18:	f000 fd6a 	bl	80019f0 <memcpy>
 8000f1c:	89a3      	ldrh	r3, [r4, #12]
 8000f1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f26:	81a3      	strh	r3, [r4, #12]
 8000f28:	6126      	str	r6, [r4, #16]
 8000f2a:	6165      	str	r5, [r4, #20]
 8000f2c:	444e      	add	r6, r9
 8000f2e:	eba5 0509 	sub.w	r5, r5, r9
 8000f32:	6026      	str	r6, [r4, #0]
 8000f34:	60a5      	str	r5, [r4, #8]
 8000f36:	463e      	mov	r6, r7
 8000f38:	42be      	cmp	r6, r7
 8000f3a:	d900      	bls.n	8000f3e <__ssputs_r+0x72>
 8000f3c:	463e      	mov	r6, r7
 8000f3e:	6820      	ldr	r0, [r4, #0]
 8000f40:	4632      	mov	r2, r6
 8000f42:	4641      	mov	r1, r8
 8000f44:	f000 fd2a 	bl	800199c <memmove>
 8000f48:	68a3      	ldr	r3, [r4, #8]
 8000f4a:	1b9b      	subs	r3, r3, r6
 8000f4c:	60a3      	str	r3, [r4, #8]
 8000f4e:	6823      	ldr	r3, [r4, #0]
 8000f50:	4433      	add	r3, r6
 8000f52:	6023      	str	r3, [r4, #0]
 8000f54:	2000      	movs	r0, #0
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	462a      	mov	r2, r5
 8000f5c:	f000 fd56 	bl	8001a0c <_realloc_r>
 8000f60:	4606      	mov	r6, r0
 8000f62:	2800      	cmp	r0, #0
 8000f64:	d1e0      	bne.n	8000f28 <__ssputs_r+0x5c>
 8000f66:	6921      	ldr	r1, [r4, #16]
 8000f68:	4650      	mov	r0, sl
 8000f6a:	f7ff feb7 	bl	8000cdc <_free_r>
 8000f6e:	230c      	movs	r3, #12
 8000f70:	f8ca 3000 	str.w	r3, [sl]
 8000f74:	89a3      	ldrh	r3, [r4, #12]
 8000f76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f7a:	81a3      	strh	r3, [r4, #12]
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f80:	e7e9      	b.n	8000f56 <__ssputs_r+0x8a>
	...

08000f84 <_svfiprintf_r>:
 8000f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f88:	4698      	mov	r8, r3
 8000f8a:	898b      	ldrh	r3, [r1, #12]
 8000f8c:	061b      	lsls	r3, r3, #24
 8000f8e:	b09d      	sub	sp, #116	@ 0x74
 8000f90:	4607      	mov	r7, r0
 8000f92:	460d      	mov	r5, r1
 8000f94:	4614      	mov	r4, r2
 8000f96:	d510      	bpl.n	8000fba <_svfiprintf_r+0x36>
 8000f98:	690b      	ldr	r3, [r1, #16]
 8000f9a:	b973      	cbnz	r3, 8000fba <_svfiprintf_r+0x36>
 8000f9c:	2140      	movs	r1, #64	@ 0x40
 8000f9e:	f7ff ff09 	bl	8000db4 <_malloc_r>
 8000fa2:	6028      	str	r0, [r5, #0]
 8000fa4:	6128      	str	r0, [r5, #16]
 8000fa6:	b930      	cbnz	r0, 8000fb6 <_svfiprintf_r+0x32>
 8000fa8:	230c      	movs	r3, #12
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	b01d      	add	sp, #116	@ 0x74
 8000fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fb6:	2340      	movs	r3, #64	@ 0x40
 8000fb8:	616b      	str	r3, [r5, #20]
 8000fba:	2300      	movs	r3, #0
 8000fbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8000fbe:	2320      	movs	r3, #32
 8000fc0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000fc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8000fc8:	2330      	movs	r3, #48	@ 0x30
 8000fca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001168 <_svfiprintf_r+0x1e4>
 8000fce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000fd2:	f04f 0901 	mov.w	r9, #1
 8000fd6:	4623      	mov	r3, r4
 8000fd8:	469a      	mov	sl, r3
 8000fda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000fde:	b10a      	cbz	r2, 8000fe4 <_svfiprintf_r+0x60>
 8000fe0:	2a25      	cmp	r2, #37	@ 0x25
 8000fe2:	d1f9      	bne.n	8000fd8 <_svfiprintf_r+0x54>
 8000fe4:	ebba 0b04 	subs.w	fp, sl, r4
 8000fe8:	d00b      	beq.n	8001002 <_svfiprintf_r+0x7e>
 8000fea:	465b      	mov	r3, fp
 8000fec:	4622      	mov	r2, r4
 8000fee:	4629      	mov	r1, r5
 8000ff0:	4638      	mov	r0, r7
 8000ff2:	f7ff ff6b 	bl	8000ecc <__ssputs_r>
 8000ff6:	3001      	adds	r0, #1
 8000ff8:	f000 80a7 	beq.w	800114a <_svfiprintf_r+0x1c6>
 8000ffc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000ffe:	445a      	add	r2, fp
 8001000:	9209      	str	r2, [sp, #36]	@ 0x24
 8001002:	f89a 3000 	ldrb.w	r3, [sl]
 8001006:	2b00      	cmp	r3, #0
 8001008:	f000 809f 	beq.w	800114a <_svfiprintf_r+0x1c6>
 800100c:	2300      	movs	r3, #0
 800100e:	f04f 32ff 	mov.w	r2, #4294967295
 8001012:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001016:	f10a 0a01 	add.w	sl, sl, #1
 800101a:	9304      	str	r3, [sp, #16]
 800101c:	9307      	str	r3, [sp, #28]
 800101e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001022:	931a      	str	r3, [sp, #104]	@ 0x68
 8001024:	4654      	mov	r4, sl
 8001026:	2205      	movs	r2, #5
 8001028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800102c:	484e      	ldr	r0, [pc, #312]	@ (8001168 <_svfiprintf_r+0x1e4>)
 800102e:	f7ff f8ef 	bl	8000210 <memchr>
 8001032:	9a04      	ldr	r2, [sp, #16]
 8001034:	b9d8      	cbnz	r0, 800106e <_svfiprintf_r+0xea>
 8001036:	06d0      	lsls	r0, r2, #27
 8001038:	bf44      	itt	mi
 800103a:	2320      	movmi	r3, #32
 800103c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001040:	0711      	lsls	r1, r2, #28
 8001042:	bf44      	itt	mi
 8001044:	232b      	movmi	r3, #43	@ 0x2b
 8001046:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800104a:	f89a 3000 	ldrb.w	r3, [sl]
 800104e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001050:	d015      	beq.n	800107e <_svfiprintf_r+0xfa>
 8001052:	9a07      	ldr	r2, [sp, #28]
 8001054:	4654      	mov	r4, sl
 8001056:	2000      	movs	r0, #0
 8001058:	f04f 0c0a 	mov.w	ip, #10
 800105c:	4621      	mov	r1, r4
 800105e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001062:	3b30      	subs	r3, #48	@ 0x30
 8001064:	2b09      	cmp	r3, #9
 8001066:	d94b      	bls.n	8001100 <_svfiprintf_r+0x17c>
 8001068:	b1b0      	cbz	r0, 8001098 <_svfiprintf_r+0x114>
 800106a:	9207      	str	r2, [sp, #28]
 800106c:	e014      	b.n	8001098 <_svfiprintf_r+0x114>
 800106e:	eba0 0308 	sub.w	r3, r0, r8
 8001072:	fa09 f303 	lsl.w	r3, r9, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	9304      	str	r3, [sp, #16]
 800107a:	46a2      	mov	sl, r4
 800107c:	e7d2      	b.n	8001024 <_svfiprintf_r+0xa0>
 800107e:	9b03      	ldr	r3, [sp, #12]
 8001080:	1d19      	adds	r1, r3, #4
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	9103      	str	r1, [sp, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	bfbb      	ittet	lt
 800108a:	425b      	neglt	r3, r3
 800108c:	f042 0202 	orrlt.w	r2, r2, #2
 8001090:	9307      	strge	r3, [sp, #28]
 8001092:	9307      	strlt	r3, [sp, #28]
 8001094:	bfb8      	it	lt
 8001096:	9204      	strlt	r2, [sp, #16]
 8001098:	7823      	ldrb	r3, [r4, #0]
 800109a:	2b2e      	cmp	r3, #46	@ 0x2e
 800109c:	d10a      	bne.n	80010b4 <_svfiprintf_r+0x130>
 800109e:	7863      	ldrb	r3, [r4, #1]
 80010a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80010a2:	d132      	bne.n	800110a <_svfiprintf_r+0x186>
 80010a4:	9b03      	ldr	r3, [sp, #12]
 80010a6:	1d1a      	adds	r2, r3, #4
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	9203      	str	r2, [sp, #12]
 80010ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80010b0:	3402      	adds	r4, #2
 80010b2:	9305      	str	r3, [sp, #20]
 80010b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001178 <_svfiprintf_r+0x1f4>
 80010b8:	7821      	ldrb	r1, [r4, #0]
 80010ba:	2203      	movs	r2, #3
 80010bc:	4650      	mov	r0, sl
 80010be:	f7ff f8a7 	bl	8000210 <memchr>
 80010c2:	b138      	cbz	r0, 80010d4 <_svfiprintf_r+0x150>
 80010c4:	9b04      	ldr	r3, [sp, #16]
 80010c6:	eba0 000a 	sub.w	r0, r0, sl
 80010ca:	2240      	movs	r2, #64	@ 0x40
 80010cc:	4082      	lsls	r2, r0
 80010ce:	4313      	orrs	r3, r2
 80010d0:	3401      	adds	r4, #1
 80010d2:	9304      	str	r3, [sp, #16]
 80010d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010d8:	4824      	ldr	r0, [pc, #144]	@ (800116c <_svfiprintf_r+0x1e8>)
 80010da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80010de:	2206      	movs	r2, #6
 80010e0:	f7ff f896 	bl	8000210 <memchr>
 80010e4:	2800      	cmp	r0, #0
 80010e6:	d036      	beq.n	8001156 <_svfiprintf_r+0x1d2>
 80010e8:	4b21      	ldr	r3, [pc, #132]	@ (8001170 <_svfiprintf_r+0x1ec>)
 80010ea:	bb1b      	cbnz	r3, 8001134 <_svfiprintf_r+0x1b0>
 80010ec:	9b03      	ldr	r3, [sp, #12]
 80010ee:	3307      	adds	r3, #7
 80010f0:	f023 0307 	bic.w	r3, r3, #7
 80010f4:	3308      	adds	r3, #8
 80010f6:	9303      	str	r3, [sp, #12]
 80010f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80010fa:	4433      	add	r3, r6
 80010fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80010fe:	e76a      	b.n	8000fd6 <_svfiprintf_r+0x52>
 8001100:	fb0c 3202 	mla	r2, ip, r2, r3
 8001104:	460c      	mov	r4, r1
 8001106:	2001      	movs	r0, #1
 8001108:	e7a8      	b.n	800105c <_svfiprintf_r+0xd8>
 800110a:	2300      	movs	r3, #0
 800110c:	3401      	adds	r4, #1
 800110e:	9305      	str	r3, [sp, #20]
 8001110:	4619      	mov	r1, r3
 8001112:	f04f 0c0a 	mov.w	ip, #10
 8001116:	4620      	mov	r0, r4
 8001118:	f810 2b01 	ldrb.w	r2, [r0], #1
 800111c:	3a30      	subs	r2, #48	@ 0x30
 800111e:	2a09      	cmp	r2, #9
 8001120:	d903      	bls.n	800112a <_svfiprintf_r+0x1a6>
 8001122:	2b00      	cmp	r3, #0
 8001124:	d0c6      	beq.n	80010b4 <_svfiprintf_r+0x130>
 8001126:	9105      	str	r1, [sp, #20]
 8001128:	e7c4      	b.n	80010b4 <_svfiprintf_r+0x130>
 800112a:	fb0c 2101 	mla	r1, ip, r1, r2
 800112e:	4604      	mov	r4, r0
 8001130:	2301      	movs	r3, #1
 8001132:	e7f0      	b.n	8001116 <_svfiprintf_r+0x192>
 8001134:	ab03      	add	r3, sp, #12
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	462a      	mov	r2, r5
 800113a:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <_svfiprintf_r+0x1f0>)
 800113c:	a904      	add	r1, sp, #16
 800113e:	4638      	mov	r0, r7
 8001140:	f3af 8000 	nop.w
 8001144:	1c42      	adds	r2, r0, #1
 8001146:	4606      	mov	r6, r0
 8001148:	d1d6      	bne.n	80010f8 <_svfiprintf_r+0x174>
 800114a:	89ab      	ldrh	r3, [r5, #12]
 800114c:	065b      	lsls	r3, r3, #25
 800114e:	f53f af2d 	bmi.w	8000fac <_svfiprintf_r+0x28>
 8001152:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001154:	e72c      	b.n	8000fb0 <_svfiprintf_r+0x2c>
 8001156:	ab03      	add	r3, sp, #12
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	462a      	mov	r2, r5
 800115c:	4b05      	ldr	r3, [pc, #20]	@ (8001174 <_svfiprintf_r+0x1f0>)
 800115e:	a904      	add	r1, sp, #16
 8001160:	4638      	mov	r0, r7
 8001162:	f000 f9bb 	bl	80014dc <_printf_i>
 8001166:	e7ed      	b.n	8001144 <_svfiprintf_r+0x1c0>
 8001168:	08001bc0 	.word	0x08001bc0
 800116c:	08001bca 	.word	0x08001bca
 8001170:	00000000 	.word	0x00000000
 8001174:	08000ecd 	.word	0x08000ecd
 8001178:	08001bc6 	.word	0x08001bc6

0800117c <__sfputc_r>:
 800117c:	6893      	ldr	r3, [r2, #8]
 800117e:	3b01      	subs	r3, #1
 8001180:	2b00      	cmp	r3, #0
 8001182:	b410      	push	{r4}
 8001184:	6093      	str	r3, [r2, #8]
 8001186:	da08      	bge.n	800119a <__sfputc_r+0x1e>
 8001188:	6994      	ldr	r4, [r2, #24]
 800118a:	42a3      	cmp	r3, r4
 800118c:	db01      	blt.n	8001192 <__sfputc_r+0x16>
 800118e:	290a      	cmp	r1, #10
 8001190:	d103      	bne.n	800119a <__sfputc_r+0x1e>
 8001192:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001196:	f000 bb6d 	b.w	8001874 <__swbuf_r>
 800119a:	6813      	ldr	r3, [r2, #0]
 800119c:	1c58      	adds	r0, r3, #1
 800119e:	6010      	str	r0, [r2, #0]
 80011a0:	7019      	strb	r1, [r3, #0]
 80011a2:	4608      	mov	r0, r1
 80011a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <__sfputs_r>:
 80011aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ac:	4606      	mov	r6, r0
 80011ae:	460f      	mov	r7, r1
 80011b0:	4614      	mov	r4, r2
 80011b2:	18d5      	adds	r5, r2, r3
 80011b4:	42ac      	cmp	r4, r5
 80011b6:	d101      	bne.n	80011bc <__sfputs_r+0x12>
 80011b8:	2000      	movs	r0, #0
 80011ba:	e007      	b.n	80011cc <__sfputs_r+0x22>
 80011bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011c0:	463a      	mov	r2, r7
 80011c2:	4630      	mov	r0, r6
 80011c4:	f7ff ffda 	bl	800117c <__sfputc_r>
 80011c8:	1c43      	adds	r3, r0, #1
 80011ca:	d1f3      	bne.n	80011b4 <__sfputs_r+0xa>
 80011cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080011d0 <_vfiprintf_r>:
 80011d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011d4:	460d      	mov	r5, r1
 80011d6:	b09d      	sub	sp, #116	@ 0x74
 80011d8:	4614      	mov	r4, r2
 80011da:	4698      	mov	r8, r3
 80011dc:	4606      	mov	r6, r0
 80011de:	b118      	cbz	r0, 80011e8 <_vfiprintf_r+0x18>
 80011e0:	6a03      	ldr	r3, [r0, #32]
 80011e2:	b90b      	cbnz	r3, 80011e8 <_vfiprintf_r+0x18>
 80011e4:	f7ff fc52 	bl	8000a8c <__sinit>
 80011e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80011ea:	07d9      	lsls	r1, r3, #31
 80011ec:	d405      	bmi.n	80011fa <_vfiprintf_r+0x2a>
 80011ee:	89ab      	ldrh	r3, [r5, #12]
 80011f0:	059a      	lsls	r2, r3, #22
 80011f2:	d402      	bmi.n	80011fa <_vfiprintf_r+0x2a>
 80011f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80011f6:	f7ff fd6e 	bl	8000cd6 <__retarget_lock_acquire_recursive>
 80011fa:	89ab      	ldrh	r3, [r5, #12]
 80011fc:	071b      	lsls	r3, r3, #28
 80011fe:	d501      	bpl.n	8001204 <_vfiprintf_r+0x34>
 8001200:	692b      	ldr	r3, [r5, #16]
 8001202:	b99b      	cbnz	r3, 800122c <_vfiprintf_r+0x5c>
 8001204:	4629      	mov	r1, r5
 8001206:	4630      	mov	r0, r6
 8001208:	f000 fb72 	bl	80018f0 <__swsetup_r>
 800120c:	b170      	cbz	r0, 800122c <_vfiprintf_r+0x5c>
 800120e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001210:	07dc      	lsls	r4, r3, #31
 8001212:	d504      	bpl.n	800121e <_vfiprintf_r+0x4e>
 8001214:	f04f 30ff 	mov.w	r0, #4294967295
 8001218:	b01d      	add	sp, #116	@ 0x74
 800121a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800121e:	89ab      	ldrh	r3, [r5, #12]
 8001220:	0598      	lsls	r0, r3, #22
 8001222:	d4f7      	bmi.n	8001214 <_vfiprintf_r+0x44>
 8001224:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001226:	f7ff fd57 	bl	8000cd8 <__retarget_lock_release_recursive>
 800122a:	e7f3      	b.n	8001214 <_vfiprintf_r+0x44>
 800122c:	2300      	movs	r3, #0
 800122e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001230:	2320      	movs	r3, #32
 8001232:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001236:	f8cd 800c 	str.w	r8, [sp, #12]
 800123a:	2330      	movs	r3, #48	@ 0x30
 800123c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80013ec <_vfiprintf_r+0x21c>
 8001240:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001244:	f04f 0901 	mov.w	r9, #1
 8001248:	4623      	mov	r3, r4
 800124a:	469a      	mov	sl, r3
 800124c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001250:	b10a      	cbz	r2, 8001256 <_vfiprintf_r+0x86>
 8001252:	2a25      	cmp	r2, #37	@ 0x25
 8001254:	d1f9      	bne.n	800124a <_vfiprintf_r+0x7a>
 8001256:	ebba 0b04 	subs.w	fp, sl, r4
 800125a:	d00b      	beq.n	8001274 <_vfiprintf_r+0xa4>
 800125c:	465b      	mov	r3, fp
 800125e:	4622      	mov	r2, r4
 8001260:	4629      	mov	r1, r5
 8001262:	4630      	mov	r0, r6
 8001264:	f7ff ffa1 	bl	80011aa <__sfputs_r>
 8001268:	3001      	adds	r0, #1
 800126a:	f000 80a7 	beq.w	80013bc <_vfiprintf_r+0x1ec>
 800126e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001270:	445a      	add	r2, fp
 8001272:	9209      	str	r2, [sp, #36]	@ 0x24
 8001274:	f89a 3000 	ldrb.w	r3, [sl]
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 809f 	beq.w	80013bc <_vfiprintf_r+0x1ec>
 800127e:	2300      	movs	r3, #0
 8001280:	f04f 32ff 	mov.w	r2, #4294967295
 8001284:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001288:	f10a 0a01 	add.w	sl, sl, #1
 800128c:	9304      	str	r3, [sp, #16]
 800128e:	9307      	str	r3, [sp, #28]
 8001290:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001294:	931a      	str	r3, [sp, #104]	@ 0x68
 8001296:	4654      	mov	r4, sl
 8001298:	2205      	movs	r2, #5
 800129a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800129e:	4853      	ldr	r0, [pc, #332]	@ (80013ec <_vfiprintf_r+0x21c>)
 80012a0:	f7fe ffb6 	bl	8000210 <memchr>
 80012a4:	9a04      	ldr	r2, [sp, #16]
 80012a6:	b9d8      	cbnz	r0, 80012e0 <_vfiprintf_r+0x110>
 80012a8:	06d1      	lsls	r1, r2, #27
 80012aa:	bf44      	itt	mi
 80012ac:	2320      	movmi	r3, #32
 80012ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80012b2:	0713      	lsls	r3, r2, #28
 80012b4:	bf44      	itt	mi
 80012b6:	232b      	movmi	r3, #43	@ 0x2b
 80012b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80012bc:	f89a 3000 	ldrb.w	r3, [sl]
 80012c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80012c2:	d015      	beq.n	80012f0 <_vfiprintf_r+0x120>
 80012c4:	9a07      	ldr	r2, [sp, #28]
 80012c6:	4654      	mov	r4, sl
 80012c8:	2000      	movs	r0, #0
 80012ca:	f04f 0c0a 	mov.w	ip, #10
 80012ce:	4621      	mov	r1, r4
 80012d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80012d4:	3b30      	subs	r3, #48	@ 0x30
 80012d6:	2b09      	cmp	r3, #9
 80012d8:	d94b      	bls.n	8001372 <_vfiprintf_r+0x1a2>
 80012da:	b1b0      	cbz	r0, 800130a <_vfiprintf_r+0x13a>
 80012dc:	9207      	str	r2, [sp, #28]
 80012de:	e014      	b.n	800130a <_vfiprintf_r+0x13a>
 80012e0:	eba0 0308 	sub.w	r3, r0, r8
 80012e4:	fa09 f303 	lsl.w	r3, r9, r3
 80012e8:	4313      	orrs	r3, r2
 80012ea:	9304      	str	r3, [sp, #16]
 80012ec:	46a2      	mov	sl, r4
 80012ee:	e7d2      	b.n	8001296 <_vfiprintf_r+0xc6>
 80012f0:	9b03      	ldr	r3, [sp, #12]
 80012f2:	1d19      	adds	r1, r3, #4
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	9103      	str	r1, [sp, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bfbb      	ittet	lt
 80012fc:	425b      	neglt	r3, r3
 80012fe:	f042 0202 	orrlt.w	r2, r2, #2
 8001302:	9307      	strge	r3, [sp, #28]
 8001304:	9307      	strlt	r3, [sp, #28]
 8001306:	bfb8      	it	lt
 8001308:	9204      	strlt	r2, [sp, #16]
 800130a:	7823      	ldrb	r3, [r4, #0]
 800130c:	2b2e      	cmp	r3, #46	@ 0x2e
 800130e:	d10a      	bne.n	8001326 <_vfiprintf_r+0x156>
 8001310:	7863      	ldrb	r3, [r4, #1]
 8001312:	2b2a      	cmp	r3, #42	@ 0x2a
 8001314:	d132      	bne.n	800137c <_vfiprintf_r+0x1ac>
 8001316:	9b03      	ldr	r3, [sp, #12]
 8001318:	1d1a      	adds	r2, r3, #4
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	9203      	str	r2, [sp, #12]
 800131e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001322:	3402      	adds	r4, #2
 8001324:	9305      	str	r3, [sp, #20]
 8001326:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80013fc <_vfiprintf_r+0x22c>
 800132a:	7821      	ldrb	r1, [r4, #0]
 800132c:	2203      	movs	r2, #3
 800132e:	4650      	mov	r0, sl
 8001330:	f7fe ff6e 	bl	8000210 <memchr>
 8001334:	b138      	cbz	r0, 8001346 <_vfiprintf_r+0x176>
 8001336:	9b04      	ldr	r3, [sp, #16]
 8001338:	eba0 000a 	sub.w	r0, r0, sl
 800133c:	2240      	movs	r2, #64	@ 0x40
 800133e:	4082      	lsls	r2, r0
 8001340:	4313      	orrs	r3, r2
 8001342:	3401      	adds	r4, #1
 8001344:	9304      	str	r3, [sp, #16]
 8001346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800134a:	4829      	ldr	r0, [pc, #164]	@ (80013f0 <_vfiprintf_r+0x220>)
 800134c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001350:	2206      	movs	r2, #6
 8001352:	f7fe ff5d 	bl	8000210 <memchr>
 8001356:	2800      	cmp	r0, #0
 8001358:	d03f      	beq.n	80013da <_vfiprintf_r+0x20a>
 800135a:	4b26      	ldr	r3, [pc, #152]	@ (80013f4 <_vfiprintf_r+0x224>)
 800135c:	bb1b      	cbnz	r3, 80013a6 <_vfiprintf_r+0x1d6>
 800135e:	9b03      	ldr	r3, [sp, #12]
 8001360:	3307      	adds	r3, #7
 8001362:	f023 0307 	bic.w	r3, r3, #7
 8001366:	3308      	adds	r3, #8
 8001368:	9303      	str	r3, [sp, #12]
 800136a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800136c:	443b      	add	r3, r7
 800136e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001370:	e76a      	b.n	8001248 <_vfiprintf_r+0x78>
 8001372:	fb0c 3202 	mla	r2, ip, r2, r3
 8001376:	460c      	mov	r4, r1
 8001378:	2001      	movs	r0, #1
 800137a:	e7a8      	b.n	80012ce <_vfiprintf_r+0xfe>
 800137c:	2300      	movs	r3, #0
 800137e:	3401      	adds	r4, #1
 8001380:	9305      	str	r3, [sp, #20]
 8001382:	4619      	mov	r1, r3
 8001384:	f04f 0c0a 	mov.w	ip, #10
 8001388:	4620      	mov	r0, r4
 800138a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800138e:	3a30      	subs	r2, #48	@ 0x30
 8001390:	2a09      	cmp	r2, #9
 8001392:	d903      	bls.n	800139c <_vfiprintf_r+0x1cc>
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0c6      	beq.n	8001326 <_vfiprintf_r+0x156>
 8001398:	9105      	str	r1, [sp, #20]
 800139a:	e7c4      	b.n	8001326 <_vfiprintf_r+0x156>
 800139c:	fb0c 2101 	mla	r1, ip, r1, r2
 80013a0:	4604      	mov	r4, r0
 80013a2:	2301      	movs	r3, #1
 80013a4:	e7f0      	b.n	8001388 <_vfiprintf_r+0x1b8>
 80013a6:	ab03      	add	r3, sp, #12
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	462a      	mov	r2, r5
 80013ac:	4b12      	ldr	r3, [pc, #72]	@ (80013f8 <_vfiprintf_r+0x228>)
 80013ae:	a904      	add	r1, sp, #16
 80013b0:	4630      	mov	r0, r6
 80013b2:	f3af 8000 	nop.w
 80013b6:	4607      	mov	r7, r0
 80013b8:	1c78      	adds	r0, r7, #1
 80013ba:	d1d6      	bne.n	800136a <_vfiprintf_r+0x19a>
 80013bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80013be:	07d9      	lsls	r1, r3, #31
 80013c0:	d405      	bmi.n	80013ce <_vfiprintf_r+0x1fe>
 80013c2:	89ab      	ldrh	r3, [r5, #12]
 80013c4:	059a      	lsls	r2, r3, #22
 80013c6:	d402      	bmi.n	80013ce <_vfiprintf_r+0x1fe>
 80013c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80013ca:	f7ff fc85 	bl	8000cd8 <__retarget_lock_release_recursive>
 80013ce:	89ab      	ldrh	r3, [r5, #12]
 80013d0:	065b      	lsls	r3, r3, #25
 80013d2:	f53f af1f 	bmi.w	8001214 <_vfiprintf_r+0x44>
 80013d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80013d8:	e71e      	b.n	8001218 <_vfiprintf_r+0x48>
 80013da:	ab03      	add	r3, sp, #12
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	462a      	mov	r2, r5
 80013e0:	4b05      	ldr	r3, [pc, #20]	@ (80013f8 <_vfiprintf_r+0x228>)
 80013e2:	a904      	add	r1, sp, #16
 80013e4:	4630      	mov	r0, r6
 80013e6:	f000 f879 	bl	80014dc <_printf_i>
 80013ea:	e7e4      	b.n	80013b6 <_vfiprintf_r+0x1e6>
 80013ec:	08001bc0 	.word	0x08001bc0
 80013f0:	08001bca 	.word	0x08001bca
 80013f4:	00000000 	.word	0x00000000
 80013f8:	080011ab 	.word	0x080011ab
 80013fc:	08001bc6 	.word	0x08001bc6

08001400 <_printf_common>:
 8001400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001404:	4616      	mov	r6, r2
 8001406:	4698      	mov	r8, r3
 8001408:	688a      	ldr	r2, [r1, #8]
 800140a:	690b      	ldr	r3, [r1, #16]
 800140c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001410:	4293      	cmp	r3, r2
 8001412:	bfb8      	it	lt
 8001414:	4613      	movlt	r3, r2
 8001416:	6033      	str	r3, [r6, #0]
 8001418:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800141c:	4607      	mov	r7, r0
 800141e:	460c      	mov	r4, r1
 8001420:	b10a      	cbz	r2, 8001426 <_printf_common+0x26>
 8001422:	3301      	adds	r3, #1
 8001424:	6033      	str	r3, [r6, #0]
 8001426:	6823      	ldr	r3, [r4, #0]
 8001428:	0699      	lsls	r1, r3, #26
 800142a:	bf42      	ittt	mi
 800142c:	6833      	ldrmi	r3, [r6, #0]
 800142e:	3302      	addmi	r3, #2
 8001430:	6033      	strmi	r3, [r6, #0]
 8001432:	6825      	ldr	r5, [r4, #0]
 8001434:	f015 0506 	ands.w	r5, r5, #6
 8001438:	d106      	bne.n	8001448 <_printf_common+0x48>
 800143a:	f104 0a19 	add.w	sl, r4, #25
 800143e:	68e3      	ldr	r3, [r4, #12]
 8001440:	6832      	ldr	r2, [r6, #0]
 8001442:	1a9b      	subs	r3, r3, r2
 8001444:	42ab      	cmp	r3, r5
 8001446:	dc26      	bgt.n	8001496 <_printf_common+0x96>
 8001448:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800144c:	6822      	ldr	r2, [r4, #0]
 800144e:	3b00      	subs	r3, #0
 8001450:	bf18      	it	ne
 8001452:	2301      	movne	r3, #1
 8001454:	0692      	lsls	r2, r2, #26
 8001456:	d42b      	bmi.n	80014b0 <_printf_common+0xb0>
 8001458:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800145c:	4641      	mov	r1, r8
 800145e:	4638      	mov	r0, r7
 8001460:	47c8      	blx	r9
 8001462:	3001      	adds	r0, #1
 8001464:	d01e      	beq.n	80014a4 <_printf_common+0xa4>
 8001466:	6823      	ldr	r3, [r4, #0]
 8001468:	6922      	ldr	r2, [r4, #16]
 800146a:	f003 0306 	and.w	r3, r3, #6
 800146e:	2b04      	cmp	r3, #4
 8001470:	bf02      	ittt	eq
 8001472:	68e5      	ldreq	r5, [r4, #12]
 8001474:	6833      	ldreq	r3, [r6, #0]
 8001476:	1aed      	subeq	r5, r5, r3
 8001478:	68a3      	ldr	r3, [r4, #8]
 800147a:	bf0c      	ite	eq
 800147c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001480:	2500      	movne	r5, #0
 8001482:	4293      	cmp	r3, r2
 8001484:	bfc4      	itt	gt
 8001486:	1a9b      	subgt	r3, r3, r2
 8001488:	18ed      	addgt	r5, r5, r3
 800148a:	2600      	movs	r6, #0
 800148c:	341a      	adds	r4, #26
 800148e:	42b5      	cmp	r5, r6
 8001490:	d11a      	bne.n	80014c8 <_printf_common+0xc8>
 8001492:	2000      	movs	r0, #0
 8001494:	e008      	b.n	80014a8 <_printf_common+0xa8>
 8001496:	2301      	movs	r3, #1
 8001498:	4652      	mov	r2, sl
 800149a:	4641      	mov	r1, r8
 800149c:	4638      	mov	r0, r7
 800149e:	47c8      	blx	r9
 80014a0:	3001      	adds	r0, #1
 80014a2:	d103      	bne.n	80014ac <_printf_common+0xac>
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014ac:	3501      	adds	r5, #1
 80014ae:	e7c6      	b.n	800143e <_printf_common+0x3e>
 80014b0:	18e1      	adds	r1, r4, r3
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	2030      	movs	r0, #48	@ 0x30
 80014b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80014ba:	4422      	add	r2, r4
 80014bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80014c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80014c4:	3302      	adds	r3, #2
 80014c6:	e7c7      	b.n	8001458 <_printf_common+0x58>
 80014c8:	2301      	movs	r3, #1
 80014ca:	4622      	mov	r2, r4
 80014cc:	4641      	mov	r1, r8
 80014ce:	4638      	mov	r0, r7
 80014d0:	47c8      	blx	r9
 80014d2:	3001      	adds	r0, #1
 80014d4:	d0e6      	beq.n	80014a4 <_printf_common+0xa4>
 80014d6:	3601      	adds	r6, #1
 80014d8:	e7d9      	b.n	800148e <_printf_common+0x8e>
	...

080014dc <_printf_i>:
 80014dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80014e0:	7e0f      	ldrb	r7, [r1, #24]
 80014e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80014e4:	2f78      	cmp	r7, #120	@ 0x78
 80014e6:	4691      	mov	r9, r2
 80014e8:	4680      	mov	r8, r0
 80014ea:	460c      	mov	r4, r1
 80014ec:	469a      	mov	sl, r3
 80014ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80014f2:	d807      	bhi.n	8001504 <_printf_i+0x28>
 80014f4:	2f62      	cmp	r7, #98	@ 0x62
 80014f6:	d80a      	bhi.n	800150e <_printf_i+0x32>
 80014f8:	2f00      	cmp	r7, #0
 80014fa:	f000 80d2 	beq.w	80016a2 <_printf_i+0x1c6>
 80014fe:	2f58      	cmp	r7, #88	@ 0x58
 8001500:	f000 80b9 	beq.w	8001676 <_printf_i+0x19a>
 8001504:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001508:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800150c:	e03a      	b.n	8001584 <_printf_i+0xa8>
 800150e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001512:	2b15      	cmp	r3, #21
 8001514:	d8f6      	bhi.n	8001504 <_printf_i+0x28>
 8001516:	a101      	add	r1, pc, #4	@ (adr r1, 800151c <_printf_i+0x40>)
 8001518:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800151c:	08001575 	.word	0x08001575
 8001520:	08001589 	.word	0x08001589
 8001524:	08001505 	.word	0x08001505
 8001528:	08001505 	.word	0x08001505
 800152c:	08001505 	.word	0x08001505
 8001530:	08001505 	.word	0x08001505
 8001534:	08001589 	.word	0x08001589
 8001538:	08001505 	.word	0x08001505
 800153c:	08001505 	.word	0x08001505
 8001540:	08001505 	.word	0x08001505
 8001544:	08001505 	.word	0x08001505
 8001548:	08001689 	.word	0x08001689
 800154c:	080015b3 	.word	0x080015b3
 8001550:	08001643 	.word	0x08001643
 8001554:	08001505 	.word	0x08001505
 8001558:	08001505 	.word	0x08001505
 800155c:	080016ab 	.word	0x080016ab
 8001560:	08001505 	.word	0x08001505
 8001564:	080015b3 	.word	0x080015b3
 8001568:	08001505 	.word	0x08001505
 800156c:	08001505 	.word	0x08001505
 8001570:	0800164b 	.word	0x0800164b
 8001574:	6833      	ldr	r3, [r6, #0]
 8001576:	1d1a      	adds	r2, r3, #4
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6032      	str	r2, [r6, #0]
 800157c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001580:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001584:	2301      	movs	r3, #1
 8001586:	e09d      	b.n	80016c4 <_printf_i+0x1e8>
 8001588:	6833      	ldr	r3, [r6, #0]
 800158a:	6820      	ldr	r0, [r4, #0]
 800158c:	1d19      	adds	r1, r3, #4
 800158e:	6031      	str	r1, [r6, #0]
 8001590:	0606      	lsls	r6, r0, #24
 8001592:	d501      	bpl.n	8001598 <_printf_i+0xbc>
 8001594:	681d      	ldr	r5, [r3, #0]
 8001596:	e003      	b.n	80015a0 <_printf_i+0xc4>
 8001598:	0645      	lsls	r5, r0, #25
 800159a:	d5fb      	bpl.n	8001594 <_printf_i+0xb8>
 800159c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80015a0:	2d00      	cmp	r5, #0
 80015a2:	da03      	bge.n	80015ac <_printf_i+0xd0>
 80015a4:	232d      	movs	r3, #45	@ 0x2d
 80015a6:	426d      	negs	r5, r5
 80015a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80015ac:	4859      	ldr	r0, [pc, #356]	@ (8001714 <_printf_i+0x238>)
 80015ae:	230a      	movs	r3, #10
 80015b0:	e011      	b.n	80015d6 <_printf_i+0xfa>
 80015b2:	6821      	ldr	r1, [r4, #0]
 80015b4:	6833      	ldr	r3, [r6, #0]
 80015b6:	0608      	lsls	r0, r1, #24
 80015b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80015bc:	d402      	bmi.n	80015c4 <_printf_i+0xe8>
 80015be:	0649      	lsls	r1, r1, #25
 80015c0:	bf48      	it	mi
 80015c2:	b2ad      	uxthmi	r5, r5
 80015c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80015c6:	4853      	ldr	r0, [pc, #332]	@ (8001714 <_printf_i+0x238>)
 80015c8:	6033      	str	r3, [r6, #0]
 80015ca:	bf14      	ite	ne
 80015cc:	230a      	movne	r3, #10
 80015ce:	2308      	moveq	r3, #8
 80015d0:	2100      	movs	r1, #0
 80015d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80015d6:	6866      	ldr	r6, [r4, #4]
 80015d8:	60a6      	str	r6, [r4, #8]
 80015da:	2e00      	cmp	r6, #0
 80015dc:	bfa2      	ittt	ge
 80015de:	6821      	ldrge	r1, [r4, #0]
 80015e0:	f021 0104 	bicge.w	r1, r1, #4
 80015e4:	6021      	strge	r1, [r4, #0]
 80015e6:	b90d      	cbnz	r5, 80015ec <_printf_i+0x110>
 80015e8:	2e00      	cmp	r6, #0
 80015ea:	d04b      	beq.n	8001684 <_printf_i+0x1a8>
 80015ec:	4616      	mov	r6, r2
 80015ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80015f2:	fb03 5711 	mls	r7, r3, r1, r5
 80015f6:	5dc7      	ldrb	r7, [r0, r7]
 80015f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80015fc:	462f      	mov	r7, r5
 80015fe:	42bb      	cmp	r3, r7
 8001600:	460d      	mov	r5, r1
 8001602:	d9f4      	bls.n	80015ee <_printf_i+0x112>
 8001604:	2b08      	cmp	r3, #8
 8001606:	d10b      	bne.n	8001620 <_printf_i+0x144>
 8001608:	6823      	ldr	r3, [r4, #0]
 800160a:	07df      	lsls	r7, r3, #31
 800160c:	d508      	bpl.n	8001620 <_printf_i+0x144>
 800160e:	6923      	ldr	r3, [r4, #16]
 8001610:	6861      	ldr	r1, [r4, #4]
 8001612:	4299      	cmp	r1, r3
 8001614:	bfde      	ittt	le
 8001616:	2330      	movle	r3, #48	@ 0x30
 8001618:	f806 3c01 	strble.w	r3, [r6, #-1]
 800161c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001620:	1b92      	subs	r2, r2, r6
 8001622:	6122      	str	r2, [r4, #16]
 8001624:	f8cd a000 	str.w	sl, [sp]
 8001628:	464b      	mov	r3, r9
 800162a:	aa03      	add	r2, sp, #12
 800162c:	4621      	mov	r1, r4
 800162e:	4640      	mov	r0, r8
 8001630:	f7ff fee6 	bl	8001400 <_printf_common>
 8001634:	3001      	adds	r0, #1
 8001636:	d14a      	bne.n	80016ce <_printf_i+0x1f2>
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
 800163c:	b004      	add	sp, #16
 800163e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001642:	6823      	ldr	r3, [r4, #0]
 8001644:	f043 0320 	orr.w	r3, r3, #32
 8001648:	6023      	str	r3, [r4, #0]
 800164a:	4833      	ldr	r0, [pc, #204]	@ (8001718 <_printf_i+0x23c>)
 800164c:	2778      	movs	r7, #120	@ 0x78
 800164e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001652:	6823      	ldr	r3, [r4, #0]
 8001654:	6831      	ldr	r1, [r6, #0]
 8001656:	061f      	lsls	r7, r3, #24
 8001658:	f851 5b04 	ldr.w	r5, [r1], #4
 800165c:	d402      	bmi.n	8001664 <_printf_i+0x188>
 800165e:	065f      	lsls	r7, r3, #25
 8001660:	bf48      	it	mi
 8001662:	b2ad      	uxthmi	r5, r5
 8001664:	6031      	str	r1, [r6, #0]
 8001666:	07d9      	lsls	r1, r3, #31
 8001668:	bf44      	itt	mi
 800166a:	f043 0320 	orrmi.w	r3, r3, #32
 800166e:	6023      	strmi	r3, [r4, #0]
 8001670:	b11d      	cbz	r5, 800167a <_printf_i+0x19e>
 8001672:	2310      	movs	r3, #16
 8001674:	e7ac      	b.n	80015d0 <_printf_i+0xf4>
 8001676:	4827      	ldr	r0, [pc, #156]	@ (8001714 <_printf_i+0x238>)
 8001678:	e7e9      	b.n	800164e <_printf_i+0x172>
 800167a:	6823      	ldr	r3, [r4, #0]
 800167c:	f023 0320 	bic.w	r3, r3, #32
 8001680:	6023      	str	r3, [r4, #0]
 8001682:	e7f6      	b.n	8001672 <_printf_i+0x196>
 8001684:	4616      	mov	r6, r2
 8001686:	e7bd      	b.n	8001604 <_printf_i+0x128>
 8001688:	6833      	ldr	r3, [r6, #0]
 800168a:	6825      	ldr	r5, [r4, #0]
 800168c:	6961      	ldr	r1, [r4, #20]
 800168e:	1d18      	adds	r0, r3, #4
 8001690:	6030      	str	r0, [r6, #0]
 8001692:	062e      	lsls	r6, r5, #24
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	d501      	bpl.n	800169c <_printf_i+0x1c0>
 8001698:	6019      	str	r1, [r3, #0]
 800169a:	e002      	b.n	80016a2 <_printf_i+0x1c6>
 800169c:	0668      	lsls	r0, r5, #25
 800169e:	d5fb      	bpl.n	8001698 <_printf_i+0x1bc>
 80016a0:	8019      	strh	r1, [r3, #0]
 80016a2:	2300      	movs	r3, #0
 80016a4:	6123      	str	r3, [r4, #16]
 80016a6:	4616      	mov	r6, r2
 80016a8:	e7bc      	b.n	8001624 <_printf_i+0x148>
 80016aa:	6833      	ldr	r3, [r6, #0]
 80016ac:	1d1a      	adds	r2, r3, #4
 80016ae:	6032      	str	r2, [r6, #0]
 80016b0:	681e      	ldr	r6, [r3, #0]
 80016b2:	6862      	ldr	r2, [r4, #4]
 80016b4:	2100      	movs	r1, #0
 80016b6:	4630      	mov	r0, r6
 80016b8:	f7fe fdaa 	bl	8000210 <memchr>
 80016bc:	b108      	cbz	r0, 80016c2 <_printf_i+0x1e6>
 80016be:	1b80      	subs	r0, r0, r6
 80016c0:	6060      	str	r0, [r4, #4]
 80016c2:	6863      	ldr	r3, [r4, #4]
 80016c4:	6123      	str	r3, [r4, #16]
 80016c6:	2300      	movs	r3, #0
 80016c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80016cc:	e7aa      	b.n	8001624 <_printf_i+0x148>
 80016ce:	6923      	ldr	r3, [r4, #16]
 80016d0:	4632      	mov	r2, r6
 80016d2:	4649      	mov	r1, r9
 80016d4:	4640      	mov	r0, r8
 80016d6:	47d0      	blx	sl
 80016d8:	3001      	adds	r0, #1
 80016da:	d0ad      	beq.n	8001638 <_printf_i+0x15c>
 80016dc:	6823      	ldr	r3, [r4, #0]
 80016de:	079b      	lsls	r3, r3, #30
 80016e0:	d413      	bmi.n	800170a <_printf_i+0x22e>
 80016e2:	68e0      	ldr	r0, [r4, #12]
 80016e4:	9b03      	ldr	r3, [sp, #12]
 80016e6:	4298      	cmp	r0, r3
 80016e8:	bfb8      	it	lt
 80016ea:	4618      	movlt	r0, r3
 80016ec:	e7a6      	b.n	800163c <_printf_i+0x160>
 80016ee:	2301      	movs	r3, #1
 80016f0:	4632      	mov	r2, r6
 80016f2:	4649      	mov	r1, r9
 80016f4:	4640      	mov	r0, r8
 80016f6:	47d0      	blx	sl
 80016f8:	3001      	adds	r0, #1
 80016fa:	d09d      	beq.n	8001638 <_printf_i+0x15c>
 80016fc:	3501      	adds	r5, #1
 80016fe:	68e3      	ldr	r3, [r4, #12]
 8001700:	9903      	ldr	r1, [sp, #12]
 8001702:	1a5b      	subs	r3, r3, r1
 8001704:	42ab      	cmp	r3, r5
 8001706:	dcf2      	bgt.n	80016ee <_printf_i+0x212>
 8001708:	e7eb      	b.n	80016e2 <_printf_i+0x206>
 800170a:	2500      	movs	r5, #0
 800170c:	f104 0619 	add.w	r6, r4, #25
 8001710:	e7f5      	b.n	80016fe <_printf_i+0x222>
 8001712:	bf00      	nop
 8001714:	08001bd1 	.word	0x08001bd1
 8001718:	08001be2 	.word	0x08001be2

0800171c <__sflush_r>:
 800171c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001724:	0716      	lsls	r6, r2, #28
 8001726:	4605      	mov	r5, r0
 8001728:	460c      	mov	r4, r1
 800172a:	d454      	bmi.n	80017d6 <__sflush_r+0xba>
 800172c:	684b      	ldr	r3, [r1, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	dc02      	bgt.n	8001738 <__sflush_r+0x1c>
 8001732:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001734:	2b00      	cmp	r3, #0
 8001736:	dd48      	ble.n	80017ca <__sflush_r+0xae>
 8001738:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800173a:	2e00      	cmp	r6, #0
 800173c:	d045      	beq.n	80017ca <__sflush_r+0xae>
 800173e:	2300      	movs	r3, #0
 8001740:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001744:	682f      	ldr	r7, [r5, #0]
 8001746:	6a21      	ldr	r1, [r4, #32]
 8001748:	602b      	str	r3, [r5, #0]
 800174a:	d030      	beq.n	80017ae <__sflush_r+0x92>
 800174c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800174e:	89a3      	ldrh	r3, [r4, #12]
 8001750:	0759      	lsls	r1, r3, #29
 8001752:	d505      	bpl.n	8001760 <__sflush_r+0x44>
 8001754:	6863      	ldr	r3, [r4, #4]
 8001756:	1ad2      	subs	r2, r2, r3
 8001758:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800175a:	b10b      	cbz	r3, 8001760 <__sflush_r+0x44>
 800175c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800175e:	1ad2      	subs	r2, r2, r3
 8001760:	2300      	movs	r3, #0
 8001762:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001764:	6a21      	ldr	r1, [r4, #32]
 8001766:	4628      	mov	r0, r5
 8001768:	47b0      	blx	r6
 800176a:	1c43      	adds	r3, r0, #1
 800176c:	89a3      	ldrh	r3, [r4, #12]
 800176e:	d106      	bne.n	800177e <__sflush_r+0x62>
 8001770:	6829      	ldr	r1, [r5, #0]
 8001772:	291d      	cmp	r1, #29
 8001774:	d82b      	bhi.n	80017ce <__sflush_r+0xb2>
 8001776:	4a2a      	ldr	r2, [pc, #168]	@ (8001820 <__sflush_r+0x104>)
 8001778:	410a      	asrs	r2, r1
 800177a:	07d6      	lsls	r6, r2, #31
 800177c:	d427      	bmi.n	80017ce <__sflush_r+0xb2>
 800177e:	2200      	movs	r2, #0
 8001780:	6062      	str	r2, [r4, #4]
 8001782:	04d9      	lsls	r1, r3, #19
 8001784:	6922      	ldr	r2, [r4, #16]
 8001786:	6022      	str	r2, [r4, #0]
 8001788:	d504      	bpl.n	8001794 <__sflush_r+0x78>
 800178a:	1c42      	adds	r2, r0, #1
 800178c:	d101      	bne.n	8001792 <__sflush_r+0x76>
 800178e:	682b      	ldr	r3, [r5, #0]
 8001790:	b903      	cbnz	r3, 8001794 <__sflush_r+0x78>
 8001792:	6560      	str	r0, [r4, #84]	@ 0x54
 8001794:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001796:	602f      	str	r7, [r5, #0]
 8001798:	b1b9      	cbz	r1, 80017ca <__sflush_r+0xae>
 800179a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800179e:	4299      	cmp	r1, r3
 80017a0:	d002      	beq.n	80017a8 <__sflush_r+0x8c>
 80017a2:	4628      	mov	r0, r5
 80017a4:	f7ff fa9a 	bl	8000cdc <_free_r>
 80017a8:	2300      	movs	r3, #0
 80017aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80017ac:	e00d      	b.n	80017ca <__sflush_r+0xae>
 80017ae:	2301      	movs	r3, #1
 80017b0:	4628      	mov	r0, r5
 80017b2:	47b0      	blx	r6
 80017b4:	4602      	mov	r2, r0
 80017b6:	1c50      	adds	r0, r2, #1
 80017b8:	d1c9      	bne.n	800174e <__sflush_r+0x32>
 80017ba:	682b      	ldr	r3, [r5, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0c6      	beq.n	800174e <__sflush_r+0x32>
 80017c0:	2b1d      	cmp	r3, #29
 80017c2:	d001      	beq.n	80017c8 <__sflush_r+0xac>
 80017c4:	2b16      	cmp	r3, #22
 80017c6:	d11e      	bne.n	8001806 <__sflush_r+0xea>
 80017c8:	602f      	str	r7, [r5, #0]
 80017ca:	2000      	movs	r0, #0
 80017cc:	e022      	b.n	8001814 <__sflush_r+0xf8>
 80017ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017d2:	b21b      	sxth	r3, r3
 80017d4:	e01b      	b.n	800180e <__sflush_r+0xf2>
 80017d6:	690f      	ldr	r7, [r1, #16]
 80017d8:	2f00      	cmp	r7, #0
 80017da:	d0f6      	beq.n	80017ca <__sflush_r+0xae>
 80017dc:	0793      	lsls	r3, r2, #30
 80017de:	680e      	ldr	r6, [r1, #0]
 80017e0:	bf08      	it	eq
 80017e2:	694b      	ldreq	r3, [r1, #20]
 80017e4:	600f      	str	r7, [r1, #0]
 80017e6:	bf18      	it	ne
 80017e8:	2300      	movne	r3, #0
 80017ea:	eba6 0807 	sub.w	r8, r6, r7
 80017ee:	608b      	str	r3, [r1, #8]
 80017f0:	f1b8 0f00 	cmp.w	r8, #0
 80017f4:	dde9      	ble.n	80017ca <__sflush_r+0xae>
 80017f6:	6a21      	ldr	r1, [r4, #32]
 80017f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80017fa:	4643      	mov	r3, r8
 80017fc:	463a      	mov	r2, r7
 80017fe:	4628      	mov	r0, r5
 8001800:	47b0      	blx	r6
 8001802:	2800      	cmp	r0, #0
 8001804:	dc08      	bgt.n	8001818 <__sflush_r+0xfc>
 8001806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800180a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800180e:	81a3      	strh	r3, [r4, #12]
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001818:	4407      	add	r7, r0
 800181a:	eba8 0800 	sub.w	r8, r8, r0
 800181e:	e7e7      	b.n	80017f0 <__sflush_r+0xd4>
 8001820:	dfbffffe 	.word	0xdfbffffe

08001824 <_fflush_r>:
 8001824:	b538      	push	{r3, r4, r5, lr}
 8001826:	690b      	ldr	r3, [r1, #16]
 8001828:	4605      	mov	r5, r0
 800182a:	460c      	mov	r4, r1
 800182c:	b913      	cbnz	r3, 8001834 <_fflush_r+0x10>
 800182e:	2500      	movs	r5, #0
 8001830:	4628      	mov	r0, r5
 8001832:	bd38      	pop	{r3, r4, r5, pc}
 8001834:	b118      	cbz	r0, 800183e <_fflush_r+0x1a>
 8001836:	6a03      	ldr	r3, [r0, #32]
 8001838:	b90b      	cbnz	r3, 800183e <_fflush_r+0x1a>
 800183a:	f7ff f927 	bl	8000a8c <__sinit>
 800183e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f3      	beq.n	800182e <_fflush_r+0xa>
 8001846:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001848:	07d0      	lsls	r0, r2, #31
 800184a:	d404      	bmi.n	8001856 <_fflush_r+0x32>
 800184c:	0599      	lsls	r1, r3, #22
 800184e:	d402      	bmi.n	8001856 <_fflush_r+0x32>
 8001850:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001852:	f7ff fa40 	bl	8000cd6 <__retarget_lock_acquire_recursive>
 8001856:	4628      	mov	r0, r5
 8001858:	4621      	mov	r1, r4
 800185a:	f7ff ff5f 	bl	800171c <__sflush_r>
 800185e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001860:	07da      	lsls	r2, r3, #31
 8001862:	4605      	mov	r5, r0
 8001864:	d4e4      	bmi.n	8001830 <_fflush_r+0xc>
 8001866:	89a3      	ldrh	r3, [r4, #12]
 8001868:	059b      	lsls	r3, r3, #22
 800186a:	d4e1      	bmi.n	8001830 <_fflush_r+0xc>
 800186c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800186e:	f7ff fa33 	bl	8000cd8 <__retarget_lock_release_recursive>
 8001872:	e7dd      	b.n	8001830 <_fflush_r+0xc>

08001874 <__swbuf_r>:
 8001874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001876:	460e      	mov	r6, r1
 8001878:	4614      	mov	r4, r2
 800187a:	4605      	mov	r5, r0
 800187c:	b118      	cbz	r0, 8001886 <__swbuf_r+0x12>
 800187e:	6a03      	ldr	r3, [r0, #32]
 8001880:	b90b      	cbnz	r3, 8001886 <__swbuf_r+0x12>
 8001882:	f7ff f903 	bl	8000a8c <__sinit>
 8001886:	69a3      	ldr	r3, [r4, #24]
 8001888:	60a3      	str	r3, [r4, #8]
 800188a:	89a3      	ldrh	r3, [r4, #12]
 800188c:	071a      	lsls	r2, r3, #28
 800188e:	d501      	bpl.n	8001894 <__swbuf_r+0x20>
 8001890:	6923      	ldr	r3, [r4, #16]
 8001892:	b943      	cbnz	r3, 80018a6 <__swbuf_r+0x32>
 8001894:	4621      	mov	r1, r4
 8001896:	4628      	mov	r0, r5
 8001898:	f000 f82a 	bl	80018f0 <__swsetup_r>
 800189c:	b118      	cbz	r0, 80018a6 <__swbuf_r+0x32>
 800189e:	f04f 37ff 	mov.w	r7, #4294967295
 80018a2:	4638      	mov	r0, r7
 80018a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018a6:	6823      	ldr	r3, [r4, #0]
 80018a8:	6922      	ldr	r2, [r4, #16]
 80018aa:	1a98      	subs	r0, r3, r2
 80018ac:	6963      	ldr	r3, [r4, #20]
 80018ae:	b2f6      	uxtb	r6, r6
 80018b0:	4283      	cmp	r3, r0
 80018b2:	4637      	mov	r7, r6
 80018b4:	dc05      	bgt.n	80018c2 <__swbuf_r+0x4e>
 80018b6:	4621      	mov	r1, r4
 80018b8:	4628      	mov	r0, r5
 80018ba:	f7ff ffb3 	bl	8001824 <_fflush_r>
 80018be:	2800      	cmp	r0, #0
 80018c0:	d1ed      	bne.n	800189e <__swbuf_r+0x2a>
 80018c2:	68a3      	ldr	r3, [r4, #8]
 80018c4:	3b01      	subs	r3, #1
 80018c6:	60a3      	str	r3, [r4, #8]
 80018c8:	6823      	ldr	r3, [r4, #0]
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	6022      	str	r2, [r4, #0]
 80018ce:	701e      	strb	r6, [r3, #0]
 80018d0:	6962      	ldr	r2, [r4, #20]
 80018d2:	1c43      	adds	r3, r0, #1
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d004      	beq.n	80018e2 <__swbuf_r+0x6e>
 80018d8:	89a3      	ldrh	r3, [r4, #12]
 80018da:	07db      	lsls	r3, r3, #31
 80018dc:	d5e1      	bpl.n	80018a2 <__swbuf_r+0x2e>
 80018de:	2e0a      	cmp	r6, #10
 80018e0:	d1df      	bne.n	80018a2 <__swbuf_r+0x2e>
 80018e2:	4621      	mov	r1, r4
 80018e4:	4628      	mov	r0, r5
 80018e6:	f7ff ff9d 	bl	8001824 <_fflush_r>
 80018ea:	2800      	cmp	r0, #0
 80018ec:	d0d9      	beq.n	80018a2 <__swbuf_r+0x2e>
 80018ee:	e7d6      	b.n	800189e <__swbuf_r+0x2a>

080018f0 <__swsetup_r>:
 80018f0:	b538      	push	{r3, r4, r5, lr}
 80018f2:	4b29      	ldr	r3, [pc, #164]	@ (8001998 <__swsetup_r+0xa8>)
 80018f4:	4605      	mov	r5, r0
 80018f6:	6818      	ldr	r0, [r3, #0]
 80018f8:	460c      	mov	r4, r1
 80018fa:	b118      	cbz	r0, 8001904 <__swsetup_r+0x14>
 80018fc:	6a03      	ldr	r3, [r0, #32]
 80018fe:	b90b      	cbnz	r3, 8001904 <__swsetup_r+0x14>
 8001900:	f7ff f8c4 	bl	8000a8c <__sinit>
 8001904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001908:	0719      	lsls	r1, r3, #28
 800190a:	d422      	bmi.n	8001952 <__swsetup_r+0x62>
 800190c:	06da      	lsls	r2, r3, #27
 800190e:	d407      	bmi.n	8001920 <__swsetup_r+0x30>
 8001910:	2209      	movs	r2, #9
 8001912:	602a      	str	r2, [r5, #0]
 8001914:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001918:	81a3      	strh	r3, [r4, #12]
 800191a:	f04f 30ff 	mov.w	r0, #4294967295
 800191e:	e033      	b.n	8001988 <__swsetup_r+0x98>
 8001920:	0758      	lsls	r0, r3, #29
 8001922:	d512      	bpl.n	800194a <__swsetup_r+0x5a>
 8001924:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001926:	b141      	cbz	r1, 800193a <__swsetup_r+0x4a>
 8001928:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800192c:	4299      	cmp	r1, r3
 800192e:	d002      	beq.n	8001936 <__swsetup_r+0x46>
 8001930:	4628      	mov	r0, r5
 8001932:	f7ff f9d3 	bl	8000cdc <_free_r>
 8001936:	2300      	movs	r3, #0
 8001938:	6363      	str	r3, [r4, #52]	@ 0x34
 800193a:	89a3      	ldrh	r3, [r4, #12]
 800193c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001940:	81a3      	strh	r3, [r4, #12]
 8001942:	2300      	movs	r3, #0
 8001944:	6063      	str	r3, [r4, #4]
 8001946:	6923      	ldr	r3, [r4, #16]
 8001948:	6023      	str	r3, [r4, #0]
 800194a:	89a3      	ldrh	r3, [r4, #12]
 800194c:	f043 0308 	orr.w	r3, r3, #8
 8001950:	81a3      	strh	r3, [r4, #12]
 8001952:	6923      	ldr	r3, [r4, #16]
 8001954:	b94b      	cbnz	r3, 800196a <__swsetup_r+0x7a>
 8001956:	89a3      	ldrh	r3, [r4, #12]
 8001958:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800195c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001960:	d003      	beq.n	800196a <__swsetup_r+0x7a>
 8001962:	4621      	mov	r1, r4
 8001964:	4628      	mov	r0, r5
 8001966:	f000 f8a5 	bl	8001ab4 <__smakebuf_r>
 800196a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800196e:	f013 0201 	ands.w	r2, r3, #1
 8001972:	d00a      	beq.n	800198a <__swsetup_r+0x9a>
 8001974:	2200      	movs	r2, #0
 8001976:	60a2      	str	r2, [r4, #8]
 8001978:	6962      	ldr	r2, [r4, #20]
 800197a:	4252      	negs	r2, r2
 800197c:	61a2      	str	r2, [r4, #24]
 800197e:	6922      	ldr	r2, [r4, #16]
 8001980:	b942      	cbnz	r2, 8001994 <__swsetup_r+0xa4>
 8001982:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001986:	d1c5      	bne.n	8001914 <__swsetup_r+0x24>
 8001988:	bd38      	pop	{r3, r4, r5, pc}
 800198a:	0799      	lsls	r1, r3, #30
 800198c:	bf58      	it	pl
 800198e:	6962      	ldrpl	r2, [r4, #20]
 8001990:	60a2      	str	r2, [r4, #8]
 8001992:	e7f4      	b.n	800197e <__swsetup_r+0x8e>
 8001994:	2000      	movs	r0, #0
 8001996:	e7f7      	b.n	8001988 <__swsetup_r+0x98>
 8001998:	20000010 	.word	0x20000010

0800199c <memmove>:
 800199c:	4288      	cmp	r0, r1
 800199e:	b510      	push	{r4, lr}
 80019a0:	eb01 0402 	add.w	r4, r1, r2
 80019a4:	d902      	bls.n	80019ac <memmove+0x10>
 80019a6:	4284      	cmp	r4, r0
 80019a8:	4623      	mov	r3, r4
 80019aa:	d807      	bhi.n	80019bc <memmove+0x20>
 80019ac:	1e43      	subs	r3, r0, #1
 80019ae:	42a1      	cmp	r1, r4
 80019b0:	d008      	beq.n	80019c4 <memmove+0x28>
 80019b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80019b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80019ba:	e7f8      	b.n	80019ae <memmove+0x12>
 80019bc:	4402      	add	r2, r0
 80019be:	4601      	mov	r1, r0
 80019c0:	428a      	cmp	r2, r1
 80019c2:	d100      	bne.n	80019c6 <memmove+0x2a>
 80019c4:	bd10      	pop	{r4, pc}
 80019c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80019ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80019ce:	e7f7      	b.n	80019c0 <memmove+0x24>

080019d0 <_sbrk_r>:
 80019d0:	b538      	push	{r3, r4, r5, lr}
 80019d2:	4d06      	ldr	r5, [pc, #24]	@ (80019ec <_sbrk_r+0x1c>)
 80019d4:	2300      	movs	r3, #0
 80019d6:	4604      	mov	r4, r0
 80019d8:	4608      	mov	r0, r1
 80019da:	602b      	str	r3, [r5, #0]
 80019dc:	f7fe ff44 	bl	8000868 <_sbrk>
 80019e0:	1c43      	adds	r3, r0, #1
 80019e2:	d102      	bne.n	80019ea <_sbrk_r+0x1a>
 80019e4:	682b      	ldr	r3, [r5, #0]
 80019e6:	b103      	cbz	r3, 80019ea <_sbrk_r+0x1a>
 80019e8:	6023      	str	r3, [r4, #0]
 80019ea:	bd38      	pop	{r3, r4, r5, pc}
 80019ec:	200001c0 	.word	0x200001c0

080019f0 <memcpy>:
 80019f0:	440a      	add	r2, r1
 80019f2:	4291      	cmp	r1, r2
 80019f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80019f8:	d100      	bne.n	80019fc <memcpy+0xc>
 80019fa:	4770      	bx	lr
 80019fc:	b510      	push	{r4, lr}
 80019fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001a02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001a06:	4291      	cmp	r1, r2
 8001a08:	d1f9      	bne.n	80019fe <memcpy+0xe>
 8001a0a:	bd10      	pop	{r4, pc}

08001a0c <_realloc_r>:
 8001a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a10:	4680      	mov	r8, r0
 8001a12:	4615      	mov	r5, r2
 8001a14:	460c      	mov	r4, r1
 8001a16:	b921      	cbnz	r1, 8001a22 <_realloc_r+0x16>
 8001a18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	f7ff b9c9 	b.w	8000db4 <_malloc_r>
 8001a22:	b92a      	cbnz	r2, 8001a30 <_realloc_r+0x24>
 8001a24:	f7ff f95a 	bl	8000cdc <_free_r>
 8001a28:	2400      	movs	r4, #0
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a30:	f000 f89e 	bl	8001b70 <_malloc_usable_size_r>
 8001a34:	4285      	cmp	r5, r0
 8001a36:	4606      	mov	r6, r0
 8001a38:	d802      	bhi.n	8001a40 <_realloc_r+0x34>
 8001a3a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001a3e:	d8f4      	bhi.n	8001a2a <_realloc_r+0x1e>
 8001a40:	4629      	mov	r1, r5
 8001a42:	4640      	mov	r0, r8
 8001a44:	f7ff f9b6 	bl	8000db4 <_malloc_r>
 8001a48:	4607      	mov	r7, r0
 8001a4a:	2800      	cmp	r0, #0
 8001a4c:	d0ec      	beq.n	8001a28 <_realloc_r+0x1c>
 8001a4e:	42b5      	cmp	r5, r6
 8001a50:	462a      	mov	r2, r5
 8001a52:	4621      	mov	r1, r4
 8001a54:	bf28      	it	cs
 8001a56:	4632      	movcs	r2, r6
 8001a58:	f7ff ffca 	bl	80019f0 <memcpy>
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	4640      	mov	r0, r8
 8001a60:	f7ff f93c 	bl	8000cdc <_free_r>
 8001a64:	463c      	mov	r4, r7
 8001a66:	e7e0      	b.n	8001a2a <_realloc_r+0x1e>

08001a68 <__swhatbuf_r>:
 8001a68:	b570      	push	{r4, r5, r6, lr}
 8001a6a:	460c      	mov	r4, r1
 8001a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a70:	2900      	cmp	r1, #0
 8001a72:	b096      	sub	sp, #88	@ 0x58
 8001a74:	4615      	mov	r5, r2
 8001a76:	461e      	mov	r6, r3
 8001a78:	da0d      	bge.n	8001a96 <__swhatbuf_r+0x2e>
 8001a7a:	89a3      	ldrh	r3, [r4, #12]
 8001a7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001a80:	f04f 0100 	mov.w	r1, #0
 8001a84:	bf14      	ite	ne
 8001a86:	2340      	movne	r3, #64	@ 0x40
 8001a88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	6031      	str	r1, [r6, #0]
 8001a90:	602b      	str	r3, [r5, #0]
 8001a92:	b016      	add	sp, #88	@ 0x58
 8001a94:	bd70      	pop	{r4, r5, r6, pc}
 8001a96:	466a      	mov	r2, sp
 8001a98:	f000 f848 	bl	8001b2c <_fstat_r>
 8001a9c:	2800      	cmp	r0, #0
 8001a9e:	dbec      	blt.n	8001a7a <__swhatbuf_r+0x12>
 8001aa0:	9901      	ldr	r1, [sp, #4]
 8001aa2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001aa6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001aaa:	4259      	negs	r1, r3
 8001aac:	4159      	adcs	r1, r3
 8001aae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ab2:	e7eb      	b.n	8001a8c <__swhatbuf_r+0x24>

08001ab4 <__smakebuf_r>:
 8001ab4:	898b      	ldrh	r3, [r1, #12]
 8001ab6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ab8:	079d      	lsls	r5, r3, #30
 8001aba:	4606      	mov	r6, r0
 8001abc:	460c      	mov	r4, r1
 8001abe:	d507      	bpl.n	8001ad0 <__smakebuf_r+0x1c>
 8001ac0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001ac4:	6023      	str	r3, [r4, #0]
 8001ac6:	6123      	str	r3, [r4, #16]
 8001ac8:	2301      	movs	r3, #1
 8001aca:	6163      	str	r3, [r4, #20]
 8001acc:	b003      	add	sp, #12
 8001ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ad0:	ab01      	add	r3, sp, #4
 8001ad2:	466a      	mov	r2, sp
 8001ad4:	f7ff ffc8 	bl	8001a68 <__swhatbuf_r>
 8001ad8:	9f00      	ldr	r7, [sp, #0]
 8001ada:	4605      	mov	r5, r0
 8001adc:	4639      	mov	r1, r7
 8001ade:	4630      	mov	r0, r6
 8001ae0:	f7ff f968 	bl	8000db4 <_malloc_r>
 8001ae4:	b948      	cbnz	r0, 8001afa <__smakebuf_r+0x46>
 8001ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001aea:	059a      	lsls	r2, r3, #22
 8001aec:	d4ee      	bmi.n	8001acc <__smakebuf_r+0x18>
 8001aee:	f023 0303 	bic.w	r3, r3, #3
 8001af2:	f043 0302 	orr.w	r3, r3, #2
 8001af6:	81a3      	strh	r3, [r4, #12]
 8001af8:	e7e2      	b.n	8001ac0 <__smakebuf_r+0xc>
 8001afa:	89a3      	ldrh	r3, [r4, #12]
 8001afc:	6020      	str	r0, [r4, #0]
 8001afe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b02:	81a3      	strh	r3, [r4, #12]
 8001b04:	9b01      	ldr	r3, [sp, #4]
 8001b06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001b0a:	b15b      	cbz	r3, 8001b24 <__smakebuf_r+0x70>
 8001b0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b10:	4630      	mov	r0, r6
 8001b12:	f000 f81d 	bl	8001b50 <_isatty_r>
 8001b16:	b128      	cbz	r0, 8001b24 <__smakebuf_r+0x70>
 8001b18:	89a3      	ldrh	r3, [r4, #12]
 8001b1a:	f023 0303 	bic.w	r3, r3, #3
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	81a3      	strh	r3, [r4, #12]
 8001b24:	89a3      	ldrh	r3, [r4, #12]
 8001b26:	431d      	orrs	r5, r3
 8001b28:	81a5      	strh	r5, [r4, #12]
 8001b2a:	e7cf      	b.n	8001acc <__smakebuf_r+0x18>

08001b2c <_fstat_r>:
 8001b2c:	b538      	push	{r3, r4, r5, lr}
 8001b2e:	4d07      	ldr	r5, [pc, #28]	@ (8001b4c <_fstat_r+0x20>)
 8001b30:	2300      	movs	r3, #0
 8001b32:	4604      	mov	r4, r0
 8001b34:	4608      	mov	r0, r1
 8001b36:	4611      	mov	r1, r2
 8001b38:	602b      	str	r3, [r5, #0]
 8001b3a:	f7fe fe6d 	bl	8000818 <_fstat>
 8001b3e:	1c43      	adds	r3, r0, #1
 8001b40:	d102      	bne.n	8001b48 <_fstat_r+0x1c>
 8001b42:	682b      	ldr	r3, [r5, #0]
 8001b44:	b103      	cbz	r3, 8001b48 <_fstat_r+0x1c>
 8001b46:	6023      	str	r3, [r4, #0]
 8001b48:	bd38      	pop	{r3, r4, r5, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200001c0 	.word	0x200001c0

08001b50 <_isatty_r>:
 8001b50:	b538      	push	{r3, r4, r5, lr}
 8001b52:	4d06      	ldr	r5, [pc, #24]	@ (8001b6c <_isatty_r+0x1c>)
 8001b54:	2300      	movs	r3, #0
 8001b56:	4604      	mov	r4, r0
 8001b58:	4608      	mov	r0, r1
 8001b5a:	602b      	str	r3, [r5, #0]
 8001b5c:	f7fe fe6c 	bl	8000838 <_isatty>
 8001b60:	1c43      	adds	r3, r0, #1
 8001b62:	d102      	bne.n	8001b6a <_isatty_r+0x1a>
 8001b64:	682b      	ldr	r3, [r5, #0]
 8001b66:	b103      	cbz	r3, 8001b6a <_isatty_r+0x1a>
 8001b68:	6023      	str	r3, [r4, #0]
 8001b6a:	bd38      	pop	{r3, r4, r5, pc}
 8001b6c:	200001c0 	.word	0x200001c0

08001b70 <_malloc_usable_size_r>:
 8001b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b74:	1f18      	subs	r0, r3, #4
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	bfbc      	itt	lt
 8001b7a:	580b      	ldrlt	r3, [r1, r0]
 8001b7c:	18c0      	addlt	r0, r0, r3
 8001b7e:	4770      	bx	lr

08001b80 <_init>:
 8001b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b82:	bf00      	nop
 8001b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b86:	bc08      	pop	{r3}
 8001b88:	469e      	mov	lr, r3
 8001b8a:	4770      	bx	lr

08001b8c <_fini>:
 8001b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b8e:	bf00      	nop
 8001b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b92:	bc08      	pop	{r3}
 8001b94:	469e      	mov	lr, r3
 8001b96:	4770      	bx	lr
