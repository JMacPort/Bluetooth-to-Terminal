
Bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001630  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001800  08001800  00002800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001850  08001850  00003060  2**0
                  CONTENTS
  4 .ARM          00000008  08001850  08001850  00002850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001858  08001858  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001858  08001858  00002858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800185c  0800185c  0000285c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08001860  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000060  080018c0  00003060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  080018c0  000031d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001e4c  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000834  00000000  00000000  00004edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002e8  00000000  00000000  00005710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000211  00000000  00000000  000059f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e16  00000000  00000000  00005c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003370  00000000  00000000  00026a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6bdd  00000000  00000000  00029d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f096c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000118c  00000000  00000000  000f09b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000f1b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080017e8 	.word	0x080017e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080017e8 	.word	0x080017e8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <main>:
void USART1_Init();
void I2C1_Init();
void Light_Sensor_Init();
uint16_t Light_Read();

int main() {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
    uint16_t value;

    USART2_Init();
 80002b6:	f000 f841 	bl	800033c <USART2_Init>
    I2C1_Init();
 80002ba:	f000 f881 	bl	80003c0 <I2C1_Init>
    Light_Sensor_Init();
 80002be:	f000 f96c 	bl	800059a <Light_Sensor_Init>

    // Long delay to ensure everything is settled
    for(volatile int i = 0; i < 100000; i++);
 80002c2:	2300      	movs	r3, #0
 80002c4:	60bb      	str	r3, [r7, #8]
 80002c6:	e002      	b.n	80002ce <main+0x1e>
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	3301      	adds	r3, #1
 80002cc:	60bb      	str	r3, [r7, #8]
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	4a16      	ldr	r2, [pc, #88]	@ (800032c <main+0x7c>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	ddf8      	ble.n	80002c8 <main+0x18>

    // Single print to clear any buffer issues
    printf("\r\n");
 80002d6:	4816      	ldr	r0, [pc, #88]	@ (8000330 <main+0x80>)
 80002d8:	f000 fc22 	bl	8000b20 <puts>

    value = Light_Read();
 80002dc:	f000 f96a 	bl	80005b4 <Light_Read>
 80002e0:	4603      	mov	r3, r0
 80002e2:	81fb      	strh	r3, [r7, #14]

    // Delay before printing result
    for(volatile int i = 0; i < 100000; i++);
 80002e4:	2300      	movs	r3, #0
 80002e6:	607b      	str	r3, [r7, #4]
 80002e8:	e002      	b.n	80002f0 <main+0x40>
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	3301      	adds	r3, #1
 80002ee:	607b      	str	r3, [r7, #4]
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	4a0e      	ldr	r2, [pc, #56]	@ (800032c <main+0x7c>)
 80002f4:	4293      	cmp	r3, r2
 80002f6:	ddf8      	ble.n	80002ea <main+0x3a>

    printf("Light Level: %d lux\r\n", value);
 80002f8:	89fb      	ldrh	r3, [r7, #14]
 80002fa:	4619      	mov	r1, r3
 80002fc:	480d      	ldr	r0, [pc, #52]	@ (8000334 <main+0x84>)
 80002fe:	f000 fba7 	bl	8000a50 <iprintf>

    while(1) {
    	for(volatile int i = 0; i < 1000000; i++);
 8000302:	2300      	movs	r3, #0
 8000304:	603b      	str	r3, [r7, #0]
 8000306:	e002      	b.n	800030e <main+0x5e>
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	3301      	adds	r3, #1
 800030c:	603b      	str	r3, [r7, #0]
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	4a09      	ldr	r2, [pc, #36]	@ (8000338 <main+0x88>)
 8000312:	4293      	cmp	r3, r2
 8000314:	ddf8      	ble.n	8000308 <main+0x58>
    	value = Light_Read();
 8000316:	f000 f94d 	bl	80005b4 <Light_Read>
 800031a:	4603      	mov	r3, r0
 800031c:	81fb      	strh	r3, [r7, #14]
    	printf("Light Level: %d lux\r\n", value);
 800031e:	89fb      	ldrh	r3, [r7, #14]
 8000320:	4619      	mov	r1, r3
 8000322:	4804      	ldr	r0, [pc, #16]	@ (8000334 <main+0x84>)
 8000324:	f000 fb94 	bl	8000a50 <iprintf>
    	for(volatile int i = 0; i < 1000000; i++);
 8000328:	e7eb      	b.n	8000302 <main+0x52>
 800032a:	bf00      	nop
 800032c:	0001869f 	.word	0x0001869f
 8000330:	08001800 	.word	0x08001800
 8000334:	08001804 	.word	0x08001804
 8000338:	000f423f 	.word	0x000f423f

0800033c <USART2_Init>:
    }
}

// USART2 - ST-Link Setup
void USART2_Init() {
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
	RCC -> APB1ENR |= (1 << 17);								// USART2
 8000340:	4b1c      	ldr	r3, [pc, #112]	@ (80003b4 <USART2_Init+0x78>)
 8000342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000344:	4a1b      	ldr	r2, [pc, #108]	@ (80003b4 <USART2_Init+0x78>)
 8000346:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800034a:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC -> AHB1ENR |= (1 << 0);									// GPIOA
 800034c:	4b19      	ldr	r3, [pc, #100]	@ (80003b4 <USART2_Init+0x78>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000350:	4a18      	ldr	r2, [pc, #96]	@ (80003b4 <USART2_Init+0x78>)
 8000352:	f043 0301 	orr.w	r3, r3, #1
 8000356:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA -> MODER &= ~((3 << (2 * 2)) | (3 << (2 * 3)));		// PA2 & 3 Set to Alternate Function
 8000358:	4b17      	ldr	r3, [pc, #92]	@ (80003b8 <USART2_Init+0x7c>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a16      	ldr	r2, [pc, #88]	@ (80003b8 <USART2_Init+0x7c>)
 800035e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000362:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= (2 << (2 * 2)) | (2 << (2 * 3));
 8000364:	4b14      	ldr	r3, [pc, #80]	@ (80003b8 <USART2_Init+0x7c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a13      	ldr	r2, [pc, #76]	@ (80003b8 <USART2_Init+0x7c>)
 800036a:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800036e:	6013      	str	r3, [r2, #0]

	GPIOA -> AFR[0] &= ~((15 << (4 * 2)) | (15 << (4 * 3)));	// Alternate Function to AF7
 8000370:	4b11      	ldr	r3, [pc, #68]	@ (80003b8 <USART2_Init+0x7c>)
 8000372:	6a1b      	ldr	r3, [r3, #32]
 8000374:	4a10      	ldr	r2, [pc, #64]	@ (80003b8 <USART2_Init+0x7c>)
 8000376:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800037a:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] |= (7 << (4 * 2)) | (7 << (4 * 3));
 800037c:	4b0e      	ldr	r3, [pc, #56]	@ (80003b8 <USART2_Init+0x7c>)
 800037e:	6a1b      	ldr	r3, [r3, #32]
 8000380:	4a0d      	ldr	r2, [pc, #52]	@ (80003b8 <USART2_Init+0x7c>)
 8000382:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000386:	6213      	str	r3, [r2, #32]

	USART2 -> BRR = 0x0683;										// 9600 Baud Rate
 8000388:	4b0c      	ldr	r3, [pc, #48]	@ (80003bc <USART2_Init+0x80>)
 800038a:	f240 6283 	movw	r2, #1667	@ 0x683
 800038e:	609a      	str	r2, [r3, #8]

	USART2 -> CR1 |= (1 << 3);									// Transmitter Enabled
 8000390:	4b0a      	ldr	r3, [pc, #40]	@ (80003bc <USART2_Init+0x80>)
 8000392:	68db      	ldr	r3, [r3, #12]
 8000394:	4a09      	ldr	r2, [pc, #36]	@ (80003bc <USART2_Init+0x80>)
 8000396:	f043 0308 	orr.w	r3, r3, #8
 800039a:	60d3      	str	r3, [r2, #12]
	USART2 -> CR1 |= (1 << 13);									// USART2 Enabled
 800039c:	4b07      	ldr	r3, [pc, #28]	@ (80003bc <USART2_Init+0x80>)
 800039e:	68db      	ldr	r3, [r3, #12]
 80003a0:	4a06      	ldr	r2, [pc, #24]	@ (80003bc <USART2_Init+0x80>)
 80003a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003a6:	60d3      	str	r3, [r2, #12]
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	40023800 	.word	0x40023800
 80003b8:	40020000 	.word	0x40020000
 80003bc:	40004400 	.word	0x40004400

080003c0 <I2C1_Init>:
	USART1 -> CR1 |= (1 << 2) | (1 << 3);						// Transmitter/Receiver Enabled
	USART1 -> CR1 |= (1 << 13);									// USART1 Enabled
}

// I2C for sensor/s; Maybe more than 1 but starting with BH1750 light sensor
void I2C1_Init() {
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
	RCC -> AHB1ENR |= (1 << 1);									// GPIOB
 80003c4:	4b27      	ldr	r3, [pc, #156]	@ (8000464 <I2C1_Init+0xa4>)
 80003c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c8:	4a26      	ldr	r2, [pc, #152]	@ (8000464 <I2C1_Init+0xa4>)
 80003ca:	f043 0302 	orr.w	r3, r3, #2
 80003ce:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC -> APB1ENR |= (1 << 21);								// I2C1
 80003d0:	4b24      	ldr	r3, [pc, #144]	@ (8000464 <I2C1_Init+0xa4>)
 80003d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003d4:	4a23      	ldr	r2, [pc, #140]	@ (8000464 <I2C1_Init+0xa4>)
 80003d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003da:	6413      	str	r3, [r2, #64]	@ 0x40

	GPIOB -> OTYPER &= ~((1 << 8) | (1 << 9));					// Open-Drain on PB8 & 9
 80003dc:	4b22      	ldr	r3, [pc, #136]	@ (8000468 <I2C1_Init+0xa8>)
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	4a21      	ldr	r2, [pc, #132]	@ (8000468 <I2C1_Init+0xa8>)
 80003e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80003e6:	6053      	str	r3, [r2, #4]
	GPIOB -> OTYPER |= (1 << 8) | (1 << 9);
 80003e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000468 <I2C1_Init+0xa8>)
 80003ea:	685b      	ldr	r3, [r3, #4]
 80003ec:	4a1e      	ldr	r2, [pc, #120]	@ (8000468 <I2C1_Init+0xa8>)
 80003ee:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80003f2:	6053      	str	r3, [r2, #4]

	GPIOB -> PUPDR &= ~((3 << (2 * 8)) | (3 << (2 * 9)));		// Pull-Up on PB8 & 9
 80003f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000468 <I2C1_Init+0xa8>)
 80003f6:	68db      	ldr	r3, [r3, #12]
 80003f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000468 <I2C1_Init+0xa8>)
 80003fa:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80003fe:	60d3      	str	r3, [r2, #12]
	GPIOB -> PUPDR |= (1 << (2 * 8)) | (1 << (2 * 9));
 8000400:	4b19      	ldr	r3, [pc, #100]	@ (8000468 <I2C1_Init+0xa8>)
 8000402:	68db      	ldr	r3, [r3, #12]
 8000404:	4a18      	ldr	r2, [pc, #96]	@ (8000468 <I2C1_Init+0xa8>)
 8000406:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 800040a:	60d3      	str	r3, [r2, #12]

	GPIOB -> MODER &= ~((3 << (2 * 8)) | (3 << (2 * 9)));		// PB8 & 9 Set to Alternate Function
 800040c:	4b16      	ldr	r3, [pc, #88]	@ (8000468 <I2C1_Init+0xa8>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a15      	ldr	r2, [pc, #84]	@ (8000468 <I2C1_Init+0xa8>)
 8000412:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000416:	6013      	str	r3, [r2, #0]
	GPIOB -> MODER |= (2 << (2 * 8)) | (2 << (2 * 9));
 8000418:	4b13      	ldr	r3, [pc, #76]	@ (8000468 <I2C1_Init+0xa8>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a12      	ldr	r2, [pc, #72]	@ (8000468 <I2C1_Init+0xa8>)
 800041e:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000422:	6013      	str	r3, [r2, #0]

	GPIOB -> AFR[1] &= ~((15 << (4 * 0)) | (15 << (4 * 1)));	// Alternate Function to AF4
 8000424:	4b10      	ldr	r3, [pc, #64]	@ (8000468 <I2C1_Init+0xa8>)
 8000426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000428:	4a0f      	ldr	r2, [pc, #60]	@ (8000468 <I2C1_Init+0xa8>)
 800042a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800042e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB -> AFR[1] |= (4 << (4 * 0)) | (4 << 4 * 1);
 8000430:	4b0d      	ldr	r3, [pc, #52]	@ (8000468 <I2C1_Init+0xa8>)
 8000432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000434:	4a0c      	ldr	r2, [pc, #48]	@ (8000468 <I2C1_Init+0xa8>)
 8000436:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800043a:	6253      	str	r3, [r2, #36]	@ 0x24

	I2C1 -> CR2 = 42;											// 42MHz Frequency
 800043c:	4b0b      	ldr	r3, [pc, #44]	@ (800046c <I2C1_Init+0xac>)
 800043e:	222a      	movs	r2, #42	@ 0x2a
 8000440:	605a      	str	r2, [r3, #4]
	I2C1 -> CCR = 210; 											// 100kHz Frequency
 8000442:	4b0a      	ldr	r3, [pc, #40]	@ (800046c <I2C1_Init+0xac>)
 8000444:	22d2      	movs	r2, #210	@ 0xd2
 8000446:	61da      	str	r2, [r3, #28]
	I2C1 -> TRISE = 43;											// Max Rise Time
 8000448:	4b08      	ldr	r3, [pc, #32]	@ (800046c <I2C1_Init+0xac>)
 800044a:	222b      	movs	r2, #43	@ 0x2b
 800044c:	621a      	str	r2, [r3, #32]
	I2C1 -> CR1 |= (1 << 0);									// I2C1 Enabled
 800044e:	4b07      	ldr	r3, [pc, #28]	@ (800046c <I2C1_Init+0xac>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a06      	ldr	r2, [pc, #24]	@ (800046c <I2C1_Init+0xac>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	6013      	str	r3, [r2, #0]
}
 800045a:	bf00      	nop
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr
 8000464:	40023800 	.word	0x40023800
 8000468:	40020400 	.word	0x40020400
 800046c:	40005400 	.word	0x40005400

08000470 <I2C_Check_Busy>:

// Checks if I2C bus is busy
uint8_t I2C_Check_Busy() {
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
	if (I2C1 -> SR2 & (1 << 1)) {
 8000474:	4b06      	ldr	r3, [pc, #24]	@ (8000490 <I2C_Check_Busy+0x20>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f003 0302 	and.w	r3, r3, #2
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <I2C_Check_Busy+0x14>
		return 1;
 8000480:	2301      	movs	r3, #1
 8000482:	e000      	b.n	8000486 <I2C_Check_Busy+0x16>
	}
	return 0;
 8000484:	2300      	movs	r3, #0
}
 8000486:	4618      	mov	r0, r3
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr
 8000490:	40005400 	.word	0x40005400

08000494 <I2C_Start>:

// Generates start condition
void I2C_Start() {
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
	I2C1 -> CR1 |= (1 << 8);
 8000498:	4b09      	ldr	r3, [pc, #36]	@ (80004c0 <I2C_Start+0x2c>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a08      	ldr	r2, [pc, #32]	@ (80004c0 <I2C_Start+0x2c>)
 800049e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004a2:	6013      	str	r3, [r2, #0]
	while (!(I2C1 -> SR1 & (1 << 0)));
 80004a4:	bf00      	nop
 80004a6:	4b06      	ldr	r3, [pc, #24]	@ (80004c0 <I2C_Start+0x2c>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d0f9      	beq.n	80004a6 <I2C_Start+0x12>
}
 80004b2:	bf00      	nop
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	40005400 	.word	0x40005400

080004c4 <I2C_Send_Address>:

// Sends device address and clears associated flags
void I2C_Send_Address(uint8_t addr, uint8_t read) {
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	460a      	mov	r2, r1
 80004ce:	71fb      	strb	r3, [r7, #7]
 80004d0:	4613      	mov	r3, r2
 80004d2:	71bb      	strb	r3, [r7, #6]
	I2C1 -> DR = (addr << 1) | read;
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	005a      	lsls	r2, r3, #1
 80004d8:	79bb      	ldrb	r3, [r7, #6]
 80004da:	431a      	orrs	r2, r3
 80004dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000508 <I2C_Send_Address+0x44>)
 80004de:	611a      	str	r2, [r3, #16]
	while(!(I2C1 -> SR1 & (1 << 1)));
 80004e0:	bf00      	nop
 80004e2:	4b09      	ldr	r3, [pc, #36]	@ (8000508 <I2C_Send_Address+0x44>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	f003 0302 	and.w	r3, r3, #2
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d0f9      	beq.n	80004e2 <I2C_Send_Address+0x1e>

	uint8_t temp = I2C1 -> SR1;
 80004ee:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <I2C_Send_Address+0x44>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	73fb      	strb	r3, [r7, #15]
	temp = I2C1 -> SR2;
 80004f4:	4b04      	ldr	r3, [pc, #16]	@ (8000508 <I2C_Send_Address+0x44>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	73fb      	strb	r3, [r7, #15]
	(void) temp;
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40005400 	.word	0x40005400

0800050c <I2C_Send_Data>:

// Sends a byte of data to device from master
void I2C_Send_Data(uint8_t data) {
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]
	I2C1 -> DR = data;
 8000516:	4a08      	ldr	r2, [pc, #32]	@ (8000538 <I2C_Send_Data+0x2c>)
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	6113      	str	r3, [r2, #16]
	while(!(I2C1 -> SR1 & (1 << 2)));
 800051c:	bf00      	nop
 800051e:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <I2C_Send_Data+0x2c>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f003 0304 	and.w	r3, r3, #4
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0f9      	beq.n	800051e <I2C_Send_Data+0x12>
}
 800052a:	bf00      	nop
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	40005400 	.word	0x40005400

0800053c <I2C_Stop>:

// Generates stop condition
void I2C_Stop() {
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
	I2C1 -> CR1 |= (1 << 9);
 8000540:	4b05      	ldr	r3, [pc, #20]	@ (8000558 <I2C_Stop+0x1c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a04      	ldr	r2, [pc, #16]	@ (8000558 <I2C_Stop+0x1c>)
 8000546:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800054a:	6013      	str	r3, [r2, #0]
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40005400 	.word	0x40005400

0800055c <I2C_Write>:

// Entire write to a device
void I2C_Write(uint8_t addr, uint8_t data) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	460a      	mov	r2, r1
 8000566:	71fb      	strb	r3, [r7, #7]
 8000568:	4613      	mov	r3, r2
 800056a:	71bb      	strb	r3, [r7, #6]
	while(I2C_Check_Busy());
 800056c:	bf00      	nop
 800056e:	f7ff ff7f 	bl	8000470 <I2C_Check_Busy>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d1fa      	bne.n	800056e <I2C_Write+0x12>
	I2C_Start();
 8000578:	f7ff ff8c 	bl	8000494 <I2C_Start>
	I2C_Send_Address(addr, 0);
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f7ff ff9f 	bl	80004c4 <I2C_Send_Address>
	I2C_Send_Data(data);
 8000586:	79bb      	ldrb	r3, [r7, #6]
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff ffbf 	bl	800050c <I2C_Send_Data>
	I2C_Stop();
 800058e:	f7ff ffd5 	bl	800053c <I2C_Stop>
}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <Light_Sensor_Init>:

// Initializes BH1750 light sensor
void Light_Sensor_Init() {
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
	I2C_Write(LIGHT_ADDR, LIGHT_ON);
 800059e:	2101      	movs	r1, #1
 80005a0:	2023      	movs	r0, #35	@ 0x23
 80005a2:	f7ff ffdb 	bl	800055c <I2C_Write>
	I2C_Write(LIGHT_ADDR, LIGHT_CONT);
 80005a6:	2110      	movs	r1, #16
 80005a8:	2023      	movs	r0, #35	@ 0x23
 80005aa:	f7ff ffd7 	bl	800055c <I2C_Write>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <Light_Read>:

// Returns the value from the light sensor
uint16_t Light_Read() {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
	uint8_t upper, lower;

	while(I2C_Check_Busy());
 80005ba:	bf00      	nop
 80005bc:	f7ff ff58 	bl	8000470 <I2C_Check_Busy>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d1fa      	bne.n	80005bc <Light_Read+0x8>
	I2C_Start();
 80005c6:	f7ff ff65 	bl	8000494 <I2C_Start>
	I2C_Send_Address(LIGHT_ADDR, 1);
 80005ca:	2101      	movs	r1, #1
 80005cc:	2023      	movs	r0, #35	@ 0x23
 80005ce:	f7ff ff79 	bl	80004c4 <I2C_Send_Address>

	I2C1 -> CR1 |= (1 << 10);
 80005d2:	4b17      	ldr	r3, [pc, #92]	@ (8000630 <Light_Read+0x7c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a16      	ldr	r2, [pc, #88]	@ (8000630 <Light_Read+0x7c>)
 80005d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005dc:	6013      	str	r3, [r2, #0]
	while(!(I2C1 -> SR1 & (1 << 6)));
 80005de:	bf00      	nop
 80005e0:	4b13      	ldr	r3, [pc, #76]	@ (8000630 <Light_Read+0x7c>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d0f9      	beq.n	80005e0 <Light_Read+0x2c>
	upper = I2C1 -> DR;
 80005ec:	4b10      	ldr	r3, [pc, #64]	@ (8000630 <Light_Read+0x7c>)
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	71fb      	strb	r3, [r7, #7]

	I2C1 -> CR1 &= ~(1 << 10);
 80005f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000630 <Light_Read+0x7c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000630 <Light_Read+0x7c>)
 80005f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80005fc:	6013      	str	r3, [r2, #0]

	while(!(I2C1 -> SR1 & (1 << 6)));
 80005fe:	bf00      	nop
 8000600:	4b0b      	ldr	r3, [pc, #44]	@ (8000630 <Light_Read+0x7c>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000608:	2b00      	cmp	r3, #0
 800060a:	d0f9      	beq.n	8000600 <Light_Read+0x4c>
	lower = I2C1 -> DR;
 800060c:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <Light_Read+0x7c>)
 800060e:	691b      	ldr	r3, [r3, #16]
 8000610:	71bb      	strb	r3, [r7, #6]

	I2C_Stop();
 8000612:	f7ff ff93 	bl	800053c <I2C_Stop>

	uint16_t value = (upper << 8) | lower;
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	021b      	lsls	r3, r3, #8
 800061a:	b21a      	sxth	r2, r3
 800061c:	79bb      	ldrb	r3, [r7, #6]
 800061e:	b21b      	sxth	r3, r3
 8000620:	4313      	orrs	r3, r2
 8000622:	b21b      	sxth	r3, r3
 8000624:	80bb      	strh	r3, [r7, #4]
	return value;
 8000626:	88bb      	ldrh	r3, [r7, #4]
}
 8000628:	4618      	mov	r0, r3
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40005400 	.word	0x40005400

08000634 <__io_putchar>:


// printf retarget with putchar
int __io_putchar(int c) {
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
    while(!(USART2 -> SR & (1 << 7)));
 800063c:	bf00      	nop
 800063e:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <__io_putchar+0x50>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000646:	2b00      	cmp	r3, #0
 8000648:	d0f9      	beq.n	800063e <__io_putchar+0xa>
    USART2 -> DR = c;
 800064a:	4a0e      	ldr	r2, [pc, #56]	@ (8000684 <__io_putchar+0x50>)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6053      	str	r3, [r2, #4]

    while(!(USART2 -> SR & (1 << 6)));
 8000650:	bf00      	nop
 8000652:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__io_putchar+0x50>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0f9      	beq.n	8000652 <__io_putchar+0x1e>
    USART2 -> SR &= ~(1 << 6);
 800065e:	4b09      	ldr	r3, [pc, #36]	@ (8000684 <__io_putchar+0x50>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a08      	ldr	r2, [pc, #32]	@ (8000684 <__io_putchar+0x50>)
 8000664:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000668:	6013      	str	r3, [r2, #0]
    USART2 -> SR &= ~(1 << 5);
 800066a:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__io_putchar+0x50>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a05      	ldr	r2, [pc, #20]	@ (8000684 <__io_putchar+0x50>)
 8000670:	f023 0320 	bic.w	r3, r3, #32
 8000674:	6013      	str	r3, [r2, #0]

    return c;
 8000676:	687b      	ldr	r3, [r7, #4]
}
 8000678:	4618      	mov	r0, r3
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	40004400 	.word	0x40004400

08000688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <NMI_Handler+0x4>

08000690 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <HardFault_Handler+0x4>

08000698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <MemManage_Handler+0x4>

080006a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <BusFault_Handler+0x4>

080006a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <UsageFault_Handler+0x4>

080006b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006de:	f000 f8e1 	bl	80008a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b086      	sub	sp, #24
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	60f8      	str	r0, [r7, #12]
 80006ee:	60b9      	str	r1, [r7, #8]
 80006f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
 80006f6:	e00a      	b.n	800070e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006f8:	f3af 8000 	nop.w
 80006fc:	4601      	mov	r1, r0
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	1c5a      	adds	r2, r3, #1
 8000702:	60ba      	str	r2, [r7, #8]
 8000704:	b2ca      	uxtb	r2, r1
 8000706:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	3301      	adds	r3, #1
 800070c:	617b      	str	r3, [r7, #20]
 800070e:	697a      	ldr	r2, [r7, #20]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	429a      	cmp	r2, r3
 8000714:	dbf0      	blt.n	80006f8 <_read+0x12>
  }

  return len;
 8000716:	687b      	ldr	r3, [r7, #4]
}
 8000718:	4618      	mov	r0, r3
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	e009      	b.n	8000746 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	1c5a      	adds	r2, r3, #1
 8000736:	60ba      	str	r2, [r7, #8]
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff7a 	bl	8000634 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	3301      	adds	r3, #1
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	697a      	ldr	r2, [r7, #20]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	429a      	cmp	r2, r3
 800074c:	dbf1      	blt.n	8000732 <_write+0x12>
  }
  return len;
 800074e:	687b      	ldr	r3, [r7, #4]
}
 8000750:	4618      	mov	r0, r3
 8000752:	3718      	adds	r7, #24
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <_close>:

int _close(int file)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000760:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000764:	4618      	mov	r0, r3
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000780:	605a      	str	r2, [r3, #4]
  return 0;
 8000782:	2300      	movs	r3, #0
}
 8000784:	4618      	mov	r0, r3
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <_isatty>:

int _isatty(int file)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000798:	2301      	movs	r3, #1
}
 800079a:	4618      	mov	r0, r3
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007a6:	b480      	push	{r7}
 80007a8:	b085      	sub	sp, #20
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	60f8      	str	r0, [r7, #12]
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007b2:	2300      	movs	r3, #0
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3714      	adds	r7, #20
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007c8:	4a14      	ldr	r2, [pc, #80]	@ (800081c <_sbrk+0x5c>)
 80007ca:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <_sbrk+0x60>)
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007d4:	4b13      	ldr	r3, [pc, #76]	@ (8000824 <_sbrk+0x64>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d102      	bne.n	80007e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007dc:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <_sbrk+0x64>)
 80007de:	4a12      	ldr	r2, [pc, #72]	@ (8000828 <_sbrk+0x68>)
 80007e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007e2:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <_sbrk+0x64>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4413      	add	r3, r2
 80007ea:	693a      	ldr	r2, [r7, #16]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d207      	bcs.n	8000800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f0:	f000 fac4 	bl	8000d7c <__errno>
 80007f4:	4603      	mov	r3, r0
 80007f6:	220c      	movs	r2, #12
 80007f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
 80007fe:	e009      	b.n	8000814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000800:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <_sbrk+0x64>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000806:	4b07      	ldr	r3, [pc, #28]	@ (8000824 <_sbrk+0x64>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	4a05      	ldr	r2, [pc, #20]	@ (8000824 <_sbrk+0x64>)
 8000810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000812:	68fb      	ldr	r3, [r7, #12]
}
 8000814:	4618      	mov	r0, r3
 8000816:	3718      	adds	r7, #24
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20020000 	.word	0x20020000
 8000820:	00000400 	.word	0x00000400
 8000824:	2000007c 	.word	0x2000007c
 8000828:	200001d0 	.word	0x200001d0

0800082c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000830:	4b06      	ldr	r3, [pc, #24]	@ (800084c <SystemInit+0x20>)
 8000832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000836:	4a05      	ldr	r2, [pc, #20]	@ (800084c <SystemInit+0x20>)
 8000838:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800083c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000850:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000888 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000854:	f7ff ffea 	bl	800082c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000858:	480c      	ldr	r0, [pc, #48]	@ (800088c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800085a:	490d      	ldr	r1, [pc, #52]	@ (8000890 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800085c:	4a0d      	ldr	r2, [pc, #52]	@ (8000894 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000860:	e002      	b.n	8000868 <LoopCopyDataInit>

08000862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000866:	3304      	adds	r3, #4

08000868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800086c:	d3f9      	bcc.n	8000862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086e:	4a0a      	ldr	r2, [pc, #40]	@ (8000898 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000870:	4c0a      	ldr	r4, [pc, #40]	@ (800089c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000874:	e001      	b.n	800087a <LoopFillZerobss>

08000876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000878:	3204      	adds	r2, #4

0800087a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800087c:	d3fb      	bcc.n	8000876 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800087e:	f000 fa83 	bl	8000d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000882:	f7ff fd15 	bl	80002b0 <main>
  bx  lr    
 8000886:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000888:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800088c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000890:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000894:	08001860 	.word	0x08001860
  ldr r2, =_sbss
 8000898:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800089c:	200001d0 	.word	0x200001d0

080008a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008a0:	e7fe      	b.n	80008a0 <ADC_IRQHandler>
	...

080008a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a8:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <HAL_IncTick+0x20>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <HAL_IncTick+0x24>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4413      	add	r3, r2
 80008b4:	4a04      	ldr	r2, [pc, #16]	@ (80008c8 <HAL_IncTick+0x24>)
 80008b6:	6013      	str	r3, [r2, #0]
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	20000000 	.word	0x20000000
 80008c8:	20000080 	.word	0x20000080

080008cc <std>:
 80008cc:	2300      	movs	r3, #0
 80008ce:	b510      	push	{r4, lr}
 80008d0:	4604      	mov	r4, r0
 80008d2:	e9c0 3300 	strd	r3, r3, [r0]
 80008d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80008da:	6083      	str	r3, [r0, #8]
 80008dc:	8181      	strh	r1, [r0, #12]
 80008de:	6643      	str	r3, [r0, #100]	@ 0x64
 80008e0:	81c2      	strh	r2, [r0, #14]
 80008e2:	6183      	str	r3, [r0, #24]
 80008e4:	4619      	mov	r1, r3
 80008e6:	2208      	movs	r2, #8
 80008e8:	305c      	adds	r0, #92	@ 0x5c
 80008ea:	f000 f9f9 	bl	8000ce0 <memset>
 80008ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000924 <std+0x58>)
 80008f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80008f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <std+0x5c>)
 80008f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80008f6:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <std+0x60>)
 80008f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80008fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000930 <std+0x64>)
 80008fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80008fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000934 <std+0x68>)
 8000900:	6224      	str	r4, [r4, #32]
 8000902:	429c      	cmp	r4, r3
 8000904:	d006      	beq.n	8000914 <std+0x48>
 8000906:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800090a:	4294      	cmp	r4, r2
 800090c:	d002      	beq.n	8000914 <std+0x48>
 800090e:	33d0      	adds	r3, #208	@ 0xd0
 8000910:	429c      	cmp	r4, r3
 8000912:	d105      	bne.n	8000920 <std+0x54>
 8000914:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800091c:	f000 ba58 	b.w	8000dd0 <__retarget_lock_init_recursive>
 8000920:	bd10      	pop	{r4, pc}
 8000922:	bf00      	nop
 8000924:	08000b31 	.word	0x08000b31
 8000928:	08000b53 	.word	0x08000b53
 800092c:	08000b8b 	.word	0x08000b8b
 8000930:	08000baf 	.word	0x08000baf
 8000934:	20000084 	.word	0x20000084

08000938 <stdio_exit_handler>:
 8000938:	4a02      	ldr	r2, [pc, #8]	@ (8000944 <stdio_exit_handler+0xc>)
 800093a:	4903      	ldr	r1, [pc, #12]	@ (8000948 <stdio_exit_handler+0x10>)
 800093c:	4803      	ldr	r0, [pc, #12]	@ (800094c <stdio_exit_handler+0x14>)
 800093e:	f000 b869 	b.w	8000a14 <_fwalk_sglue>
 8000942:	bf00      	nop
 8000944:	20000004 	.word	0x20000004
 8000948:	08001671 	.word	0x08001671
 800094c:	20000014 	.word	0x20000014

08000950 <cleanup_stdio>:
 8000950:	6841      	ldr	r1, [r0, #4]
 8000952:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <cleanup_stdio+0x34>)
 8000954:	4299      	cmp	r1, r3
 8000956:	b510      	push	{r4, lr}
 8000958:	4604      	mov	r4, r0
 800095a:	d001      	beq.n	8000960 <cleanup_stdio+0x10>
 800095c:	f000 fe88 	bl	8001670 <_fflush_r>
 8000960:	68a1      	ldr	r1, [r4, #8]
 8000962:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <cleanup_stdio+0x38>)
 8000964:	4299      	cmp	r1, r3
 8000966:	d002      	beq.n	800096e <cleanup_stdio+0x1e>
 8000968:	4620      	mov	r0, r4
 800096a:	f000 fe81 	bl	8001670 <_fflush_r>
 800096e:	68e1      	ldr	r1, [r4, #12]
 8000970:	4b06      	ldr	r3, [pc, #24]	@ (800098c <cleanup_stdio+0x3c>)
 8000972:	4299      	cmp	r1, r3
 8000974:	d004      	beq.n	8000980 <cleanup_stdio+0x30>
 8000976:	4620      	mov	r0, r4
 8000978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800097c:	f000 be78 	b.w	8001670 <_fflush_r>
 8000980:	bd10      	pop	{r4, pc}
 8000982:	bf00      	nop
 8000984:	20000084 	.word	0x20000084
 8000988:	200000ec 	.word	0x200000ec
 800098c:	20000154 	.word	0x20000154

08000990 <global_stdio_init.part.0>:
 8000990:	b510      	push	{r4, lr}
 8000992:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <global_stdio_init.part.0+0x30>)
 8000994:	4c0b      	ldr	r4, [pc, #44]	@ (80009c4 <global_stdio_init.part.0+0x34>)
 8000996:	4a0c      	ldr	r2, [pc, #48]	@ (80009c8 <global_stdio_init.part.0+0x38>)
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	4620      	mov	r0, r4
 800099c:	2200      	movs	r2, #0
 800099e:	2104      	movs	r1, #4
 80009a0:	f7ff ff94 	bl	80008cc <std>
 80009a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80009a8:	2201      	movs	r2, #1
 80009aa:	2109      	movs	r1, #9
 80009ac:	f7ff ff8e 	bl	80008cc <std>
 80009b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80009b4:	2202      	movs	r2, #2
 80009b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009ba:	2112      	movs	r1, #18
 80009bc:	f7ff bf86 	b.w	80008cc <std>
 80009c0:	200001bc 	.word	0x200001bc
 80009c4:	20000084 	.word	0x20000084
 80009c8:	08000939 	.word	0x08000939

080009cc <__sfp_lock_acquire>:
 80009cc:	4801      	ldr	r0, [pc, #4]	@ (80009d4 <__sfp_lock_acquire+0x8>)
 80009ce:	f000 ba00 	b.w	8000dd2 <__retarget_lock_acquire_recursive>
 80009d2:	bf00      	nop
 80009d4:	200001c5 	.word	0x200001c5

080009d8 <__sfp_lock_release>:
 80009d8:	4801      	ldr	r0, [pc, #4]	@ (80009e0 <__sfp_lock_release+0x8>)
 80009da:	f000 b9fb 	b.w	8000dd4 <__retarget_lock_release_recursive>
 80009de:	bf00      	nop
 80009e0:	200001c5 	.word	0x200001c5

080009e4 <__sinit>:
 80009e4:	b510      	push	{r4, lr}
 80009e6:	4604      	mov	r4, r0
 80009e8:	f7ff fff0 	bl	80009cc <__sfp_lock_acquire>
 80009ec:	6a23      	ldr	r3, [r4, #32]
 80009ee:	b11b      	cbz	r3, 80009f8 <__sinit+0x14>
 80009f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009f4:	f7ff bff0 	b.w	80009d8 <__sfp_lock_release>
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <__sinit+0x28>)
 80009fa:	6223      	str	r3, [r4, #32]
 80009fc:	4b04      	ldr	r3, [pc, #16]	@ (8000a10 <__sinit+0x2c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d1f5      	bne.n	80009f0 <__sinit+0xc>
 8000a04:	f7ff ffc4 	bl	8000990 <global_stdio_init.part.0>
 8000a08:	e7f2      	b.n	80009f0 <__sinit+0xc>
 8000a0a:	bf00      	nop
 8000a0c:	08000951 	.word	0x08000951
 8000a10:	200001bc 	.word	0x200001bc

08000a14 <_fwalk_sglue>:
 8000a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a18:	4607      	mov	r7, r0
 8000a1a:	4688      	mov	r8, r1
 8000a1c:	4614      	mov	r4, r2
 8000a1e:	2600      	movs	r6, #0
 8000a20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000a24:	f1b9 0901 	subs.w	r9, r9, #1
 8000a28:	d505      	bpl.n	8000a36 <_fwalk_sglue+0x22>
 8000a2a:	6824      	ldr	r4, [r4, #0]
 8000a2c:	2c00      	cmp	r4, #0
 8000a2e:	d1f7      	bne.n	8000a20 <_fwalk_sglue+0xc>
 8000a30:	4630      	mov	r0, r6
 8000a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a36:	89ab      	ldrh	r3, [r5, #12]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d907      	bls.n	8000a4c <_fwalk_sglue+0x38>
 8000a3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000a40:	3301      	adds	r3, #1
 8000a42:	d003      	beq.n	8000a4c <_fwalk_sglue+0x38>
 8000a44:	4629      	mov	r1, r5
 8000a46:	4638      	mov	r0, r7
 8000a48:	47c0      	blx	r8
 8000a4a:	4306      	orrs	r6, r0
 8000a4c:	3568      	adds	r5, #104	@ 0x68
 8000a4e:	e7e9      	b.n	8000a24 <_fwalk_sglue+0x10>

08000a50 <iprintf>:
 8000a50:	b40f      	push	{r0, r1, r2, r3}
 8000a52:	b507      	push	{r0, r1, r2, lr}
 8000a54:	4906      	ldr	r1, [pc, #24]	@ (8000a70 <iprintf+0x20>)
 8000a56:	ab04      	add	r3, sp, #16
 8000a58:	6808      	ldr	r0, [r1, #0]
 8000a5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8000a5e:	6881      	ldr	r1, [r0, #8]
 8000a60:	9301      	str	r3, [sp, #4]
 8000a62:	f000 fadb 	bl	800101c <_vfiprintf_r>
 8000a66:	b003      	add	sp, #12
 8000a68:	f85d eb04 	ldr.w	lr, [sp], #4
 8000a6c:	b004      	add	sp, #16
 8000a6e:	4770      	bx	lr
 8000a70:	20000010 	.word	0x20000010

08000a74 <_puts_r>:
 8000a74:	6a03      	ldr	r3, [r0, #32]
 8000a76:	b570      	push	{r4, r5, r6, lr}
 8000a78:	6884      	ldr	r4, [r0, #8]
 8000a7a:	4605      	mov	r5, r0
 8000a7c:	460e      	mov	r6, r1
 8000a7e:	b90b      	cbnz	r3, 8000a84 <_puts_r+0x10>
 8000a80:	f7ff ffb0 	bl	80009e4 <__sinit>
 8000a84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000a86:	07db      	lsls	r3, r3, #31
 8000a88:	d405      	bmi.n	8000a96 <_puts_r+0x22>
 8000a8a:	89a3      	ldrh	r3, [r4, #12]
 8000a8c:	0598      	lsls	r0, r3, #22
 8000a8e:	d402      	bmi.n	8000a96 <_puts_r+0x22>
 8000a90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000a92:	f000 f99e 	bl	8000dd2 <__retarget_lock_acquire_recursive>
 8000a96:	89a3      	ldrh	r3, [r4, #12]
 8000a98:	0719      	lsls	r1, r3, #28
 8000a9a:	d502      	bpl.n	8000aa2 <_puts_r+0x2e>
 8000a9c:	6923      	ldr	r3, [r4, #16]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d135      	bne.n	8000b0e <_puts_r+0x9a>
 8000aa2:	4621      	mov	r1, r4
 8000aa4:	4628      	mov	r0, r5
 8000aa6:	f000 f8c5 	bl	8000c34 <__swsetup_r>
 8000aaa:	b380      	cbz	r0, 8000b0e <_puts_r+0x9a>
 8000aac:	f04f 35ff 	mov.w	r5, #4294967295
 8000ab0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000ab2:	07da      	lsls	r2, r3, #31
 8000ab4:	d405      	bmi.n	8000ac2 <_puts_r+0x4e>
 8000ab6:	89a3      	ldrh	r3, [r4, #12]
 8000ab8:	059b      	lsls	r3, r3, #22
 8000aba:	d402      	bmi.n	8000ac2 <_puts_r+0x4e>
 8000abc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000abe:	f000 f989 	bl	8000dd4 <__retarget_lock_release_recursive>
 8000ac2:	4628      	mov	r0, r5
 8000ac4:	bd70      	pop	{r4, r5, r6, pc}
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	da04      	bge.n	8000ad4 <_puts_r+0x60>
 8000aca:	69a2      	ldr	r2, [r4, #24]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	dc17      	bgt.n	8000b00 <_puts_r+0x8c>
 8000ad0:	290a      	cmp	r1, #10
 8000ad2:	d015      	beq.n	8000b00 <_puts_r+0x8c>
 8000ad4:	6823      	ldr	r3, [r4, #0]
 8000ad6:	1c5a      	adds	r2, r3, #1
 8000ad8:	6022      	str	r2, [r4, #0]
 8000ada:	7019      	strb	r1, [r3, #0]
 8000adc:	68a3      	ldr	r3, [r4, #8]
 8000ade:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	60a3      	str	r3, [r4, #8]
 8000ae6:	2900      	cmp	r1, #0
 8000ae8:	d1ed      	bne.n	8000ac6 <_puts_r+0x52>
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	da11      	bge.n	8000b12 <_puts_r+0x9e>
 8000aee:	4622      	mov	r2, r4
 8000af0:	210a      	movs	r1, #10
 8000af2:	4628      	mov	r0, r5
 8000af4:	f000 f85f 	bl	8000bb6 <__swbuf_r>
 8000af8:	3001      	adds	r0, #1
 8000afa:	d0d7      	beq.n	8000aac <_puts_r+0x38>
 8000afc:	250a      	movs	r5, #10
 8000afe:	e7d7      	b.n	8000ab0 <_puts_r+0x3c>
 8000b00:	4622      	mov	r2, r4
 8000b02:	4628      	mov	r0, r5
 8000b04:	f000 f857 	bl	8000bb6 <__swbuf_r>
 8000b08:	3001      	adds	r0, #1
 8000b0a:	d1e7      	bne.n	8000adc <_puts_r+0x68>
 8000b0c:	e7ce      	b.n	8000aac <_puts_r+0x38>
 8000b0e:	3e01      	subs	r6, #1
 8000b10:	e7e4      	b.n	8000adc <_puts_r+0x68>
 8000b12:	6823      	ldr	r3, [r4, #0]
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	6022      	str	r2, [r4, #0]
 8000b18:	220a      	movs	r2, #10
 8000b1a:	701a      	strb	r2, [r3, #0]
 8000b1c:	e7ee      	b.n	8000afc <_puts_r+0x88>
	...

08000b20 <puts>:
 8000b20:	4b02      	ldr	r3, [pc, #8]	@ (8000b2c <puts+0xc>)
 8000b22:	4601      	mov	r1, r0
 8000b24:	6818      	ldr	r0, [r3, #0]
 8000b26:	f7ff bfa5 	b.w	8000a74 <_puts_r>
 8000b2a:	bf00      	nop
 8000b2c:	20000010 	.word	0x20000010

08000b30 <__sread>:
 8000b30:	b510      	push	{r4, lr}
 8000b32:	460c      	mov	r4, r1
 8000b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b38:	f000 f8fc 	bl	8000d34 <_read_r>
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	bfab      	itete	ge
 8000b40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000b42:	89a3      	ldrhlt	r3, [r4, #12]
 8000b44:	181b      	addge	r3, r3, r0
 8000b46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000b4a:	bfac      	ite	ge
 8000b4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000b4e:	81a3      	strhlt	r3, [r4, #12]
 8000b50:	bd10      	pop	{r4, pc}

08000b52 <__swrite>:
 8000b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b56:	461f      	mov	r7, r3
 8000b58:	898b      	ldrh	r3, [r1, #12]
 8000b5a:	05db      	lsls	r3, r3, #23
 8000b5c:	4605      	mov	r5, r0
 8000b5e:	460c      	mov	r4, r1
 8000b60:	4616      	mov	r6, r2
 8000b62:	d505      	bpl.n	8000b70 <__swrite+0x1e>
 8000b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b68:	2302      	movs	r3, #2
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f000 f8d0 	bl	8000d10 <_lseek_r>
 8000b70:	89a3      	ldrh	r3, [r4, #12]
 8000b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000b76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000b7a:	81a3      	strh	r3, [r4, #12]
 8000b7c:	4632      	mov	r2, r6
 8000b7e:	463b      	mov	r3, r7
 8000b80:	4628      	mov	r0, r5
 8000b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000b86:	f000 b8e7 	b.w	8000d58 <_write_r>

08000b8a <__sseek>:
 8000b8a:	b510      	push	{r4, lr}
 8000b8c:	460c      	mov	r4, r1
 8000b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b92:	f000 f8bd 	bl	8000d10 <_lseek_r>
 8000b96:	1c43      	adds	r3, r0, #1
 8000b98:	89a3      	ldrh	r3, [r4, #12]
 8000b9a:	bf15      	itete	ne
 8000b9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000b9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000ba2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000ba6:	81a3      	strheq	r3, [r4, #12]
 8000ba8:	bf18      	it	ne
 8000baa:	81a3      	strhne	r3, [r4, #12]
 8000bac:	bd10      	pop	{r4, pc}

08000bae <__sclose>:
 8000bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bb2:	f000 b89d 	b.w	8000cf0 <_close_r>

08000bb6 <__swbuf_r>:
 8000bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bb8:	460e      	mov	r6, r1
 8000bba:	4614      	mov	r4, r2
 8000bbc:	4605      	mov	r5, r0
 8000bbe:	b118      	cbz	r0, 8000bc8 <__swbuf_r+0x12>
 8000bc0:	6a03      	ldr	r3, [r0, #32]
 8000bc2:	b90b      	cbnz	r3, 8000bc8 <__swbuf_r+0x12>
 8000bc4:	f7ff ff0e 	bl	80009e4 <__sinit>
 8000bc8:	69a3      	ldr	r3, [r4, #24]
 8000bca:	60a3      	str	r3, [r4, #8]
 8000bcc:	89a3      	ldrh	r3, [r4, #12]
 8000bce:	071a      	lsls	r2, r3, #28
 8000bd0:	d501      	bpl.n	8000bd6 <__swbuf_r+0x20>
 8000bd2:	6923      	ldr	r3, [r4, #16]
 8000bd4:	b943      	cbnz	r3, 8000be8 <__swbuf_r+0x32>
 8000bd6:	4621      	mov	r1, r4
 8000bd8:	4628      	mov	r0, r5
 8000bda:	f000 f82b 	bl	8000c34 <__swsetup_r>
 8000bde:	b118      	cbz	r0, 8000be8 <__swbuf_r+0x32>
 8000be0:	f04f 37ff 	mov.w	r7, #4294967295
 8000be4:	4638      	mov	r0, r7
 8000be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000be8:	6823      	ldr	r3, [r4, #0]
 8000bea:	6922      	ldr	r2, [r4, #16]
 8000bec:	1a98      	subs	r0, r3, r2
 8000bee:	6963      	ldr	r3, [r4, #20]
 8000bf0:	b2f6      	uxtb	r6, r6
 8000bf2:	4283      	cmp	r3, r0
 8000bf4:	4637      	mov	r7, r6
 8000bf6:	dc05      	bgt.n	8000c04 <__swbuf_r+0x4e>
 8000bf8:	4621      	mov	r1, r4
 8000bfa:	4628      	mov	r0, r5
 8000bfc:	f000 fd38 	bl	8001670 <_fflush_r>
 8000c00:	2800      	cmp	r0, #0
 8000c02:	d1ed      	bne.n	8000be0 <__swbuf_r+0x2a>
 8000c04:	68a3      	ldr	r3, [r4, #8]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	60a3      	str	r3, [r4, #8]
 8000c0a:	6823      	ldr	r3, [r4, #0]
 8000c0c:	1c5a      	adds	r2, r3, #1
 8000c0e:	6022      	str	r2, [r4, #0]
 8000c10:	701e      	strb	r6, [r3, #0]
 8000c12:	6962      	ldr	r2, [r4, #20]
 8000c14:	1c43      	adds	r3, r0, #1
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d004      	beq.n	8000c24 <__swbuf_r+0x6e>
 8000c1a:	89a3      	ldrh	r3, [r4, #12]
 8000c1c:	07db      	lsls	r3, r3, #31
 8000c1e:	d5e1      	bpl.n	8000be4 <__swbuf_r+0x2e>
 8000c20:	2e0a      	cmp	r6, #10
 8000c22:	d1df      	bne.n	8000be4 <__swbuf_r+0x2e>
 8000c24:	4621      	mov	r1, r4
 8000c26:	4628      	mov	r0, r5
 8000c28:	f000 fd22 	bl	8001670 <_fflush_r>
 8000c2c:	2800      	cmp	r0, #0
 8000c2e:	d0d9      	beq.n	8000be4 <__swbuf_r+0x2e>
 8000c30:	e7d6      	b.n	8000be0 <__swbuf_r+0x2a>
	...

08000c34 <__swsetup_r>:
 8000c34:	b538      	push	{r3, r4, r5, lr}
 8000c36:	4b29      	ldr	r3, [pc, #164]	@ (8000cdc <__swsetup_r+0xa8>)
 8000c38:	4605      	mov	r5, r0
 8000c3a:	6818      	ldr	r0, [r3, #0]
 8000c3c:	460c      	mov	r4, r1
 8000c3e:	b118      	cbz	r0, 8000c48 <__swsetup_r+0x14>
 8000c40:	6a03      	ldr	r3, [r0, #32]
 8000c42:	b90b      	cbnz	r3, 8000c48 <__swsetup_r+0x14>
 8000c44:	f7ff fece 	bl	80009e4 <__sinit>
 8000c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c4c:	0719      	lsls	r1, r3, #28
 8000c4e:	d422      	bmi.n	8000c96 <__swsetup_r+0x62>
 8000c50:	06da      	lsls	r2, r3, #27
 8000c52:	d407      	bmi.n	8000c64 <__swsetup_r+0x30>
 8000c54:	2209      	movs	r2, #9
 8000c56:	602a      	str	r2, [r5, #0]
 8000c58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c5c:	81a3      	strh	r3, [r4, #12]
 8000c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c62:	e033      	b.n	8000ccc <__swsetup_r+0x98>
 8000c64:	0758      	lsls	r0, r3, #29
 8000c66:	d512      	bpl.n	8000c8e <__swsetup_r+0x5a>
 8000c68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000c6a:	b141      	cbz	r1, 8000c7e <__swsetup_r+0x4a>
 8000c6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d002      	beq.n	8000c7a <__swsetup_r+0x46>
 8000c74:	4628      	mov	r0, r5
 8000c76:	f000 f8af 	bl	8000dd8 <_free_r>
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8000c7e:	89a3      	ldrh	r3, [r4, #12]
 8000c80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000c84:	81a3      	strh	r3, [r4, #12]
 8000c86:	2300      	movs	r3, #0
 8000c88:	6063      	str	r3, [r4, #4]
 8000c8a:	6923      	ldr	r3, [r4, #16]
 8000c8c:	6023      	str	r3, [r4, #0]
 8000c8e:	89a3      	ldrh	r3, [r4, #12]
 8000c90:	f043 0308 	orr.w	r3, r3, #8
 8000c94:	81a3      	strh	r3, [r4, #12]
 8000c96:	6923      	ldr	r3, [r4, #16]
 8000c98:	b94b      	cbnz	r3, 8000cae <__swsetup_r+0x7a>
 8000c9a:	89a3      	ldrh	r3, [r4, #12]
 8000c9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000ca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ca4:	d003      	beq.n	8000cae <__swsetup_r+0x7a>
 8000ca6:	4621      	mov	r1, r4
 8000ca8:	4628      	mov	r0, r5
 8000caa:	f000 fd2f 	bl	800170c <__smakebuf_r>
 8000cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cb2:	f013 0201 	ands.w	r2, r3, #1
 8000cb6:	d00a      	beq.n	8000cce <__swsetup_r+0x9a>
 8000cb8:	2200      	movs	r2, #0
 8000cba:	60a2      	str	r2, [r4, #8]
 8000cbc:	6962      	ldr	r2, [r4, #20]
 8000cbe:	4252      	negs	r2, r2
 8000cc0:	61a2      	str	r2, [r4, #24]
 8000cc2:	6922      	ldr	r2, [r4, #16]
 8000cc4:	b942      	cbnz	r2, 8000cd8 <__swsetup_r+0xa4>
 8000cc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000cca:	d1c5      	bne.n	8000c58 <__swsetup_r+0x24>
 8000ccc:	bd38      	pop	{r3, r4, r5, pc}
 8000cce:	0799      	lsls	r1, r3, #30
 8000cd0:	bf58      	it	pl
 8000cd2:	6962      	ldrpl	r2, [r4, #20]
 8000cd4:	60a2      	str	r2, [r4, #8]
 8000cd6:	e7f4      	b.n	8000cc2 <__swsetup_r+0x8e>
 8000cd8:	2000      	movs	r0, #0
 8000cda:	e7f7      	b.n	8000ccc <__swsetup_r+0x98>
 8000cdc:	20000010 	.word	0x20000010

08000ce0 <memset>:
 8000ce0:	4402      	add	r2, r0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d100      	bne.n	8000cea <memset+0xa>
 8000ce8:	4770      	bx	lr
 8000cea:	f803 1b01 	strb.w	r1, [r3], #1
 8000cee:	e7f9      	b.n	8000ce4 <memset+0x4>

08000cf0 <_close_r>:
 8000cf0:	b538      	push	{r3, r4, r5, lr}
 8000cf2:	4d06      	ldr	r5, [pc, #24]	@ (8000d0c <_close_r+0x1c>)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	4604      	mov	r4, r0
 8000cf8:	4608      	mov	r0, r1
 8000cfa:	602b      	str	r3, [r5, #0]
 8000cfc:	f7ff fd2c 	bl	8000758 <_close>
 8000d00:	1c43      	adds	r3, r0, #1
 8000d02:	d102      	bne.n	8000d0a <_close_r+0x1a>
 8000d04:	682b      	ldr	r3, [r5, #0]
 8000d06:	b103      	cbz	r3, 8000d0a <_close_r+0x1a>
 8000d08:	6023      	str	r3, [r4, #0]
 8000d0a:	bd38      	pop	{r3, r4, r5, pc}
 8000d0c:	200001c0 	.word	0x200001c0

08000d10 <_lseek_r>:
 8000d10:	b538      	push	{r3, r4, r5, lr}
 8000d12:	4d07      	ldr	r5, [pc, #28]	@ (8000d30 <_lseek_r+0x20>)
 8000d14:	4604      	mov	r4, r0
 8000d16:	4608      	mov	r0, r1
 8000d18:	4611      	mov	r1, r2
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	602a      	str	r2, [r5, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	f7ff fd41 	bl	80007a6 <_lseek>
 8000d24:	1c43      	adds	r3, r0, #1
 8000d26:	d102      	bne.n	8000d2e <_lseek_r+0x1e>
 8000d28:	682b      	ldr	r3, [r5, #0]
 8000d2a:	b103      	cbz	r3, 8000d2e <_lseek_r+0x1e>
 8000d2c:	6023      	str	r3, [r4, #0]
 8000d2e:	bd38      	pop	{r3, r4, r5, pc}
 8000d30:	200001c0 	.word	0x200001c0

08000d34 <_read_r>:
 8000d34:	b538      	push	{r3, r4, r5, lr}
 8000d36:	4d07      	ldr	r5, [pc, #28]	@ (8000d54 <_read_r+0x20>)
 8000d38:	4604      	mov	r4, r0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	2200      	movs	r2, #0
 8000d40:	602a      	str	r2, [r5, #0]
 8000d42:	461a      	mov	r2, r3
 8000d44:	f7ff fccf 	bl	80006e6 <_read>
 8000d48:	1c43      	adds	r3, r0, #1
 8000d4a:	d102      	bne.n	8000d52 <_read_r+0x1e>
 8000d4c:	682b      	ldr	r3, [r5, #0]
 8000d4e:	b103      	cbz	r3, 8000d52 <_read_r+0x1e>
 8000d50:	6023      	str	r3, [r4, #0]
 8000d52:	bd38      	pop	{r3, r4, r5, pc}
 8000d54:	200001c0 	.word	0x200001c0

08000d58 <_write_r>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	4d07      	ldr	r5, [pc, #28]	@ (8000d78 <_write_r+0x20>)
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	4608      	mov	r0, r1
 8000d60:	4611      	mov	r1, r2
 8000d62:	2200      	movs	r2, #0
 8000d64:	602a      	str	r2, [r5, #0]
 8000d66:	461a      	mov	r2, r3
 8000d68:	f7ff fcda 	bl	8000720 <_write>
 8000d6c:	1c43      	adds	r3, r0, #1
 8000d6e:	d102      	bne.n	8000d76 <_write_r+0x1e>
 8000d70:	682b      	ldr	r3, [r5, #0]
 8000d72:	b103      	cbz	r3, 8000d76 <_write_r+0x1e>
 8000d74:	6023      	str	r3, [r4, #0]
 8000d76:	bd38      	pop	{r3, r4, r5, pc}
 8000d78:	200001c0 	.word	0x200001c0

08000d7c <__errno>:
 8000d7c:	4b01      	ldr	r3, [pc, #4]	@ (8000d84 <__errno+0x8>)
 8000d7e:	6818      	ldr	r0, [r3, #0]
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000010 	.word	0x20000010

08000d88 <__libc_init_array>:
 8000d88:	b570      	push	{r4, r5, r6, lr}
 8000d8a:	4d0d      	ldr	r5, [pc, #52]	@ (8000dc0 <__libc_init_array+0x38>)
 8000d8c:	4c0d      	ldr	r4, [pc, #52]	@ (8000dc4 <__libc_init_array+0x3c>)
 8000d8e:	1b64      	subs	r4, r4, r5
 8000d90:	10a4      	asrs	r4, r4, #2
 8000d92:	2600      	movs	r6, #0
 8000d94:	42a6      	cmp	r6, r4
 8000d96:	d109      	bne.n	8000dac <__libc_init_array+0x24>
 8000d98:	4d0b      	ldr	r5, [pc, #44]	@ (8000dc8 <__libc_init_array+0x40>)
 8000d9a:	4c0c      	ldr	r4, [pc, #48]	@ (8000dcc <__libc_init_array+0x44>)
 8000d9c:	f000 fd24 	bl	80017e8 <_init>
 8000da0:	1b64      	subs	r4, r4, r5
 8000da2:	10a4      	asrs	r4, r4, #2
 8000da4:	2600      	movs	r6, #0
 8000da6:	42a6      	cmp	r6, r4
 8000da8:	d105      	bne.n	8000db6 <__libc_init_array+0x2e>
 8000daa:	bd70      	pop	{r4, r5, r6, pc}
 8000dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8000db0:	4798      	blx	r3
 8000db2:	3601      	adds	r6, #1
 8000db4:	e7ee      	b.n	8000d94 <__libc_init_array+0xc>
 8000db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dba:	4798      	blx	r3
 8000dbc:	3601      	adds	r6, #1
 8000dbe:	e7f2      	b.n	8000da6 <__libc_init_array+0x1e>
 8000dc0:	08001858 	.word	0x08001858
 8000dc4:	08001858 	.word	0x08001858
 8000dc8:	08001858 	.word	0x08001858
 8000dcc:	0800185c 	.word	0x0800185c

08000dd0 <__retarget_lock_init_recursive>:
 8000dd0:	4770      	bx	lr

08000dd2 <__retarget_lock_acquire_recursive>:
 8000dd2:	4770      	bx	lr

08000dd4 <__retarget_lock_release_recursive>:
 8000dd4:	4770      	bx	lr
	...

08000dd8 <_free_r>:
 8000dd8:	b538      	push	{r3, r4, r5, lr}
 8000dda:	4605      	mov	r5, r0
 8000ddc:	2900      	cmp	r1, #0
 8000dde:	d041      	beq.n	8000e64 <_free_r+0x8c>
 8000de0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000de4:	1f0c      	subs	r4, r1, #4
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	bfb8      	it	lt
 8000dea:	18e4      	addlt	r4, r4, r3
 8000dec:	f000 f8e0 	bl	8000fb0 <__malloc_lock>
 8000df0:	4a1d      	ldr	r2, [pc, #116]	@ (8000e68 <_free_r+0x90>)
 8000df2:	6813      	ldr	r3, [r2, #0]
 8000df4:	b933      	cbnz	r3, 8000e04 <_free_r+0x2c>
 8000df6:	6063      	str	r3, [r4, #4]
 8000df8:	6014      	str	r4, [r2, #0]
 8000dfa:	4628      	mov	r0, r5
 8000dfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e00:	f000 b8dc 	b.w	8000fbc <__malloc_unlock>
 8000e04:	42a3      	cmp	r3, r4
 8000e06:	d908      	bls.n	8000e1a <_free_r+0x42>
 8000e08:	6820      	ldr	r0, [r4, #0]
 8000e0a:	1821      	adds	r1, r4, r0
 8000e0c:	428b      	cmp	r3, r1
 8000e0e:	bf01      	itttt	eq
 8000e10:	6819      	ldreq	r1, [r3, #0]
 8000e12:	685b      	ldreq	r3, [r3, #4]
 8000e14:	1809      	addeq	r1, r1, r0
 8000e16:	6021      	streq	r1, [r4, #0]
 8000e18:	e7ed      	b.n	8000df6 <_free_r+0x1e>
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	b10b      	cbz	r3, 8000e24 <_free_r+0x4c>
 8000e20:	42a3      	cmp	r3, r4
 8000e22:	d9fa      	bls.n	8000e1a <_free_r+0x42>
 8000e24:	6811      	ldr	r1, [r2, #0]
 8000e26:	1850      	adds	r0, r2, r1
 8000e28:	42a0      	cmp	r0, r4
 8000e2a:	d10b      	bne.n	8000e44 <_free_r+0x6c>
 8000e2c:	6820      	ldr	r0, [r4, #0]
 8000e2e:	4401      	add	r1, r0
 8000e30:	1850      	adds	r0, r2, r1
 8000e32:	4283      	cmp	r3, r0
 8000e34:	6011      	str	r1, [r2, #0]
 8000e36:	d1e0      	bne.n	8000dfa <_free_r+0x22>
 8000e38:	6818      	ldr	r0, [r3, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	6053      	str	r3, [r2, #4]
 8000e3e:	4408      	add	r0, r1
 8000e40:	6010      	str	r0, [r2, #0]
 8000e42:	e7da      	b.n	8000dfa <_free_r+0x22>
 8000e44:	d902      	bls.n	8000e4c <_free_r+0x74>
 8000e46:	230c      	movs	r3, #12
 8000e48:	602b      	str	r3, [r5, #0]
 8000e4a:	e7d6      	b.n	8000dfa <_free_r+0x22>
 8000e4c:	6820      	ldr	r0, [r4, #0]
 8000e4e:	1821      	adds	r1, r4, r0
 8000e50:	428b      	cmp	r3, r1
 8000e52:	bf04      	itt	eq
 8000e54:	6819      	ldreq	r1, [r3, #0]
 8000e56:	685b      	ldreq	r3, [r3, #4]
 8000e58:	6063      	str	r3, [r4, #4]
 8000e5a:	bf04      	itt	eq
 8000e5c:	1809      	addeq	r1, r1, r0
 8000e5e:	6021      	streq	r1, [r4, #0]
 8000e60:	6054      	str	r4, [r2, #4]
 8000e62:	e7ca      	b.n	8000dfa <_free_r+0x22>
 8000e64:	bd38      	pop	{r3, r4, r5, pc}
 8000e66:	bf00      	nop
 8000e68:	200001cc 	.word	0x200001cc

08000e6c <sbrk_aligned>:
 8000e6c:	b570      	push	{r4, r5, r6, lr}
 8000e6e:	4e0f      	ldr	r6, [pc, #60]	@ (8000eac <sbrk_aligned+0x40>)
 8000e70:	460c      	mov	r4, r1
 8000e72:	6831      	ldr	r1, [r6, #0]
 8000e74:	4605      	mov	r5, r0
 8000e76:	b911      	cbnz	r1, 8000e7e <sbrk_aligned+0x12>
 8000e78:	f000 fca6 	bl	80017c8 <_sbrk_r>
 8000e7c:	6030      	str	r0, [r6, #0]
 8000e7e:	4621      	mov	r1, r4
 8000e80:	4628      	mov	r0, r5
 8000e82:	f000 fca1 	bl	80017c8 <_sbrk_r>
 8000e86:	1c43      	adds	r3, r0, #1
 8000e88:	d103      	bne.n	8000e92 <sbrk_aligned+0x26>
 8000e8a:	f04f 34ff 	mov.w	r4, #4294967295
 8000e8e:	4620      	mov	r0, r4
 8000e90:	bd70      	pop	{r4, r5, r6, pc}
 8000e92:	1cc4      	adds	r4, r0, #3
 8000e94:	f024 0403 	bic.w	r4, r4, #3
 8000e98:	42a0      	cmp	r0, r4
 8000e9a:	d0f8      	beq.n	8000e8e <sbrk_aligned+0x22>
 8000e9c:	1a21      	subs	r1, r4, r0
 8000e9e:	4628      	mov	r0, r5
 8000ea0:	f000 fc92 	bl	80017c8 <_sbrk_r>
 8000ea4:	3001      	adds	r0, #1
 8000ea6:	d1f2      	bne.n	8000e8e <sbrk_aligned+0x22>
 8000ea8:	e7ef      	b.n	8000e8a <sbrk_aligned+0x1e>
 8000eaa:	bf00      	nop
 8000eac:	200001c8 	.word	0x200001c8

08000eb0 <_malloc_r>:
 8000eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000eb4:	1ccd      	adds	r5, r1, #3
 8000eb6:	f025 0503 	bic.w	r5, r5, #3
 8000eba:	3508      	adds	r5, #8
 8000ebc:	2d0c      	cmp	r5, #12
 8000ebe:	bf38      	it	cc
 8000ec0:	250c      	movcc	r5, #12
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	db01      	blt.n	8000ecc <_malloc_r+0x1c>
 8000ec8:	42a9      	cmp	r1, r5
 8000eca:	d904      	bls.n	8000ed6 <_malloc_r+0x26>
 8000ecc:	230c      	movs	r3, #12
 8000ece:	6033      	str	r3, [r6, #0]
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ed6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000fac <_malloc_r+0xfc>
 8000eda:	f000 f869 	bl	8000fb0 <__malloc_lock>
 8000ede:	f8d8 3000 	ldr.w	r3, [r8]
 8000ee2:	461c      	mov	r4, r3
 8000ee4:	bb44      	cbnz	r4, 8000f38 <_malloc_r+0x88>
 8000ee6:	4629      	mov	r1, r5
 8000ee8:	4630      	mov	r0, r6
 8000eea:	f7ff ffbf 	bl	8000e6c <sbrk_aligned>
 8000eee:	1c43      	adds	r3, r0, #1
 8000ef0:	4604      	mov	r4, r0
 8000ef2:	d158      	bne.n	8000fa6 <_malloc_r+0xf6>
 8000ef4:	f8d8 4000 	ldr.w	r4, [r8]
 8000ef8:	4627      	mov	r7, r4
 8000efa:	2f00      	cmp	r7, #0
 8000efc:	d143      	bne.n	8000f86 <_malloc_r+0xd6>
 8000efe:	2c00      	cmp	r4, #0
 8000f00:	d04b      	beq.n	8000f9a <_malloc_r+0xea>
 8000f02:	6823      	ldr	r3, [r4, #0]
 8000f04:	4639      	mov	r1, r7
 8000f06:	4630      	mov	r0, r6
 8000f08:	eb04 0903 	add.w	r9, r4, r3
 8000f0c:	f000 fc5c 	bl	80017c8 <_sbrk_r>
 8000f10:	4581      	cmp	r9, r0
 8000f12:	d142      	bne.n	8000f9a <_malloc_r+0xea>
 8000f14:	6821      	ldr	r1, [r4, #0]
 8000f16:	1a6d      	subs	r5, r5, r1
 8000f18:	4629      	mov	r1, r5
 8000f1a:	4630      	mov	r0, r6
 8000f1c:	f7ff ffa6 	bl	8000e6c <sbrk_aligned>
 8000f20:	3001      	adds	r0, #1
 8000f22:	d03a      	beq.n	8000f9a <_malloc_r+0xea>
 8000f24:	6823      	ldr	r3, [r4, #0]
 8000f26:	442b      	add	r3, r5
 8000f28:	6023      	str	r3, [r4, #0]
 8000f2a:	f8d8 3000 	ldr.w	r3, [r8]
 8000f2e:	685a      	ldr	r2, [r3, #4]
 8000f30:	bb62      	cbnz	r2, 8000f8c <_malloc_r+0xdc>
 8000f32:	f8c8 7000 	str.w	r7, [r8]
 8000f36:	e00f      	b.n	8000f58 <_malloc_r+0xa8>
 8000f38:	6822      	ldr	r2, [r4, #0]
 8000f3a:	1b52      	subs	r2, r2, r5
 8000f3c:	d420      	bmi.n	8000f80 <_malloc_r+0xd0>
 8000f3e:	2a0b      	cmp	r2, #11
 8000f40:	d917      	bls.n	8000f72 <_malloc_r+0xc2>
 8000f42:	1961      	adds	r1, r4, r5
 8000f44:	42a3      	cmp	r3, r4
 8000f46:	6025      	str	r5, [r4, #0]
 8000f48:	bf18      	it	ne
 8000f4a:	6059      	strne	r1, [r3, #4]
 8000f4c:	6863      	ldr	r3, [r4, #4]
 8000f4e:	bf08      	it	eq
 8000f50:	f8c8 1000 	streq.w	r1, [r8]
 8000f54:	5162      	str	r2, [r4, r5]
 8000f56:	604b      	str	r3, [r1, #4]
 8000f58:	4630      	mov	r0, r6
 8000f5a:	f000 f82f 	bl	8000fbc <__malloc_unlock>
 8000f5e:	f104 000b 	add.w	r0, r4, #11
 8000f62:	1d23      	adds	r3, r4, #4
 8000f64:	f020 0007 	bic.w	r0, r0, #7
 8000f68:	1ac2      	subs	r2, r0, r3
 8000f6a:	bf1c      	itt	ne
 8000f6c:	1a1b      	subne	r3, r3, r0
 8000f6e:	50a3      	strne	r3, [r4, r2]
 8000f70:	e7af      	b.n	8000ed2 <_malloc_r+0x22>
 8000f72:	6862      	ldr	r2, [r4, #4]
 8000f74:	42a3      	cmp	r3, r4
 8000f76:	bf0c      	ite	eq
 8000f78:	f8c8 2000 	streq.w	r2, [r8]
 8000f7c:	605a      	strne	r2, [r3, #4]
 8000f7e:	e7eb      	b.n	8000f58 <_malloc_r+0xa8>
 8000f80:	4623      	mov	r3, r4
 8000f82:	6864      	ldr	r4, [r4, #4]
 8000f84:	e7ae      	b.n	8000ee4 <_malloc_r+0x34>
 8000f86:	463c      	mov	r4, r7
 8000f88:	687f      	ldr	r7, [r7, #4]
 8000f8a:	e7b6      	b.n	8000efa <_malloc_r+0x4a>
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	42a3      	cmp	r3, r4
 8000f92:	d1fb      	bne.n	8000f8c <_malloc_r+0xdc>
 8000f94:	2300      	movs	r3, #0
 8000f96:	6053      	str	r3, [r2, #4]
 8000f98:	e7de      	b.n	8000f58 <_malloc_r+0xa8>
 8000f9a:	230c      	movs	r3, #12
 8000f9c:	6033      	str	r3, [r6, #0]
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	f000 f80c 	bl	8000fbc <__malloc_unlock>
 8000fa4:	e794      	b.n	8000ed0 <_malloc_r+0x20>
 8000fa6:	6005      	str	r5, [r0, #0]
 8000fa8:	e7d6      	b.n	8000f58 <_malloc_r+0xa8>
 8000faa:	bf00      	nop
 8000fac:	200001cc 	.word	0x200001cc

08000fb0 <__malloc_lock>:
 8000fb0:	4801      	ldr	r0, [pc, #4]	@ (8000fb8 <__malloc_lock+0x8>)
 8000fb2:	f7ff bf0e 	b.w	8000dd2 <__retarget_lock_acquire_recursive>
 8000fb6:	bf00      	nop
 8000fb8:	200001c4 	.word	0x200001c4

08000fbc <__malloc_unlock>:
 8000fbc:	4801      	ldr	r0, [pc, #4]	@ (8000fc4 <__malloc_unlock+0x8>)
 8000fbe:	f7ff bf09 	b.w	8000dd4 <__retarget_lock_release_recursive>
 8000fc2:	bf00      	nop
 8000fc4:	200001c4 	.word	0x200001c4

08000fc8 <__sfputc_r>:
 8000fc8:	6893      	ldr	r3, [r2, #8]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	b410      	push	{r4}
 8000fd0:	6093      	str	r3, [r2, #8]
 8000fd2:	da08      	bge.n	8000fe6 <__sfputc_r+0x1e>
 8000fd4:	6994      	ldr	r4, [r2, #24]
 8000fd6:	42a3      	cmp	r3, r4
 8000fd8:	db01      	blt.n	8000fde <__sfputc_r+0x16>
 8000fda:	290a      	cmp	r1, #10
 8000fdc:	d103      	bne.n	8000fe6 <__sfputc_r+0x1e>
 8000fde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fe2:	f7ff bde8 	b.w	8000bb6 <__swbuf_r>
 8000fe6:	6813      	ldr	r3, [r2, #0]
 8000fe8:	1c58      	adds	r0, r3, #1
 8000fea:	6010      	str	r0, [r2, #0]
 8000fec:	7019      	strb	r1, [r3, #0]
 8000fee:	4608      	mov	r0, r1
 8000ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <__sfputs_r>:
 8000ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff8:	4606      	mov	r6, r0
 8000ffa:	460f      	mov	r7, r1
 8000ffc:	4614      	mov	r4, r2
 8000ffe:	18d5      	adds	r5, r2, r3
 8001000:	42ac      	cmp	r4, r5
 8001002:	d101      	bne.n	8001008 <__sfputs_r+0x12>
 8001004:	2000      	movs	r0, #0
 8001006:	e007      	b.n	8001018 <__sfputs_r+0x22>
 8001008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800100c:	463a      	mov	r2, r7
 800100e:	4630      	mov	r0, r6
 8001010:	f7ff ffda 	bl	8000fc8 <__sfputc_r>
 8001014:	1c43      	adds	r3, r0, #1
 8001016:	d1f3      	bne.n	8001000 <__sfputs_r+0xa>
 8001018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800101c <_vfiprintf_r>:
 800101c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001020:	460d      	mov	r5, r1
 8001022:	b09d      	sub	sp, #116	@ 0x74
 8001024:	4614      	mov	r4, r2
 8001026:	4698      	mov	r8, r3
 8001028:	4606      	mov	r6, r0
 800102a:	b118      	cbz	r0, 8001034 <_vfiprintf_r+0x18>
 800102c:	6a03      	ldr	r3, [r0, #32]
 800102e:	b90b      	cbnz	r3, 8001034 <_vfiprintf_r+0x18>
 8001030:	f7ff fcd8 	bl	80009e4 <__sinit>
 8001034:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001036:	07d9      	lsls	r1, r3, #31
 8001038:	d405      	bmi.n	8001046 <_vfiprintf_r+0x2a>
 800103a:	89ab      	ldrh	r3, [r5, #12]
 800103c:	059a      	lsls	r2, r3, #22
 800103e:	d402      	bmi.n	8001046 <_vfiprintf_r+0x2a>
 8001040:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001042:	f7ff fec6 	bl	8000dd2 <__retarget_lock_acquire_recursive>
 8001046:	89ab      	ldrh	r3, [r5, #12]
 8001048:	071b      	lsls	r3, r3, #28
 800104a:	d501      	bpl.n	8001050 <_vfiprintf_r+0x34>
 800104c:	692b      	ldr	r3, [r5, #16]
 800104e:	b99b      	cbnz	r3, 8001078 <_vfiprintf_r+0x5c>
 8001050:	4629      	mov	r1, r5
 8001052:	4630      	mov	r0, r6
 8001054:	f7ff fdee 	bl	8000c34 <__swsetup_r>
 8001058:	b170      	cbz	r0, 8001078 <_vfiprintf_r+0x5c>
 800105a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800105c:	07dc      	lsls	r4, r3, #31
 800105e:	d504      	bpl.n	800106a <_vfiprintf_r+0x4e>
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	b01d      	add	sp, #116	@ 0x74
 8001066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800106a:	89ab      	ldrh	r3, [r5, #12]
 800106c:	0598      	lsls	r0, r3, #22
 800106e:	d4f7      	bmi.n	8001060 <_vfiprintf_r+0x44>
 8001070:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001072:	f7ff feaf 	bl	8000dd4 <__retarget_lock_release_recursive>
 8001076:	e7f3      	b.n	8001060 <_vfiprintf_r+0x44>
 8001078:	2300      	movs	r3, #0
 800107a:	9309      	str	r3, [sp, #36]	@ 0x24
 800107c:	2320      	movs	r3, #32
 800107e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001082:	f8cd 800c 	str.w	r8, [sp, #12]
 8001086:	2330      	movs	r3, #48	@ 0x30
 8001088:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001238 <_vfiprintf_r+0x21c>
 800108c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001090:	f04f 0901 	mov.w	r9, #1
 8001094:	4623      	mov	r3, r4
 8001096:	469a      	mov	sl, r3
 8001098:	f813 2b01 	ldrb.w	r2, [r3], #1
 800109c:	b10a      	cbz	r2, 80010a2 <_vfiprintf_r+0x86>
 800109e:	2a25      	cmp	r2, #37	@ 0x25
 80010a0:	d1f9      	bne.n	8001096 <_vfiprintf_r+0x7a>
 80010a2:	ebba 0b04 	subs.w	fp, sl, r4
 80010a6:	d00b      	beq.n	80010c0 <_vfiprintf_r+0xa4>
 80010a8:	465b      	mov	r3, fp
 80010aa:	4622      	mov	r2, r4
 80010ac:	4629      	mov	r1, r5
 80010ae:	4630      	mov	r0, r6
 80010b0:	f7ff ffa1 	bl	8000ff6 <__sfputs_r>
 80010b4:	3001      	adds	r0, #1
 80010b6:	f000 80a7 	beq.w	8001208 <_vfiprintf_r+0x1ec>
 80010ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80010bc:	445a      	add	r2, fp
 80010be:	9209      	str	r2, [sp, #36]	@ 0x24
 80010c0:	f89a 3000 	ldrb.w	r3, [sl]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 809f 	beq.w	8001208 <_vfiprintf_r+0x1ec>
 80010ca:	2300      	movs	r3, #0
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295
 80010d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80010d4:	f10a 0a01 	add.w	sl, sl, #1
 80010d8:	9304      	str	r3, [sp, #16]
 80010da:	9307      	str	r3, [sp, #28]
 80010dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80010e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80010e2:	4654      	mov	r4, sl
 80010e4:	2205      	movs	r2, #5
 80010e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010ea:	4853      	ldr	r0, [pc, #332]	@ (8001238 <_vfiprintf_r+0x21c>)
 80010ec:	f7ff f890 	bl	8000210 <memchr>
 80010f0:	9a04      	ldr	r2, [sp, #16]
 80010f2:	b9d8      	cbnz	r0, 800112c <_vfiprintf_r+0x110>
 80010f4:	06d1      	lsls	r1, r2, #27
 80010f6:	bf44      	itt	mi
 80010f8:	2320      	movmi	r3, #32
 80010fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80010fe:	0713      	lsls	r3, r2, #28
 8001100:	bf44      	itt	mi
 8001102:	232b      	movmi	r3, #43	@ 0x2b
 8001104:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001108:	f89a 3000 	ldrb.w	r3, [sl]
 800110c:	2b2a      	cmp	r3, #42	@ 0x2a
 800110e:	d015      	beq.n	800113c <_vfiprintf_r+0x120>
 8001110:	9a07      	ldr	r2, [sp, #28]
 8001112:	4654      	mov	r4, sl
 8001114:	2000      	movs	r0, #0
 8001116:	f04f 0c0a 	mov.w	ip, #10
 800111a:	4621      	mov	r1, r4
 800111c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001120:	3b30      	subs	r3, #48	@ 0x30
 8001122:	2b09      	cmp	r3, #9
 8001124:	d94b      	bls.n	80011be <_vfiprintf_r+0x1a2>
 8001126:	b1b0      	cbz	r0, 8001156 <_vfiprintf_r+0x13a>
 8001128:	9207      	str	r2, [sp, #28]
 800112a:	e014      	b.n	8001156 <_vfiprintf_r+0x13a>
 800112c:	eba0 0308 	sub.w	r3, r0, r8
 8001130:	fa09 f303 	lsl.w	r3, r9, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	9304      	str	r3, [sp, #16]
 8001138:	46a2      	mov	sl, r4
 800113a:	e7d2      	b.n	80010e2 <_vfiprintf_r+0xc6>
 800113c:	9b03      	ldr	r3, [sp, #12]
 800113e:	1d19      	adds	r1, r3, #4
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	9103      	str	r1, [sp, #12]
 8001144:	2b00      	cmp	r3, #0
 8001146:	bfbb      	ittet	lt
 8001148:	425b      	neglt	r3, r3
 800114a:	f042 0202 	orrlt.w	r2, r2, #2
 800114e:	9307      	strge	r3, [sp, #28]
 8001150:	9307      	strlt	r3, [sp, #28]
 8001152:	bfb8      	it	lt
 8001154:	9204      	strlt	r2, [sp, #16]
 8001156:	7823      	ldrb	r3, [r4, #0]
 8001158:	2b2e      	cmp	r3, #46	@ 0x2e
 800115a:	d10a      	bne.n	8001172 <_vfiprintf_r+0x156>
 800115c:	7863      	ldrb	r3, [r4, #1]
 800115e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001160:	d132      	bne.n	80011c8 <_vfiprintf_r+0x1ac>
 8001162:	9b03      	ldr	r3, [sp, #12]
 8001164:	1d1a      	adds	r2, r3, #4
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	9203      	str	r2, [sp, #12]
 800116a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800116e:	3402      	adds	r4, #2
 8001170:	9305      	str	r3, [sp, #20]
 8001172:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001248 <_vfiprintf_r+0x22c>
 8001176:	7821      	ldrb	r1, [r4, #0]
 8001178:	2203      	movs	r2, #3
 800117a:	4650      	mov	r0, sl
 800117c:	f7ff f848 	bl	8000210 <memchr>
 8001180:	b138      	cbz	r0, 8001192 <_vfiprintf_r+0x176>
 8001182:	9b04      	ldr	r3, [sp, #16]
 8001184:	eba0 000a 	sub.w	r0, r0, sl
 8001188:	2240      	movs	r2, #64	@ 0x40
 800118a:	4082      	lsls	r2, r0
 800118c:	4313      	orrs	r3, r2
 800118e:	3401      	adds	r4, #1
 8001190:	9304      	str	r3, [sp, #16]
 8001192:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001196:	4829      	ldr	r0, [pc, #164]	@ (800123c <_vfiprintf_r+0x220>)
 8001198:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800119c:	2206      	movs	r2, #6
 800119e:	f7ff f837 	bl	8000210 <memchr>
 80011a2:	2800      	cmp	r0, #0
 80011a4:	d03f      	beq.n	8001226 <_vfiprintf_r+0x20a>
 80011a6:	4b26      	ldr	r3, [pc, #152]	@ (8001240 <_vfiprintf_r+0x224>)
 80011a8:	bb1b      	cbnz	r3, 80011f2 <_vfiprintf_r+0x1d6>
 80011aa:	9b03      	ldr	r3, [sp, #12]
 80011ac:	3307      	adds	r3, #7
 80011ae:	f023 0307 	bic.w	r3, r3, #7
 80011b2:	3308      	adds	r3, #8
 80011b4:	9303      	str	r3, [sp, #12]
 80011b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80011b8:	443b      	add	r3, r7
 80011ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80011bc:	e76a      	b.n	8001094 <_vfiprintf_r+0x78>
 80011be:	fb0c 3202 	mla	r2, ip, r2, r3
 80011c2:	460c      	mov	r4, r1
 80011c4:	2001      	movs	r0, #1
 80011c6:	e7a8      	b.n	800111a <_vfiprintf_r+0xfe>
 80011c8:	2300      	movs	r3, #0
 80011ca:	3401      	adds	r4, #1
 80011cc:	9305      	str	r3, [sp, #20]
 80011ce:	4619      	mov	r1, r3
 80011d0:	f04f 0c0a 	mov.w	ip, #10
 80011d4:	4620      	mov	r0, r4
 80011d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80011da:	3a30      	subs	r2, #48	@ 0x30
 80011dc:	2a09      	cmp	r2, #9
 80011de:	d903      	bls.n	80011e8 <_vfiprintf_r+0x1cc>
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0c6      	beq.n	8001172 <_vfiprintf_r+0x156>
 80011e4:	9105      	str	r1, [sp, #20]
 80011e6:	e7c4      	b.n	8001172 <_vfiprintf_r+0x156>
 80011e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80011ec:	4604      	mov	r4, r0
 80011ee:	2301      	movs	r3, #1
 80011f0:	e7f0      	b.n	80011d4 <_vfiprintf_r+0x1b8>
 80011f2:	ab03      	add	r3, sp, #12
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	462a      	mov	r2, r5
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <_vfiprintf_r+0x228>)
 80011fa:	a904      	add	r1, sp, #16
 80011fc:	4630      	mov	r0, r6
 80011fe:	f3af 8000 	nop.w
 8001202:	4607      	mov	r7, r0
 8001204:	1c78      	adds	r0, r7, #1
 8001206:	d1d6      	bne.n	80011b6 <_vfiprintf_r+0x19a>
 8001208:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800120a:	07d9      	lsls	r1, r3, #31
 800120c:	d405      	bmi.n	800121a <_vfiprintf_r+0x1fe>
 800120e:	89ab      	ldrh	r3, [r5, #12]
 8001210:	059a      	lsls	r2, r3, #22
 8001212:	d402      	bmi.n	800121a <_vfiprintf_r+0x1fe>
 8001214:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001216:	f7ff fddd 	bl	8000dd4 <__retarget_lock_release_recursive>
 800121a:	89ab      	ldrh	r3, [r5, #12]
 800121c:	065b      	lsls	r3, r3, #25
 800121e:	f53f af1f 	bmi.w	8001060 <_vfiprintf_r+0x44>
 8001222:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001224:	e71e      	b.n	8001064 <_vfiprintf_r+0x48>
 8001226:	ab03      	add	r3, sp, #12
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	462a      	mov	r2, r5
 800122c:	4b05      	ldr	r3, [pc, #20]	@ (8001244 <_vfiprintf_r+0x228>)
 800122e:	a904      	add	r1, sp, #16
 8001230:	4630      	mov	r0, r6
 8001232:	f000 f879 	bl	8001328 <_printf_i>
 8001236:	e7e4      	b.n	8001202 <_vfiprintf_r+0x1e6>
 8001238:	0800181a 	.word	0x0800181a
 800123c:	08001824 	.word	0x08001824
 8001240:	00000000 	.word	0x00000000
 8001244:	08000ff7 	.word	0x08000ff7
 8001248:	08001820 	.word	0x08001820

0800124c <_printf_common>:
 800124c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001250:	4616      	mov	r6, r2
 8001252:	4698      	mov	r8, r3
 8001254:	688a      	ldr	r2, [r1, #8]
 8001256:	690b      	ldr	r3, [r1, #16]
 8001258:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800125c:	4293      	cmp	r3, r2
 800125e:	bfb8      	it	lt
 8001260:	4613      	movlt	r3, r2
 8001262:	6033      	str	r3, [r6, #0]
 8001264:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001268:	4607      	mov	r7, r0
 800126a:	460c      	mov	r4, r1
 800126c:	b10a      	cbz	r2, 8001272 <_printf_common+0x26>
 800126e:	3301      	adds	r3, #1
 8001270:	6033      	str	r3, [r6, #0]
 8001272:	6823      	ldr	r3, [r4, #0]
 8001274:	0699      	lsls	r1, r3, #26
 8001276:	bf42      	ittt	mi
 8001278:	6833      	ldrmi	r3, [r6, #0]
 800127a:	3302      	addmi	r3, #2
 800127c:	6033      	strmi	r3, [r6, #0]
 800127e:	6825      	ldr	r5, [r4, #0]
 8001280:	f015 0506 	ands.w	r5, r5, #6
 8001284:	d106      	bne.n	8001294 <_printf_common+0x48>
 8001286:	f104 0a19 	add.w	sl, r4, #25
 800128a:	68e3      	ldr	r3, [r4, #12]
 800128c:	6832      	ldr	r2, [r6, #0]
 800128e:	1a9b      	subs	r3, r3, r2
 8001290:	42ab      	cmp	r3, r5
 8001292:	dc26      	bgt.n	80012e2 <_printf_common+0x96>
 8001294:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001298:	6822      	ldr	r2, [r4, #0]
 800129a:	3b00      	subs	r3, #0
 800129c:	bf18      	it	ne
 800129e:	2301      	movne	r3, #1
 80012a0:	0692      	lsls	r2, r2, #26
 80012a2:	d42b      	bmi.n	80012fc <_printf_common+0xb0>
 80012a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80012a8:	4641      	mov	r1, r8
 80012aa:	4638      	mov	r0, r7
 80012ac:	47c8      	blx	r9
 80012ae:	3001      	adds	r0, #1
 80012b0:	d01e      	beq.n	80012f0 <_printf_common+0xa4>
 80012b2:	6823      	ldr	r3, [r4, #0]
 80012b4:	6922      	ldr	r2, [r4, #16]
 80012b6:	f003 0306 	and.w	r3, r3, #6
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	bf02      	ittt	eq
 80012be:	68e5      	ldreq	r5, [r4, #12]
 80012c0:	6833      	ldreq	r3, [r6, #0]
 80012c2:	1aed      	subeq	r5, r5, r3
 80012c4:	68a3      	ldr	r3, [r4, #8]
 80012c6:	bf0c      	ite	eq
 80012c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80012cc:	2500      	movne	r5, #0
 80012ce:	4293      	cmp	r3, r2
 80012d0:	bfc4      	itt	gt
 80012d2:	1a9b      	subgt	r3, r3, r2
 80012d4:	18ed      	addgt	r5, r5, r3
 80012d6:	2600      	movs	r6, #0
 80012d8:	341a      	adds	r4, #26
 80012da:	42b5      	cmp	r5, r6
 80012dc:	d11a      	bne.n	8001314 <_printf_common+0xc8>
 80012de:	2000      	movs	r0, #0
 80012e0:	e008      	b.n	80012f4 <_printf_common+0xa8>
 80012e2:	2301      	movs	r3, #1
 80012e4:	4652      	mov	r2, sl
 80012e6:	4641      	mov	r1, r8
 80012e8:	4638      	mov	r0, r7
 80012ea:	47c8      	blx	r9
 80012ec:	3001      	adds	r0, #1
 80012ee:	d103      	bne.n	80012f8 <_printf_common+0xac>
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295
 80012f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012f8:	3501      	adds	r5, #1
 80012fa:	e7c6      	b.n	800128a <_printf_common+0x3e>
 80012fc:	18e1      	adds	r1, r4, r3
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	2030      	movs	r0, #48	@ 0x30
 8001302:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001306:	4422      	add	r2, r4
 8001308:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800130c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001310:	3302      	adds	r3, #2
 8001312:	e7c7      	b.n	80012a4 <_printf_common+0x58>
 8001314:	2301      	movs	r3, #1
 8001316:	4622      	mov	r2, r4
 8001318:	4641      	mov	r1, r8
 800131a:	4638      	mov	r0, r7
 800131c:	47c8      	blx	r9
 800131e:	3001      	adds	r0, #1
 8001320:	d0e6      	beq.n	80012f0 <_printf_common+0xa4>
 8001322:	3601      	adds	r6, #1
 8001324:	e7d9      	b.n	80012da <_printf_common+0x8e>
	...

08001328 <_printf_i>:
 8001328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800132c:	7e0f      	ldrb	r7, [r1, #24]
 800132e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001330:	2f78      	cmp	r7, #120	@ 0x78
 8001332:	4691      	mov	r9, r2
 8001334:	4680      	mov	r8, r0
 8001336:	460c      	mov	r4, r1
 8001338:	469a      	mov	sl, r3
 800133a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800133e:	d807      	bhi.n	8001350 <_printf_i+0x28>
 8001340:	2f62      	cmp	r7, #98	@ 0x62
 8001342:	d80a      	bhi.n	800135a <_printf_i+0x32>
 8001344:	2f00      	cmp	r7, #0
 8001346:	f000 80d2 	beq.w	80014ee <_printf_i+0x1c6>
 800134a:	2f58      	cmp	r7, #88	@ 0x58
 800134c:	f000 80b9 	beq.w	80014c2 <_printf_i+0x19a>
 8001350:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001354:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001358:	e03a      	b.n	80013d0 <_printf_i+0xa8>
 800135a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800135e:	2b15      	cmp	r3, #21
 8001360:	d8f6      	bhi.n	8001350 <_printf_i+0x28>
 8001362:	a101      	add	r1, pc, #4	@ (adr r1, 8001368 <_printf_i+0x40>)
 8001364:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001368:	080013c1 	.word	0x080013c1
 800136c:	080013d5 	.word	0x080013d5
 8001370:	08001351 	.word	0x08001351
 8001374:	08001351 	.word	0x08001351
 8001378:	08001351 	.word	0x08001351
 800137c:	08001351 	.word	0x08001351
 8001380:	080013d5 	.word	0x080013d5
 8001384:	08001351 	.word	0x08001351
 8001388:	08001351 	.word	0x08001351
 800138c:	08001351 	.word	0x08001351
 8001390:	08001351 	.word	0x08001351
 8001394:	080014d5 	.word	0x080014d5
 8001398:	080013ff 	.word	0x080013ff
 800139c:	0800148f 	.word	0x0800148f
 80013a0:	08001351 	.word	0x08001351
 80013a4:	08001351 	.word	0x08001351
 80013a8:	080014f7 	.word	0x080014f7
 80013ac:	08001351 	.word	0x08001351
 80013b0:	080013ff 	.word	0x080013ff
 80013b4:	08001351 	.word	0x08001351
 80013b8:	08001351 	.word	0x08001351
 80013bc:	08001497 	.word	0x08001497
 80013c0:	6833      	ldr	r3, [r6, #0]
 80013c2:	1d1a      	adds	r2, r3, #4
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6032      	str	r2, [r6, #0]
 80013c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80013cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80013d0:	2301      	movs	r3, #1
 80013d2:	e09d      	b.n	8001510 <_printf_i+0x1e8>
 80013d4:	6833      	ldr	r3, [r6, #0]
 80013d6:	6820      	ldr	r0, [r4, #0]
 80013d8:	1d19      	adds	r1, r3, #4
 80013da:	6031      	str	r1, [r6, #0]
 80013dc:	0606      	lsls	r6, r0, #24
 80013de:	d501      	bpl.n	80013e4 <_printf_i+0xbc>
 80013e0:	681d      	ldr	r5, [r3, #0]
 80013e2:	e003      	b.n	80013ec <_printf_i+0xc4>
 80013e4:	0645      	lsls	r5, r0, #25
 80013e6:	d5fb      	bpl.n	80013e0 <_printf_i+0xb8>
 80013e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80013ec:	2d00      	cmp	r5, #0
 80013ee:	da03      	bge.n	80013f8 <_printf_i+0xd0>
 80013f0:	232d      	movs	r3, #45	@ 0x2d
 80013f2:	426d      	negs	r5, r5
 80013f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80013f8:	4859      	ldr	r0, [pc, #356]	@ (8001560 <_printf_i+0x238>)
 80013fa:	230a      	movs	r3, #10
 80013fc:	e011      	b.n	8001422 <_printf_i+0xfa>
 80013fe:	6821      	ldr	r1, [r4, #0]
 8001400:	6833      	ldr	r3, [r6, #0]
 8001402:	0608      	lsls	r0, r1, #24
 8001404:	f853 5b04 	ldr.w	r5, [r3], #4
 8001408:	d402      	bmi.n	8001410 <_printf_i+0xe8>
 800140a:	0649      	lsls	r1, r1, #25
 800140c:	bf48      	it	mi
 800140e:	b2ad      	uxthmi	r5, r5
 8001410:	2f6f      	cmp	r7, #111	@ 0x6f
 8001412:	4853      	ldr	r0, [pc, #332]	@ (8001560 <_printf_i+0x238>)
 8001414:	6033      	str	r3, [r6, #0]
 8001416:	bf14      	ite	ne
 8001418:	230a      	movne	r3, #10
 800141a:	2308      	moveq	r3, #8
 800141c:	2100      	movs	r1, #0
 800141e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001422:	6866      	ldr	r6, [r4, #4]
 8001424:	60a6      	str	r6, [r4, #8]
 8001426:	2e00      	cmp	r6, #0
 8001428:	bfa2      	ittt	ge
 800142a:	6821      	ldrge	r1, [r4, #0]
 800142c:	f021 0104 	bicge.w	r1, r1, #4
 8001430:	6021      	strge	r1, [r4, #0]
 8001432:	b90d      	cbnz	r5, 8001438 <_printf_i+0x110>
 8001434:	2e00      	cmp	r6, #0
 8001436:	d04b      	beq.n	80014d0 <_printf_i+0x1a8>
 8001438:	4616      	mov	r6, r2
 800143a:	fbb5 f1f3 	udiv	r1, r5, r3
 800143e:	fb03 5711 	mls	r7, r3, r1, r5
 8001442:	5dc7      	ldrb	r7, [r0, r7]
 8001444:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001448:	462f      	mov	r7, r5
 800144a:	42bb      	cmp	r3, r7
 800144c:	460d      	mov	r5, r1
 800144e:	d9f4      	bls.n	800143a <_printf_i+0x112>
 8001450:	2b08      	cmp	r3, #8
 8001452:	d10b      	bne.n	800146c <_printf_i+0x144>
 8001454:	6823      	ldr	r3, [r4, #0]
 8001456:	07df      	lsls	r7, r3, #31
 8001458:	d508      	bpl.n	800146c <_printf_i+0x144>
 800145a:	6923      	ldr	r3, [r4, #16]
 800145c:	6861      	ldr	r1, [r4, #4]
 800145e:	4299      	cmp	r1, r3
 8001460:	bfde      	ittt	le
 8001462:	2330      	movle	r3, #48	@ 0x30
 8001464:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001468:	f106 36ff 	addle.w	r6, r6, #4294967295
 800146c:	1b92      	subs	r2, r2, r6
 800146e:	6122      	str	r2, [r4, #16]
 8001470:	f8cd a000 	str.w	sl, [sp]
 8001474:	464b      	mov	r3, r9
 8001476:	aa03      	add	r2, sp, #12
 8001478:	4621      	mov	r1, r4
 800147a:	4640      	mov	r0, r8
 800147c:	f7ff fee6 	bl	800124c <_printf_common>
 8001480:	3001      	adds	r0, #1
 8001482:	d14a      	bne.n	800151a <_printf_i+0x1f2>
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	b004      	add	sp, #16
 800148a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800148e:	6823      	ldr	r3, [r4, #0]
 8001490:	f043 0320 	orr.w	r3, r3, #32
 8001494:	6023      	str	r3, [r4, #0]
 8001496:	4833      	ldr	r0, [pc, #204]	@ (8001564 <_printf_i+0x23c>)
 8001498:	2778      	movs	r7, #120	@ 0x78
 800149a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800149e:	6823      	ldr	r3, [r4, #0]
 80014a0:	6831      	ldr	r1, [r6, #0]
 80014a2:	061f      	lsls	r7, r3, #24
 80014a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80014a8:	d402      	bmi.n	80014b0 <_printf_i+0x188>
 80014aa:	065f      	lsls	r7, r3, #25
 80014ac:	bf48      	it	mi
 80014ae:	b2ad      	uxthmi	r5, r5
 80014b0:	6031      	str	r1, [r6, #0]
 80014b2:	07d9      	lsls	r1, r3, #31
 80014b4:	bf44      	itt	mi
 80014b6:	f043 0320 	orrmi.w	r3, r3, #32
 80014ba:	6023      	strmi	r3, [r4, #0]
 80014bc:	b11d      	cbz	r5, 80014c6 <_printf_i+0x19e>
 80014be:	2310      	movs	r3, #16
 80014c0:	e7ac      	b.n	800141c <_printf_i+0xf4>
 80014c2:	4827      	ldr	r0, [pc, #156]	@ (8001560 <_printf_i+0x238>)
 80014c4:	e7e9      	b.n	800149a <_printf_i+0x172>
 80014c6:	6823      	ldr	r3, [r4, #0]
 80014c8:	f023 0320 	bic.w	r3, r3, #32
 80014cc:	6023      	str	r3, [r4, #0]
 80014ce:	e7f6      	b.n	80014be <_printf_i+0x196>
 80014d0:	4616      	mov	r6, r2
 80014d2:	e7bd      	b.n	8001450 <_printf_i+0x128>
 80014d4:	6833      	ldr	r3, [r6, #0]
 80014d6:	6825      	ldr	r5, [r4, #0]
 80014d8:	6961      	ldr	r1, [r4, #20]
 80014da:	1d18      	adds	r0, r3, #4
 80014dc:	6030      	str	r0, [r6, #0]
 80014de:	062e      	lsls	r6, r5, #24
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	d501      	bpl.n	80014e8 <_printf_i+0x1c0>
 80014e4:	6019      	str	r1, [r3, #0]
 80014e6:	e002      	b.n	80014ee <_printf_i+0x1c6>
 80014e8:	0668      	lsls	r0, r5, #25
 80014ea:	d5fb      	bpl.n	80014e4 <_printf_i+0x1bc>
 80014ec:	8019      	strh	r1, [r3, #0]
 80014ee:	2300      	movs	r3, #0
 80014f0:	6123      	str	r3, [r4, #16]
 80014f2:	4616      	mov	r6, r2
 80014f4:	e7bc      	b.n	8001470 <_printf_i+0x148>
 80014f6:	6833      	ldr	r3, [r6, #0]
 80014f8:	1d1a      	adds	r2, r3, #4
 80014fa:	6032      	str	r2, [r6, #0]
 80014fc:	681e      	ldr	r6, [r3, #0]
 80014fe:	6862      	ldr	r2, [r4, #4]
 8001500:	2100      	movs	r1, #0
 8001502:	4630      	mov	r0, r6
 8001504:	f7fe fe84 	bl	8000210 <memchr>
 8001508:	b108      	cbz	r0, 800150e <_printf_i+0x1e6>
 800150a:	1b80      	subs	r0, r0, r6
 800150c:	6060      	str	r0, [r4, #4]
 800150e:	6863      	ldr	r3, [r4, #4]
 8001510:	6123      	str	r3, [r4, #16]
 8001512:	2300      	movs	r3, #0
 8001514:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001518:	e7aa      	b.n	8001470 <_printf_i+0x148>
 800151a:	6923      	ldr	r3, [r4, #16]
 800151c:	4632      	mov	r2, r6
 800151e:	4649      	mov	r1, r9
 8001520:	4640      	mov	r0, r8
 8001522:	47d0      	blx	sl
 8001524:	3001      	adds	r0, #1
 8001526:	d0ad      	beq.n	8001484 <_printf_i+0x15c>
 8001528:	6823      	ldr	r3, [r4, #0]
 800152a:	079b      	lsls	r3, r3, #30
 800152c:	d413      	bmi.n	8001556 <_printf_i+0x22e>
 800152e:	68e0      	ldr	r0, [r4, #12]
 8001530:	9b03      	ldr	r3, [sp, #12]
 8001532:	4298      	cmp	r0, r3
 8001534:	bfb8      	it	lt
 8001536:	4618      	movlt	r0, r3
 8001538:	e7a6      	b.n	8001488 <_printf_i+0x160>
 800153a:	2301      	movs	r3, #1
 800153c:	4632      	mov	r2, r6
 800153e:	4649      	mov	r1, r9
 8001540:	4640      	mov	r0, r8
 8001542:	47d0      	blx	sl
 8001544:	3001      	adds	r0, #1
 8001546:	d09d      	beq.n	8001484 <_printf_i+0x15c>
 8001548:	3501      	adds	r5, #1
 800154a:	68e3      	ldr	r3, [r4, #12]
 800154c:	9903      	ldr	r1, [sp, #12]
 800154e:	1a5b      	subs	r3, r3, r1
 8001550:	42ab      	cmp	r3, r5
 8001552:	dcf2      	bgt.n	800153a <_printf_i+0x212>
 8001554:	e7eb      	b.n	800152e <_printf_i+0x206>
 8001556:	2500      	movs	r5, #0
 8001558:	f104 0619 	add.w	r6, r4, #25
 800155c:	e7f5      	b.n	800154a <_printf_i+0x222>
 800155e:	bf00      	nop
 8001560:	0800182b 	.word	0x0800182b
 8001564:	0800183c 	.word	0x0800183c

08001568 <__sflush_r>:
 8001568:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800156c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001570:	0716      	lsls	r6, r2, #28
 8001572:	4605      	mov	r5, r0
 8001574:	460c      	mov	r4, r1
 8001576:	d454      	bmi.n	8001622 <__sflush_r+0xba>
 8001578:	684b      	ldr	r3, [r1, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	dc02      	bgt.n	8001584 <__sflush_r+0x1c>
 800157e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001580:	2b00      	cmp	r3, #0
 8001582:	dd48      	ble.n	8001616 <__sflush_r+0xae>
 8001584:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001586:	2e00      	cmp	r6, #0
 8001588:	d045      	beq.n	8001616 <__sflush_r+0xae>
 800158a:	2300      	movs	r3, #0
 800158c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001590:	682f      	ldr	r7, [r5, #0]
 8001592:	6a21      	ldr	r1, [r4, #32]
 8001594:	602b      	str	r3, [r5, #0]
 8001596:	d030      	beq.n	80015fa <__sflush_r+0x92>
 8001598:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800159a:	89a3      	ldrh	r3, [r4, #12]
 800159c:	0759      	lsls	r1, r3, #29
 800159e:	d505      	bpl.n	80015ac <__sflush_r+0x44>
 80015a0:	6863      	ldr	r3, [r4, #4]
 80015a2:	1ad2      	subs	r2, r2, r3
 80015a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80015a6:	b10b      	cbz	r3, 80015ac <__sflush_r+0x44>
 80015a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80015aa:	1ad2      	subs	r2, r2, r3
 80015ac:	2300      	movs	r3, #0
 80015ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80015b0:	6a21      	ldr	r1, [r4, #32]
 80015b2:	4628      	mov	r0, r5
 80015b4:	47b0      	blx	r6
 80015b6:	1c43      	adds	r3, r0, #1
 80015b8:	89a3      	ldrh	r3, [r4, #12]
 80015ba:	d106      	bne.n	80015ca <__sflush_r+0x62>
 80015bc:	6829      	ldr	r1, [r5, #0]
 80015be:	291d      	cmp	r1, #29
 80015c0:	d82b      	bhi.n	800161a <__sflush_r+0xb2>
 80015c2:	4a2a      	ldr	r2, [pc, #168]	@ (800166c <__sflush_r+0x104>)
 80015c4:	410a      	asrs	r2, r1
 80015c6:	07d6      	lsls	r6, r2, #31
 80015c8:	d427      	bmi.n	800161a <__sflush_r+0xb2>
 80015ca:	2200      	movs	r2, #0
 80015cc:	6062      	str	r2, [r4, #4]
 80015ce:	04d9      	lsls	r1, r3, #19
 80015d0:	6922      	ldr	r2, [r4, #16]
 80015d2:	6022      	str	r2, [r4, #0]
 80015d4:	d504      	bpl.n	80015e0 <__sflush_r+0x78>
 80015d6:	1c42      	adds	r2, r0, #1
 80015d8:	d101      	bne.n	80015de <__sflush_r+0x76>
 80015da:	682b      	ldr	r3, [r5, #0]
 80015dc:	b903      	cbnz	r3, 80015e0 <__sflush_r+0x78>
 80015de:	6560      	str	r0, [r4, #84]	@ 0x54
 80015e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80015e2:	602f      	str	r7, [r5, #0]
 80015e4:	b1b9      	cbz	r1, 8001616 <__sflush_r+0xae>
 80015e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80015ea:	4299      	cmp	r1, r3
 80015ec:	d002      	beq.n	80015f4 <__sflush_r+0x8c>
 80015ee:	4628      	mov	r0, r5
 80015f0:	f7ff fbf2 	bl	8000dd8 <_free_r>
 80015f4:	2300      	movs	r3, #0
 80015f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80015f8:	e00d      	b.n	8001616 <__sflush_r+0xae>
 80015fa:	2301      	movs	r3, #1
 80015fc:	4628      	mov	r0, r5
 80015fe:	47b0      	blx	r6
 8001600:	4602      	mov	r2, r0
 8001602:	1c50      	adds	r0, r2, #1
 8001604:	d1c9      	bne.n	800159a <__sflush_r+0x32>
 8001606:	682b      	ldr	r3, [r5, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0c6      	beq.n	800159a <__sflush_r+0x32>
 800160c:	2b1d      	cmp	r3, #29
 800160e:	d001      	beq.n	8001614 <__sflush_r+0xac>
 8001610:	2b16      	cmp	r3, #22
 8001612:	d11e      	bne.n	8001652 <__sflush_r+0xea>
 8001614:	602f      	str	r7, [r5, #0]
 8001616:	2000      	movs	r0, #0
 8001618:	e022      	b.n	8001660 <__sflush_r+0xf8>
 800161a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800161e:	b21b      	sxth	r3, r3
 8001620:	e01b      	b.n	800165a <__sflush_r+0xf2>
 8001622:	690f      	ldr	r7, [r1, #16]
 8001624:	2f00      	cmp	r7, #0
 8001626:	d0f6      	beq.n	8001616 <__sflush_r+0xae>
 8001628:	0793      	lsls	r3, r2, #30
 800162a:	680e      	ldr	r6, [r1, #0]
 800162c:	bf08      	it	eq
 800162e:	694b      	ldreq	r3, [r1, #20]
 8001630:	600f      	str	r7, [r1, #0]
 8001632:	bf18      	it	ne
 8001634:	2300      	movne	r3, #0
 8001636:	eba6 0807 	sub.w	r8, r6, r7
 800163a:	608b      	str	r3, [r1, #8]
 800163c:	f1b8 0f00 	cmp.w	r8, #0
 8001640:	dde9      	ble.n	8001616 <__sflush_r+0xae>
 8001642:	6a21      	ldr	r1, [r4, #32]
 8001644:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001646:	4643      	mov	r3, r8
 8001648:	463a      	mov	r2, r7
 800164a:	4628      	mov	r0, r5
 800164c:	47b0      	blx	r6
 800164e:	2800      	cmp	r0, #0
 8001650:	dc08      	bgt.n	8001664 <__sflush_r+0xfc>
 8001652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800165a:	81a3      	strh	r3, [r4, #12]
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
 8001660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001664:	4407      	add	r7, r0
 8001666:	eba8 0800 	sub.w	r8, r8, r0
 800166a:	e7e7      	b.n	800163c <__sflush_r+0xd4>
 800166c:	dfbffffe 	.word	0xdfbffffe

08001670 <_fflush_r>:
 8001670:	b538      	push	{r3, r4, r5, lr}
 8001672:	690b      	ldr	r3, [r1, #16]
 8001674:	4605      	mov	r5, r0
 8001676:	460c      	mov	r4, r1
 8001678:	b913      	cbnz	r3, 8001680 <_fflush_r+0x10>
 800167a:	2500      	movs	r5, #0
 800167c:	4628      	mov	r0, r5
 800167e:	bd38      	pop	{r3, r4, r5, pc}
 8001680:	b118      	cbz	r0, 800168a <_fflush_r+0x1a>
 8001682:	6a03      	ldr	r3, [r0, #32]
 8001684:	b90b      	cbnz	r3, 800168a <_fflush_r+0x1a>
 8001686:	f7ff f9ad 	bl	80009e4 <__sinit>
 800168a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f3      	beq.n	800167a <_fflush_r+0xa>
 8001692:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001694:	07d0      	lsls	r0, r2, #31
 8001696:	d404      	bmi.n	80016a2 <_fflush_r+0x32>
 8001698:	0599      	lsls	r1, r3, #22
 800169a:	d402      	bmi.n	80016a2 <_fflush_r+0x32>
 800169c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800169e:	f7ff fb98 	bl	8000dd2 <__retarget_lock_acquire_recursive>
 80016a2:	4628      	mov	r0, r5
 80016a4:	4621      	mov	r1, r4
 80016a6:	f7ff ff5f 	bl	8001568 <__sflush_r>
 80016aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80016ac:	07da      	lsls	r2, r3, #31
 80016ae:	4605      	mov	r5, r0
 80016b0:	d4e4      	bmi.n	800167c <_fflush_r+0xc>
 80016b2:	89a3      	ldrh	r3, [r4, #12]
 80016b4:	059b      	lsls	r3, r3, #22
 80016b6:	d4e1      	bmi.n	800167c <_fflush_r+0xc>
 80016b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80016ba:	f7ff fb8b 	bl	8000dd4 <__retarget_lock_release_recursive>
 80016be:	e7dd      	b.n	800167c <_fflush_r+0xc>

080016c0 <__swhatbuf_r>:
 80016c0:	b570      	push	{r4, r5, r6, lr}
 80016c2:	460c      	mov	r4, r1
 80016c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016c8:	2900      	cmp	r1, #0
 80016ca:	b096      	sub	sp, #88	@ 0x58
 80016cc:	4615      	mov	r5, r2
 80016ce:	461e      	mov	r6, r3
 80016d0:	da0d      	bge.n	80016ee <__swhatbuf_r+0x2e>
 80016d2:	89a3      	ldrh	r3, [r4, #12]
 80016d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80016d8:	f04f 0100 	mov.w	r1, #0
 80016dc:	bf14      	ite	ne
 80016de:	2340      	movne	r3, #64	@ 0x40
 80016e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80016e4:	2000      	movs	r0, #0
 80016e6:	6031      	str	r1, [r6, #0]
 80016e8:	602b      	str	r3, [r5, #0]
 80016ea:	b016      	add	sp, #88	@ 0x58
 80016ec:	bd70      	pop	{r4, r5, r6, pc}
 80016ee:	466a      	mov	r2, sp
 80016f0:	f000 f848 	bl	8001784 <_fstat_r>
 80016f4:	2800      	cmp	r0, #0
 80016f6:	dbec      	blt.n	80016d2 <__swhatbuf_r+0x12>
 80016f8:	9901      	ldr	r1, [sp, #4]
 80016fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80016fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001702:	4259      	negs	r1, r3
 8001704:	4159      	adcs	r1, r3
 8001706:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800170a:	e7eb      	b.n	80016e4 <__swhatbuf_r+0x24>

0800170c <__smakebuf_r>:
 800170c:	898b      	ldrh	r3, [r1, #12]
 800170e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001710:	079d      	lsls	r5, r3, #30
 8001712:	4606      	mov	r6, r0
 8001714:	460c      	mov	r4, r1
 8001716:	d507      	bpl.n	8001728 <__smakebuf_r+0x1c>
 8001718:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800171c:	6023      	str	r3, [r4, #0]
 800171e:	6123      	str	r3, [r4, #16]
 8001720:	2301      	movs	r3, #1
 8001722:	6163      	str	r3, [r4, #20]
 8001724:	b003      	add	sp, #12
 8001726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001728:	ab01      	add	r3, sp, #4
 800172a:	466a      	mov	r2, sp
 800172c:	f7ff ffc8 	bl	80016c0 <__swhatbuf_r>
 8001730:	9f00      	ldr	r7, [sp, #0]
 8001732:	4605      	mov	r5, r0
 8001734:	4639      	mov	r1, r7
 8001736:	4630      	mov	r0, r6
 8001738:	f7ff fbba 	bl	8000eb0 <_malloc_r>
 800173c:	b948      	cbnz	r0, 8001752 <__smakebuf_r+0x46>
 800173e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001742:	059a      	lsls	r2, r3, #22
 8001744:	d4ee      	bmi.n	8001724 <__smakebuf_r+0x18>
 8001746:	f023 0303 	bic.w	r3, r3, #3
 800174a:	f043 0302 	orr.w	r3, r3, #2
 800174e:	81a3      	strh	r3, [r4, #12]
 8001750:	e7e2      	b.n	8001718 <__smakebuf_r+0xc>
 8001752:	89a3      	ldrh	r3, [r4, #12]
 8001754:	6020      	str	r0, [r4, #0]
 8001756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800175a:	81a3      	strh	r3, [r4, #12]
 800175c:	9b01      	ldr	r3, [sp, #4]
 800175e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001762:	b15b      	cbz	r3, 800177c <__smakebuf_r+0x70>
 8001764:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001768:	4630      	mov	r0, r6
 800176a:	f000 f81d 	bl	80017a8 <_isatty_r>
 800176e:	b128      	cbz	r0, 800177c <__smakebuf_r+0x70>
 8001770:	89a3      	ldrh	r3, [r4, #12]
 8001772:	f023 0303 	bic.w	r3, r3, #3
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	81a3      	strh	r3, [r4, #12]
 800177c:	89a3      	ldrh	r3, [r4, #12]
 800177e:	431d      	orrs	r5, r3
 8001780:	81a5      	strh	r5, [r4, #12]
 8001782:	e7cf      	b.n	8001724 <__smakebuf_r+0x18>

08001784 <_fstat_r>:
 8001784:	b538      	push	{r3, r4, r5, lr}
 8001786:	4d07      	ldr	r5, [pc, #28]	@ (80017a4 <_fstat_r+0x20>)
 8001788:	2300      	movs	r3, #0
 800178a:	4604      	mov	r4, r0
 800178c:	4608      	mov	r0, r1
 800178e:	4611      	mov	r1, r2
 8001790:	602b      	str	r3, [r5, #0]
 8001792:	f7fe ffed 	bl	8000770 <_fstat>
 8001796:	1c43      	adds	r3, r0, #1
 8001798:	d102      	bne.n	80017a0 <_fstat_r+0x1c>
 800179a:	682b      	ldr	r3, [r5, #0]
 800179c:	b103      	cbz	r3, 80017a0 <_fstat_r+0x1c>
 800179e:	6023      	str	r3, [r4, #0]
 80017a0:	bd38      	pop	{r3, r4, r5, pc}
 80017a2:	bf00      	nop
 80017a4:	200001c0 	.word	0x200001c0

080017a8 <_isatty_r>:
 80017a8:	b538      	push	{r3, r4, r5, lr}
 80017aa:	4d06      	ldr	r5, [pc, #24]	@ (80017c4 <_isatty_r+0x1c>)
 80017ac:	2300      	movs	r3, #0
 80017ae:	4604      	mov	r4, r0
 80017b0:	4608      	mov	r0, r1
 80017b2:	602b      	str	r3, [r5, #0]
 80017b4:	f7fe ffec 	bl	8000790 <_isatty>
 80017b8:	1c43      	adds	r3, r0, #1
 80017ba:	d102      	bne.n	80017c2 <_isatty_r+0x1a>
 80017bc:	682b      	ldr	r3, [r5, #0]
 80017be:	b103      	cbz	r3, 80017c2 <_isatty_r+0x1a>
 80017c0:	6023      	str	r3, [r4, #0]
 80017c2:	bd38      	pop	{r3, r4, r5, pc}
 80017c4:	200001c0 	.word	0x200001c0

080017c8 <_sbrk_r>:
 80017c8:	b538      	push	{r3, r4, r5, lr}
 80017ca:	4d06      	ldr	r5, [pc, #24]	@ (80017e4 <_sbrk_r+0x1c>)
 80017cc:	2300      	movs	r3, #0
 80017ce:	4604      	mov	r4, r0
 80017d0:	4608      	mov	r0, r1
 80017d2:	602b      	str	r3, [r5, #0]
 80017d4:	f7fe fff4 	bl	80007c0 <_sbrk>
 80017d8:	1c43      	adds	r3, r0, #1
 80017da:	d102      	bne.n	80017e2 <_sbrk_r+0x1a>
 80017dc:	682b      	ldr	r3, [r5, #0]
 80017de:	b103      	cbz	r3, 80017e2 <_sbrk_r+0x1a>
 80017e0:	6023      	str	r3, [r4, #0]
 80017e2:	bd38      	pop	{r3, r4, r5, pc}
 80017e4:	200001c0 	.word	0x200001c0

080017e8 <_init>:
 80017e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ea:	bf00      	nop
 80017ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ee:	bc08      	pop	{r3}
 80017f0:	469e      	mov	lr, r3
 80017f2:	4770      	bx	lr

080017f4 <_fini>:
 80017f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f6:	bf00      	nop
 80017f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017fa:	bc08      	pop	{r3}
 80017fc:	469e      	mov	lr, r3
 80017fe:	4770      	bx	lr
