
Bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c24  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08001df4  08001df4  00002df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ee4  08001ee4  00003060  2**0
                  CONTENTS
  4 .ARM          00000008  08001ee4  08001ee4  00002ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001eec  08001eec  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001eec  08001eec  00002eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001ef0  08001ef0  00002ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08001ef4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000060  08001f54  00003060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08001f54  00003214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000020cd  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000865  00000000  00000000  0000515d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002f8  00000000  00000000  000059c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000021d  00000000  00000000  00005cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020eb3  00000000  00000000  00005edd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000346e  00000000  00000000  00026d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6d2c  00000000  00000000  0002a1fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0f2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013a4  00000000  00000000  000f0f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000f2314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001ddc 	.word	0x08001ddc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08001ddc 	.word	0x08001ddc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <main>:
volatile char rx_buffer[RX_BUFFER_SIZE];
volatile uint8_t rx_head = 0;
volatile uint8_t rx_tail = 0;
volatile bool cmd_ready = false;

int main() {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b092      	sub	sp, #72	@ 0x48
 80002d4:	af00      	add	r7, sp, #0
    USART2_Init();
 80002d6:	f000 f8a5 	bl	8000424 <USART2_Init>
    USART1_Init();
 80002da:	f000 f8e5 	bl	80004a8 <USART1_Init>
    I2C1_Init();
 80002de:	f000 f96b 	bl	80005b8 <I2C1_Init>
    Light_Sensor_Init();
 80002e2:	f000 fa56 	bl	8000792 <Light_Sensor_Init>

    printf("System Ready\r\n");  // Verify USART2 works
 80002e6:	4841      	ldr	r0, [pc, #260]	@ (80003ec <main+0x11c>)
 80002e8:	f000 fd3e 	bl	8000d68 <puts>

    while(1) {
        if(cmd_ready) {
 80002ec:	4b40      	ldr	r3, [pc, #256]	@ (80003f0 <main+0x120>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d0fa      	beq.n	80002ec <main+0x1c>
            printf("Command received!\r\n");  // Debug print
 80002f6:	483f      	ldr	r0, [pc, #252]	@ (80003f4 <main+0x124>)
 80002f8:	f000 fd36 	bl	8000d68 <puts>

            char cmd[CMD_LENGTH];
            uint8_t i = 0;
 80002fc:	2300      	movs	r3, #0
 80002fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

            while(rx_tail != rx_head && i < CMD_LENGTH-1) {
 8000302:	e01f      	b.n	8000344 <main+0x74>
                cmd[i++] = rx_buffer[rx_tail];
 8000304:	4b3c      	ldr	r3, [pc, #240]	@ (80003f8 <main+0x128>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	b2db      	uxtb	r3, r3
 800030a:	461a      	mov	r2, r3
 800030c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000310:	1c59      	adds	r1, r3, #1
 8000312:	f887 1047 	strb.w	r1, [r7, #71]	@ 0x47
 8000316:	4619      	mov	r1, r3
 8000318:	4b38      	ldr	r3, [pc, #224]	@ (80003fc <main+0x12c>)
 800031a:	5c9b      	ldrb	r3, [r3, r2]
 800031c:	b2da      	uxtb	r2, r3
 800031e:	f101 0348 	add.w	r3, r1, #72	@ 0x48
 8000322:	443b      	add	r3, r7
 8000324:	f803 2c24 	strb.w	r2, [r3, #-36]
                rx_tail = (rx_tail + 1) % RX_BUFFER_SIZE;
 8000328:	4b33      	ldr	r3, [pc, #204]	@ (80003f8 <main+0x128>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	b2db      	uxtb	r3, r3
 800032e:	3301      	adds	r3, #1
 8000330:	425a      	negs	r2, r3
 8000332:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000336:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800033a:	bf58      	it	pl
 800033c:	4253      	negpl	r3, r2
 800033e:	b2da      	uxtb	r2, r3
 8000340:	4b2d      	ldr	r3, [pc, #180]	@ (80003f8 <main+0x128>)
 8000342:	701a      	strb	r2, [r3, #0]
            while(rx_tail != rx_head && i < CMD_LENGTH-1) {
 8000344:	4b2c      	ldr	r3, [pc, #176]	@ (80003f8 <main+0x128>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	b2da      	uxtb	r2, r3
 800034a:	4b2d      	ldr	r3, [pc, #180]	@ (8000400 <main+0x130>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	429a      	cmp	r2, r3
 8000352:	d003      	beq.n	800035c <main+0x8c>
 8000354:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000358:	2b1c      	cmp	r3, #28
 800035a:	d9d3      	bls.n	8000304 <main+0x34>
            }
            cmd[i] = '\0';
 800035c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000360:	3348      	adds	r3, #72	@ 0x48
 8000362:	443b      	add	r3, r7
 8000364:	2200      	movs	r2, #0
 8000366:	f803 2c24 	strb.w	r2, [r3, #-36]
            cmd_ready = false;
 800036a:	4b21      	ldr	r3, [pc, #132]	@ (80003f0 <main+0x120>)
 800036c:	2200      	movs	r2, #0
 800036e:	701a      	strb	r2, [r3, #0]

            printf("Command is: %s\r\n", cmd);  // Debug print
 8000370:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000374:	4619      	mov	r1, r3
 8000376:	4823      	ldr	r0, [pc, #140]	@ (8000404 <main+0x134>)
 8000378:	f000 fc8e 	bl	8000c98 <iprintf>

            // Process commands
            if(strcmp(cmd, "light read\r\n") == 0) {
 800037c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000380:	4921      	ldr	r1, [pc, #132]	@ (8000408 <main+0x138>)
 8000382:	4618      	mov	r0, r3
 8000384:	f7ff ff44 	bl	8000210 <strcmp>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d110      	bne.n	80003b0 <main+0xe0>
                char str[30];
                uint16_t value = Light_Read();
 800038e:	f000 fa0d 	bl	80007ac <Light_Read>
 8000392:	4603      	mov	r3, r0
 8000394:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
                sprintf(str, "Light Value: %d\r\n", value);
 8000398:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	491b      	ldr	r1, [pc, #108]	@ (800040c <main+0x13c>)
 80003a0:	4618      	mov	r0, r3
 80003a2:	f000 fce9 	bl	8000d78 <siprintf>
                Bluetooth_Print(str);
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	4618      	mov	r0, r3
 80003aa:	f000 fa69 	bl	8000880 <Bluetooth_Print>
 80003ae:	e79d      	b.n	80002ec <main+0x1c>
            }
            else if(strcmp(cmd, "status\r\n") == 0) {
 80003b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003b4:	4916      	ldr	r1, [pc, #88]	@ (8000410 <main+0x140>)
 80003b6:	4618      	mov	r0, r3
 80003b8:	f7ff ff2a 	bl	8000210 <strcmp>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d103      	bne.n	80003ca <main+0xfa>
                Bluetooth_Print("System Status: OK\r\n");
 80003c2:	4814      	ldr	r0, [pc, #80]	@ (8000414 <main+0x144>)
 80003c4:	f000 fa5c 	bl	8000880 <Bluetooth_Print>
 80003c8:	e790      	b.n	80002ec <main+0x1c>
            }
            else if(strcmp(cmd, "help\r\n") == 0) {
 80003ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003ce:	4912      	ldr	r1, [pc, #72]	@ (8000418 <main+0x148>)
 80003d0:	4618      	mov	r0, r3
 80003d2:	f7ff ff1d 	bl	8000210 <strcmp>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d103      	bne.n	80003e4 <main+0x114>
                Bluetooth_Print("1. light read\r\n2. status\r\n3. help\r\n");
 80003dc:	480f      	ldr	r0, [pc, #60]	@ (800041c <main+0x14c>)
 80003de:	f000 fa4f 	bl	8000880 <Bluetooth_Print>
 80003e2:	e783      	b.n	80002ec <main+0x1c>
            }
            else {
                Bluetooth_Print("Unknown Command\r\n");
 80003e4:	480e      	ldr	r0, [pc, #56]	@ (8000420 <main+0x150>)
 80003e6:	f000 fa4b 	bl	8000880 <Bluetooth_Print>
        if(cmd_ready) {
 80003ea:	e77f      	b.n	80002ec <main+0x1c>
 80003ec:	08001df4 	.word	0x08001df4
 80003f0:	200000be 	.word	0x200000be
 80003f4:	08001e04 	.word	0x08001e04
 80003f8:	200000bd 	.word	0x200000bd
 80003fc:	2000007c 	.word	0x2000007c
 8000400:	200000bc 	.word	0x200000bc
 8000404:	08001e18 	.word	0x08001e18
 8000408:	08001e2c 	.word	0x08001e2c
 800040c:	08001e3c 	.word	0x08001e3c
 8000410:	08001e50 	.word	0x08001e50
 8000414:	08001e5c 	.word	0x08001e5c
 8000418:	08001e70 	.word	0x08001e70
 800041c:	08001e78 	.word	0x08001e78
 8000420:	08001e9c 	.word	0x08001e9c

08000424 <USART2_Init>:
        }
    }
}

// USART2 - ST-Link Setup
void USART2_Init() {
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
	RCC -> APB1ENR |= (1 << 17);								// USART2
 8000428:	4b1c      	ldr	r3, [pc, #112]	@ (800049c <USART2_Init+0x78>)
 800042a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800042c:	4a1b      	ldr	r2, [pc, #108]	@ (800049c <USART2_Init+0x78>)
 800042e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000432:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC -> AHB1ENR |= (1 << 0);									// GPIOA
 8000434:	4b19      	ldr	r3, [pc, #100]	@ (800049c <USART2_Init+0x78>)
 8000436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000438:	4a18      	ldr	r2, [pc, #96]	@ (800049c <USART2_Init+0x78>)
 800043a:	f043 0301 	orr.w	r3, r3, #1
 800043e:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA -> MODER &= ~((3 << (2 * 2)) | (3 << (2 * 3)));		// PA2 & 3 Set to Alternate Function
 8000440:	4b17      	ldr	r3, [pc, #92]	@ (80004a0 <USART2_Init+0x7c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a16      	ldr	r2, [pc, #88]	@ (80004a0 <USART2_Init+0x7c>)
 8000446:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800044a:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= (2 << (2 * 2)) | (2 << (2 * 3));
 800044c:	4b14      	ldr	r3, [pc, #80]	@ (80004a0 <USART2_Init+0x7c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a13      	ldr	r2, [pc, #76]	@ (80004a0 <USART2_Init+0x7c>)
 8000452:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000456:	6013      	str	r3, [r2, #0]

	GPIOA -> AFR[0] &= ~((15 << (4 * 2)) | (15 << (4 * 3)));	// Alternate Function to AF7
 8000458:	4b11      	ldr	r3, [pc, #68]	@ (80004a0 <USART2_Init+0x7c>)
 800045a:	6a1b      	ldr	r3, [r3, #32]
 800045c:	4a10      	ldr	r2, [pc, #64]	@ (80004a0 <USART2_Init+0x7c>)
 800045e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000462:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] |= (7 << (4 * 2)) | (7 << (4 * 3));
 8000464:	4b0e      	ldr	r3, [pc, #56]	@ (80004a0 <USART2_Init+0x7c>)
 8000466:	6a1b      	ldr	r3, [r3, #32]
 8000468:	4a0d      	ldr	r2, [pc, #52]	@ (80004a0 <USART2_Init+0x7c>)
 800046a:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800046e:	6213      	str	r3, [r2, #32]

	USART2 -> BRR = 0x0683;										// 9600 Baud Rate
 8000470:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <USART2_Init+0x80>)
 8000472:	f240 6283 	movw	r2, #1667	@ 0x683
 8000476:	609a      	str	r2, [r3, #8]

	USART2 -> CR1 |= (1 << 3);									// Transmitter Enabled
 8000478:	4b0a      	ldr	r3, [pc, #40]	@ (80004a4 <USART2_Init+0x80>)
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	4a09      	ldr	r2, [pc, #36]	@ (80004a4 <USART2_Init+0x80>)
 800047e:	f043 0308 	orr.w	r3, r3, #8
 8000482:	60d3      	str	r3, [r2, #12]
	USART2 -> CR1 |= (1 << 13);									// USART2 Enabled
 8000484:	4b07      	ldr	r3, [pc, #28]	@ (80004a4 <USART2_Init+0x80>)
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	4a06      	ldr	r2, [pc, #24]	@ (80004a4 <USART2_Init+0x80>)
 800048a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800048e:	60d3      	str	r3, [r2, #12]
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	40023800 	.word	0x40023800
 80004a0:	40020000 	.word	0x40020000
 80004a4:	40004400 	.word	0x40004400

080004a8 <USART1_Init>:

// USART1 - Bluetooth Module
void USART1_Init() {
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
	RCC -> APB2ENR |= (1 << 4);									// USART1
 80004ac:	4b1f      	ldr	r3, [pc, #124]	@ (800052c <USART1_Init+0x84>)
 80004ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004b0:	4a1e      	ldr	r2, [pc, #120]	@ (800052c <USART1_Init+0x84>)
 80004b2:	f043 0310 	orr.w	r3, r3, #16
 80004b6:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC -> AHB1ENR |= (1 << 1);									// GPIOB
 80004b8:	4b1c      	ldr	r3, [pc, #112]	@ (800052c <USART1_Init+0x84>)
 80004ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004bc:	4a1b      	ldr	r2, [pc, #108]	@ (800052c <USART1_Init+0x84>)
 80004be:	f043 0302 	orr.w	r3, r3, #2
 80004c2:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOB -> MODER &= ~((3 << (2 * 6)) | (3 << (2 * 7)));		// PB6 & 7 Set to Alternate Function
 80004c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000530 <USART1_Init+0x88>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a19      	ldr	r2, [pc, #100]	@ (8000530 <USART1_Init+0x88>)
 80004ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80004ce:	6013      	str	r3, [r2, #0]
	GPIOB -> MODER |= (2 << (2 * 6)) | (2 << (2 * 7));
 80004d0:	4b17      	ldr	r3, [pc, #92]	@ (8000530 <USART1_Init+0x88>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a16      	ldr	r2, [pc, #88]	@ (8000530 <USART1_Init+0x88>)
 80004d6:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 80004da:	6013      	str	r3, [r2, #0]

	GPIOB -> AFR[0] &= ~((15 << (4 * 6)) | (15 << (4 * 7)));	// Alternate Function to AF7
 80004dc:	4b14      	ldr	r3, [pc, #80]	@ (8000530 <USART1_Init+0x88>)
 80004de:	6a1b      	ldr	r3, [r3, #32]
 80004e0:	4a13      	ldr	r2, [pc, #76]	@ (8000530 <USART1_Init+0x88>)
 80004e2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80004e6:	6213      	str	r3, [r2, #32]
	GPIOB -> AFR[0] |= (7 << (4 * 6)) | (7 << (4 * 7));
 80004e8:	4b11      	ldr	r3, [pc, #68]	@ (8000530 <USART1_Init+0x88>)
 80004ea:	6a1b      	ldr	r3, [r3, #32]
 80004ec:	4a10      	ldr	r2, [pc, #64]	@ (8000530 <USART1_Init+0x88>)
 80004ee:	f043 43ee 	orr.w	r3, r3, #1996488704	@ 0x77000000
 80004f2:	6213      	str	r3, [r2, #32]

	USART1 -> BRR = 0x0683;										// 9600 Baud Rate
 80004f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000534 <USART1_Init+0x8c>)
 80004f6:	f240 6283 	movw	r2, #1667	@ 0x683
 80004fa:	609a      	str	r2, [r3, #8]

	USART1 -> CR1 |= (1 << 2) | (1 << 3) | (1 << 5);			// Transmitter/Receiver/Read Interrupt Enabled
 80004fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000534 <USART1_Init+0x8c>)
 80004fe:	68db      	ldr	r3, [r3, #12]
 8000500:	4a0c      	ldr	r2, [pc, #48]	@ (8000534 <USART1_Init+0x8c>)
 8000502:	f043 032c 	orr.w	r3, r3, #44	@ 0x2c
 8000506:	60d3      	str	r3, [r2, #12]

	NVIC -> ISER[1] |= (1 << 5);								// Enables USART1 Global Interrupt
 8000508:	4b0b      	ldr	r3, [pc, #44]	@ (8000538 <USART1_Init+0x90>)
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	4a0a      	ldr	r2, [pc, #40]	@ (8000538 <USART1_Init+0x90>)
 800050e:	f043 0320 	orr.w	r3, r3, #32
 8000512:	6053      	str	r3, [r2, #4]

	USART1 -> CR1 |= (1 << 13);									// USART1 Enabled
 8000514:	4b07      	ldr	r3, [pc, #28]	@ (8000534 <USART1_Init+0x8c>)
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	4a06      	ldr	r2, [pc, #24]	@ (8000534 <USART1_Init+0x8c>)
 800051a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800051e:	60d3      	str	r3, [r2, #12]
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40023800 	.word	0x40023800
 8000530:	40020400 	.word	0x40020400
 8000534:	40011000 	.word	0x40011000
 8000538:	e000e100 	.word	0xe000e100

0800053c <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
    if(USART1->SR & (1 << 5)) {  // RXNE flag
 8000542:	4b18      	ldr	r3, [pc, #96]	@ (80005a4 <USART1_IRQHandler+0x68>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f003 0320 	and.w	r3, r3, #32
 800054a:	2b00      	cmp	r3, #0
 800054c:	d024      	beq.n	8000598 <USART1_IRQHandler+0x5c>
        char c = USART1->DR;
 800054e:	4b15      	ldr	r3, [pc, #84]	@ (80005a4 <USART1_IRQHandler+0x68>)
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	71fb      	strb	r3, [r7, #7]
        uint8_t next_head = (rx_head + 1) % RX_BUFFER_SIZE;
 8000554:	4b14      	ldr	r3, [pc, #80]	@ (80005a8 <USART1_IRQHandler+0x6c>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	b2db      	uxtb	r3, r3
 800055a:	3301      	adds	r3, #1
 800055c:	425a      	negs	r2, r3
 800055e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000562:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000566:	bf58      	it	pl
 8000568:	4253      	negpl	r3, r2
 800056a:	71bb      	strb	r3, [r7, #6]

        if(next_head != rx_tail) {  // If buffer not full
 800056c:	4b0f      	ldr	r3, [pc, #60]	@ (80005ac <USART1_IRQHandler+0x70>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	b2db      	uxtb	r3, r3
 8000572:	79ba      	ldrb	r2, [r7, #6]
 8000574:	429a      	cmp	r2, r3
 8000576:	d00f      	beq.n	8000598 <USART1_IRQHandler+0x5c>
            rx_buffer[rx_head] = c;
 8000578:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <USART1_IRQHandler+0x6c>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	b2db      	uxtb	r3, r3
 800057e:	4619      	mov	r1, r3
 8000580:	4a0b      	ldr	r2, [pc, #44]	@ (80005b0 <USART1_IRQHandler+0x74>)
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	5453      	strb	r3, [r2, r1]
            rx_head = next_head;
 8000586:	4a08      	ldr	r2, [pc, #32]	@ (80005a8 <USART1_IRQHandler+0x6c>)
 8000588:	79bb      	ldrb	r3, [r7, #6]
 800058a:	7013      	strb	r3, [r2, #0]

            if(c == '\n') {  // End of command
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	2b0a      	cmp	r3, #10
 8000590:	d102      	bne.n	8000598 <USART1_IRQHandler+0x5c>
                cmd_ready = true;
 8000592:	4b08      	ldr	r3, [pc, #32]	@ (80005b4 <USART1_IRQHandler+0x78>)
 8000594:	2201      	movs	r2, #1
 8000596:	701a      	strb	r2, [r3, #0]
            }
        }
    }
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	40011000 	.word	0x40011000
 80005a8:	200000bc 	.word	0x200000bc
 80005ac:	200000bd 	.word	0x200000bd
 80005b0:	2000007c 	.word	0x2000007c
 80005b4:	200000be 	.word	0x200000be

080005b8 <I2C1_Init>:

// I2C for sensor/s; Maybe more than 1 but starting with BH1750 light sensor
void I2C1_Init() {
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
	RCC -> AHB1ENR |= (1 << 1);									// GPIOB
 80005bc:	4b27      	ldr	r3, [pc, #156]	@ (800065c <I2C1_Init+0xa4>)
 80005be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c0:	4a26      	ldr	r2, [pc, #152]	@ (800065c <I2C1_Init+0xa4>)
 80005c2:	f043 0302 	orr.w	r3, r3, #2
 80005c6:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC -> APB1ENR |= (1 << 21);								// I2C1
 80005c8:	4b24      	ldr	r3, [pc, #144]	@ (800065c <I2C1_Init+0xa4>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005cc:	4a23      	ldr	r2, [pc, #140]	@ (800065c <I2C1_Init+0xa4>)
 80005ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005d2:	6413      	str	r3, [r2, #64]	@ 0x40

	GPIOB -> OTYPER &= ~((1 << 8) | (1 << 9));					// Open-Drain on PB8 & 9
 80005d4:	4b22      	ldr	r3, [pc, #136]	@ (8000660 <I2C1_Init+0xa8>)
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	4a21      	ldr	r2, [pc, #132]	@ (8000660 <I2C1_Init+0xa8>)
 80005da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80005de:	6053      	str	r3, [r2, #4]
	GPIOB -> OTYPER |= (1 << 8) | (1 << 9);
 80005e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000660 <I2C1_Init+0xa8>)
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	4a1e      	ldr	r2, [pc, #120]	@ (8000660 <I2C1_Init+0xa8>)
 80005e6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80005ea:	6053      	str	r3, [r2, #4]

	GPIOB -> PUPDR &= ~((3 << (2 * 8)) | (3 << (2 * 9)));		// Pull-Up on PB8 & 9
 80005ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000660 <I2C1_Init+0xa8>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000660 <I2C1_Init+0xa8>)
 80005f2:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80005f6:	60d3      	str	r3, [r2, #12]
	GPIOB -> PUPDR |= (1 << (2 * 8)) | (1 << (2 * 9));
 80005f8:	4b19      	ldr	r3, [pc, #100]	@ (8000660 <I2C1_Init+0xa8>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	4a18      	ldr	r2, [pc, #96]	@ (8000660 <I2C1_Init+0xa8>)
 80005fe:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000602:	60d3      	str	r3, [r2, #12]

	GPIOB -> MODER &= ~((3 << (2 * 8)) | (3 << (2 * 9)));		// PB8 & 9 Set to Alternate Function
 8000604:	4b16      	ldr	r3, [pc, #88]	@ (8000660 <I2C1_Init+0xa8>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a15      	ldr	r2, [pc, #84]	@ (8000660 <I2C1_Init+0xa8>)
 800060a:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800060e:	6013      	str	r3, [r2, #0]
	GPIOB -> MODER |= (2 << (2 * 8)) | (2 << (2 * 9));
 8000610:	4b13      	ldr	r3, [pc, #76]	@ (8000660 <I2C1_Init+0xa8>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a12      	ldr	r2, [pc, #72]	@ (8000660 <I2C1_Init+0xa8>)
 8000616:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 800061a:	6013      	str	r3, [r2, #0]

	GPIOB -> AFR[1] &= ~((15 << (4 * 0)) | (15 << (4 * 1)));	// Alternate Function to AF4
 800061c:	4b10      	ldr	r3, [pc, #64]	@ (8000660 <I2C1_Init+0xa8>)
 800061e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000620:	4a0f      	ldr	r2, [pc, #60]	@ (8000660 <I2C1_Init+0xa8>)
 8000622:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000626:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB -> AFR[1] |= (4 << (4 * 0)) | (4 << 4 * 1);
 8000628:	4b0d      	ldr	r3, [pc, #52]	@ (8000660 <I2C1_Init+0xa8>)
 800062a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800062c:	4a0c      	ldr	r2, [pc, #48]	@ (8000660 <I2C1_Init+0xa8>)
 800062e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8000632:	6253      	str	r3, [r2, #36]	@ 0x24

	I2C1 -> CR2 = 42;											// 42MHz Frequency
 8000634:	4b0b      	ldr	r3, [pc, #44]	@ (8000664 <I2C1_Init+0xac>)
 8000636:	222a      	movs	r2, #42	@ 0x2a
 8000638:	605a      	str	r2, [r3, #4]
	I2C1 -> CCR = 210; 											// 100kHz Frequency
 800063a:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <I2C1_Init+0xac>)
 800063c:	22d2      	movs	r2, #210	@ 0xd2
 800063e:	61da      	str	r2, [r3, #28]
	I2C1 -> TRISE = 43;											// Max Rise Time
 8000640:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <I2C1_Init+0xac>)
 8000642:	222b      	movs	r2, #43	@ 0x2b
 8000644:	621a      	str	r2, [r3, #32]
	I2C1 -> CR1 |= (1 << 0);									// I2C1 Enabled
 8000646:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <I2C1_Init+0xac>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a06      	ldr	r2, [pc, #24]	@ (8000664 <I2C1_Init+0xac>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6013      	str	r3, [r2, #0]
}
 8000652:	bf00      	nop
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	40023800 	.word	0x40023800
 8000660:	40020400 	.word	0x40020400
 8000664:	40005400 	.word	0x40005400

08000668 <I2C_Check_Busy>:

// Checks if I2C bus is busy
uint8_t I2C_Check_Busy() {
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
	if (I2C1 -> SR2 & (1 << 1)) {
 800066c:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <I2C_Check_Busy+0x20>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f003 0302 	and.w	r3, r3, #2
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <I2C_Check_Busy+0x14>
		return 1;
 8000678:	2301      	movs	r3, #1
 800067a:	e000      	b.n	800067e <I2C_Check_Busy+0x16>
	}
	return 0;
 800067c:	2300      	movs	r3, #0
}
 800067e:	4618      	mov	r0, r3
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	40005400 	.word	0x40005400

0800068c <I2C_Start>:

// Generates start condition
void I2C_Start() {
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
	I2C1 -> CR1 |= (1 << 8);
 8000690:	4b09      	ldr	r3, [pc, #36]	@ (80006b8 <I2C_Start+0x2c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a08      	ldr	r2, [pc, #32]	@ (80006b8 <I2C_Start+0x2c>)
 8000696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800069a:	6013      	str	r3, [r2, #0]
	while (!(I2C1 -> SR1 & (1 << 0)));
 800069c:	bf00      	nop
 800069e:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <I2C_Start+0x2c>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d0f9      	beq.n	800069e <I2C_Start+0x12>
}
 80006aa:	bf00      	nop
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40005400 	.word	0x40005400

080006bc <I2C_Send_Address>:

// Sends device address and clears associated flags
void I2C_Send_Address(uint8_t addr, uint8_t read) {
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	460a      	mov	r2, r1
 80006c6:	71fb      	strb	r3, [r7, #7]
 80006c8:	4613      	mov	r3, r2
 80006ca:	71bb      	strb	r3, [r7, #6]
	I2C1 -> DR = (addr << 1) | read;
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	005a      	lsls	r2, r3, #1
 80006d0:	79bb      	ldrb	r3, [r7, #6]
 80006d2:	431a      	orrs	r2, r3
 80006d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000700 <I2C_Send_Address+0x44>)
 80006d6:	611a      	str	r2, [r3, #16]
	while(!(I2C1 -> SR1 & (1 << 1)));
 80006d8:	bf00      	nop
 80006da:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <I2C_Send_Address+0x44>)
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d0f9      	beq.n	80006da <I2C_Send_Address+0x1e>

	uint8_t temp = I2C1 -> SR1;
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <I2C_Send_Address+0x44>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	73fb      	strb	r3, [r7, #15]
	temp = I2C1 -> SR2;
 80006ec:	4b04      	ldr	r3, [pc, #16]	@ (8000700 <I2C_Send_Address+0x44>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	73fb      	strb	r3, [r7, #15]
	(void) temp;
}
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40005400 	.word	0x40005400

08000704 <I2C_Send_Data>:

// Sends a byte of data to device from master
void I2C_Send_Data(uint8_t data) {
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
	I2C1 -> DR = data;
 800070e:	4a08      	ldr	r2, [pc, #32]	@ (8000730 <I2C_Send_Data+0x2c>)
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	6113      	str	r3, [r2, #16]
	while(!(I2C1 -> SR1 & (1 << 2)));
 8000714:	bf00      	nop
 8000716:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <I2C_Send_Data+0x2c>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	f003 0304 	and.w	r3, r3, #4
 800071e:	2b00      	cmp	r3, #0
 8000720:	d0f9      	beq.n	8000716 <I2C_Send_Data+0x12>
}
 8000722:	bf00      	nop
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	40005400 	.word	0x40005400

08000734 <I2C_Stop>:

// Generates stop condition
void I2C_Stop() {
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
	I2C1 -> CR1 |= (1 << 9);
 8000738:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <I2C_Stop+0x1c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a04      	ldr	r2, [pc, #16]	@ (8000750 <I2C_Stop+0x1c>)
 800073e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000742:	6013      	str	r3, [r2, #0]
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40005400 	.word	0x40005400

08000754 <I2C_Write>:

// Entire write to a device
void I2C_Write(uint8_t addr, uint8_t data) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	460a      	mov	r2, r1
 800075e:	71fb      	strb	r3, [r7, #7]
 8000760:	4613      	mov	r3, r2
 8000762:	71bb      	strb	r3, [r7, #6]
	while(I2C_Check_Busy());
 8000764:	bf00      	nop
 8000766:	f7ff ff7f 	bl	8000668 <I2C_Check_Busy>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d1fa      	bne.n	8000766 <I2C_Write+0x12>
	I2C_Start();
 8000770:	f7ff ff8c 	bl	800068c <I2C_Start>
	I2C_Send_Address(addr, 0);
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ff9f 	bl	80006bc <I2C_Send_Address>
	I2C_Send_Data(data);
 800077e:	79bb      	ldrb	r3, [r7, #6]
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ffbf 	bl	8000704 <I2C_Send_Data>
	I2C_Stop();
 8000786:	f7ff ffd5 	bl	8000734 <I2C_Stop>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <Light_Sensor_Init>:

// Initializes BH1750 light sensor
void Light_Sensor_Init() {
 8000792:	b580      	push	{r7, lr}
 8000794:	af00      	add	r7, sp, #0
	I2C_Write(LIGHT_ADDR, LIGHT_ON);
 8000796:	2101      	movs	r1, #1
 8000798:	2023      	movs	r0, #35	@ 0x23
 800079a:	f7ff ffdb 	bl	8000754 <I2C_Write>
	I2C_Write(LIGHT_ADDR, LIGHT_CONT);
 800079e:	2110      	movs	r1, #16
 80007a0:	2023      	movs	r0, #35	@ 0x23
 80007a2:	f7ff ffd7 	bl	8000754 <I2C_Write>
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <Light_Read>:

// Returns the value from the light sensor
uint16_t Light_Read() {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
	uint8_t upper, lower;

	while(I2C_Check_Busy());
 80007b2:	bf00      	nop
 80007b4:	f7ff ff58 	bl	8000668 <I2C_Check_Busy>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d1fa      	bne.n	80007b4 <Light_Read+0x8>
	I2C_Start();
 80007be:	f7ff ff65 	bl	800068c <I2C_Start>
	I2C_Send_Address(LIGHT_ADDR, 1);
 80007c2:	2101      	movs	r1, #1
 80007c4:	2023      	movs	r0, #35	@ 0x23
 80007c6:	f7ff ff79 	bl	80006bc <I2C_Send_Address>

	I2C1 -> CR1 |= (1 << 10);
 80007ca:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <Light_Read+0x7c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a16      	ldr	r2, [pc, #88]	@ (8000828 <Light_Read+0x7c>)
 80007d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007d4:	6013      	str	r3, [r2, #0]
	while(!(I2C1 -> SR1 & (1 << 6)));
 80007d6:	bf00      	nop
 80007d8:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <Light_Read+0x7c>)
 80007da:	695b      	ldr	r3, [r3, #20]
 80007dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d0f9      	beq.n	80007d8 <Light_Read+0x2c>
	upper = I2C1 -> DR;
 80007e4:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <Light_Read+0x7c>)
 80007e6:	691b      	ldr	r3, [r3, #16]
 80007e8:	71fb      	strb	r3, [r7, #7]

	I2C1 -> CR1 &= ~(1 << 10);
 80007ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <Light_Read+0x7c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000828 <Light_Read+0x7c>)
 80007f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80007f4:	6013      	str	r3, [r2, #0]

	while(!(I2C1 -> SR1 & (1 << 6)));
 80007f6:	bf00      	nop
 80007f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <Light_Read+0x7c>)
 80007fa:	695b      	ldr	r3, [r3, #20]
 80007fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000800:	2b00      	cmp	r3, #0
 8000802:	d0f9      	beq.n	80007f8 <Light_Read+0x4c>
	lower = I2C1 -> DR;
 8000804:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <Light_Read+0x7c>)
 8000806:	691b      	ldr	r3, [r3, #16]
 8000808:	71bb      	strb	r3, [r7, #6]

	I2C_Stop();
 800080a:	f7ff ff93 	bl	8000734 <I2C_Stop>

	uint16_t value = (upper << 8) | lower;
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	021b      	lsls	r3, r3, #8
 8000812:	b21a      	sxth	r2, r3
 8000814:	79bb      	ldrb	r3, [r7, #6]
 8000816:	b21b      	sxth	r3, r3
 8000818:	4313      	orrs	r3, r2
 800081a:	b21b      	sxth	r3, r3
 800081c:	80bb      	strh	r3, [r7, #4]
	return value;
 800081e:	88bb      	ldrh	r3, [r7, #4]
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40005400 	.word	0x40005400

0800082c <__io_putchar>:


// printf retarget with putchar
int __io_putchar(int c) {
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
    while(!(USART2 -> SR & (1 << 7)));
 8000834:	bf00      	nop
 8000836:	4b11      	ldr	r3, [pc, #68]	@ (800087c <__io_putchar+0x50>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800083e:	2b00      	cmp	r3, #0
 8000840:	d0f9      	beq.n	8000836 <__io_putchar+0xa>
    USART2 -> DR = c;
 8000842:	4a0e      	ldr	r2, [pc, #56]	@ (800087c <__io_putchar+0x50>)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	6053      	str	r3, [r2, #4]

    while(!(USART2 -> SR & (1 << 6)));
 8000848:	bf00      	nop
 800084a:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <__io_putchar+0x50>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0f9      	beq.n	800084a <__io_putchar+0x1e>
    USART2 -> SR &= ~(1 << 6);
 8000856:	4b09      	ldr	r3, [pc, #36]	@ (800087c <__io_putchar+0x50>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a08      	ldr	r2, [pc, #32]	@ (800087c <__io_putchar+0x50>)
 800085c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000860:	6013      	str	r3, [r2, #0]
    USART2 -> SR &= ~(1 << 5);
 8000862:	4b06      	ldr	r3, [pc, #24]	@ (800087c <__io_putchar+0x50>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a05      	ldr	r2, [pc, #20]	@ (800087c <__io_putchar+0x50>)
 8000868:	f023 0320 	bic.w	r3, r3, #32
 800086c:	6013      	str	r3, [r2, #0]

    return c;
 800086e:	687b      	ldr	r3, [r7, #4]
}
 8000870:	4618      	mov	r0, r3
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	40004400 	.word	0x40004400

08000880 <Bluetooth_Print>:

void Bluetooth_Print(const char* str) {
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
    while(*str) {
 8000888:	e00d      	b.n	80008a6 <Bluetooth_Print+0x26>
        while(!(USART1->SR & (1 << 7)));
 800088a:	bf00      	nop
 800088c:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <Bluetooth_Print+0x4c>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000894:	2b00      	cmp	r3, #0
 8000896:	d0f9      	beq.n	800088c <Bluetooth_Print+0xc>
        USART1->DR = *str;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	781a      	ldrb	r2, [r3, #0]
 800089c:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <Bluetooth_Print+0x4c>)
 800089e:	605a      	str	r2, [r3, #4]
        str++;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3301      	adds	r3, #1
 80008a4:	607b      	str	r3, [r7, #4]
    while(*str) {
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d1ed      	bne.n	800088a <Bluetooth_Print+0xa>
    }
    while(!(USART1->SR & (1 << 6)));
 80008ae:	bf00      	nop
 80008b0:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <Bluetooth_Print+0x4c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d0f9      	beq.n	80008b0 <Bluetooth_Print+0x30>
}
 80008bc:	bf00      	nop
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	40011000 	.word	0x40011000

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <NMI_Handler+0x4>

080008d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <HardFault_Handler+0x4>

080008e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <MemManage_Handler+0x4>

080008e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <BusFault_Handler+0x4>

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <UsageFault_Handler+0x4>

080008f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000926:	f000 f8e1 	bl	8000aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}

0800092e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b086      	sub	sp, #24
 8000932:	af00      	add	r7, sp, #0
 8000934:	60f8      	str	r0, [r7, #12]
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
 800093e:	e00a      	b.n	8000956 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000940:	f3af 8000 	nop.w
 8000944:	4601      	mov	r1, r0
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	1c5a      	adds	r2, r3, #1
 800094a:	60ba      	str	r2, [r7, #8]
 800094c:	b2ca      	uxtb	r2, r1
 800094e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	3301      	adds	r3, #1
 8000954:	617b      	str	r3, [r7, #20]
 8000956:	697a      	ldr	r2, [r7, #20]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	429a      	cmp	r2, r3
 800095c:	dbf0      	blt.n	8000940 <_read+0x12>
  }

  return len;
 800095e:	687b      	ldr	r3, [r7, #4]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	e009      	b.n	800098e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	1c5a      	adds	r2, r3, #1
 800097e:	60ba      	str	r2, [r7, #8]
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff ff52 	bl	800082c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	3301      	adds	r3, #1
 800098c:	617b      	str	r3, [r7, #20]
 800098e:	697a      	ldr	r2, [r7, #20]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	429a      	cmp	r2, r3
 8000994:	dbf1      	blt.n	800097a <_write+0x12>
  }
  return len;
 8000996:	687b      	ldr	r3, [r7, #4]
}
 8000998:	4618      	mov	r0, r3
 800099a:	3718      	adds	r7, #24
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <_close>:

int _close(int file)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009c8:	605a      	str	r2, [r3, #4]
  return 0;
 80009ca:	2300      	movs	r3, #0
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <_isatty>:

int _isatty(int file)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009e0:	2301      	movs	r3, #1
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b085      	sub	sp, #20
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	60f8      	str	r0, [r7, #12]
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009fa:	2300      	movs	r3, #0
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a10:	4a14      	ldr	r2, [pc, #80]	@ (8000a64 <_sbrk+0x5c>)
 8000a12:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <_sbrk+0x60>)
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a1c:	4b13      	ldr	r3, [pc, #76]	@ (8000a6c <_sbrk+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d102      	bne.n	8000a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a24:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <_sbrk+0x64>)
 8000a26:	4a12      	ldr	r2, [pc, #72]	@ (8000a70 <_sbrk+0x68>)
 8000a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a2a:	4b10      	ldr	r3, [pc, #64]	@ (8000a6c <_sbrk+0x64>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d207      	bcs.n	8000a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a38:	f000 fae4 	bl	8001004 <__errno>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	220c      	movs	r2, #12
 8000a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a42:	f04f 33ff 	mov.w	r3, #4294967295
 8000a46:	e009      	b.n	8000a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a48:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <_sbrk+0x64>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a4e:	4b07      	ldr	r3, [pc, #28]	@ (8000a6c <_sbrk+0x64>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4413      	add	r3, r2
 8000a56:	4a05      	ldr	r2, [pc, #20]	@ (8000a6c <_sbrk+0x64>)
 8000a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3718      	adds	r7, #24
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20020000 	.word	0x20020000
 8000a68:	00000400 	.word	0x00000400
 8000a6c:	200000c0 	.word	0x200000c0
 8000a70:	20000218 	.word	0x20000218

08000a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <SystemInit+0x20>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a7e:	4a05      	ldr	r2, [pc, #20]	@ (8000a94 <SystemInit+0x20>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ad0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a9c:	f7ff ffea 	bl	8000a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aa0:	480c      	ldr	r0, [pc, #48]	@ (8000ad4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aa2:	490d      	ldr	r1, [pc, #52]	@ (8000ad8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000adc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa8:	e002      	b.n	8000ab0 <LoopCopyDataInit>

08000aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aae:	3304      	adds	r3, #4

08000ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab4:	d3f9      	bcc.n	8000aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ab8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ae4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000abc:	e001      	b.n	8000ac2 <LoopFillZerobss>

08000abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac0:	3204      	adds	r2, #4

08000ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac4:	d3fb      	bcc.n	8000abe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ac6:	f000 faa3 	bl	8001010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aca:	f7ff fc01 	bl	80002d0 <main>
  bx  lr    
 8000ace:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ad0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000adc:	08001ef4 	.word	0x08001ef4
  ldr r2, =_sbss
 8000ae0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ae4:	20000214 	.word	0x20000214

08000ae8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae8:	e7fe      	b.n	8000ae8 <ADC_IRQHandler>
	...

08000aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af0:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <HAL_IncTick+0x20>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <HAL_IncTick+0x24>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4413      	add	r3, r2
 8000afc:	4a04      	ldr	r2, [pc, #16]	@ (8000b10 <HAL_IncTick+0x24>)
 8000afe:	6013      	str	r3, [r2, #0]
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	200000c4 	.word	0x200000c4

08000b14 <std>:
 8000b14:	2300      	movs	r3, #0
 8000b16:	b510      	push	{r4, lr}
 8000b18:	4604      	mov	r4, r0
 8000b1a:	e9c0 3300 	strd	r3, r3, [r0]
 8000b1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b22:	6083      	str	r3, [r0, #8]
 8000b24:	8181      	strh	r1, [r0, #12]
 8000b26:	6643      	str	r3, [r0, #100]	@ 0x64
 8000b28:	81c2      	strh	r2, [r0, #14]
 8000b2a:	6183      	str	r3, [r0, #24]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	2208      	movs	r2, #8
 8000b30:	305c      	adds	r0, #92	@ 0x5c
 8000b32:	f000 fa19 	bl	8000f68 <memset>
 8000b36:	4b0d      	ldr	r3, [pc, #52]	@ (8000b6c <std+0x58>)
 8000b38:	6263      	str	r3, [r4, #36]	@ 0x24
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b70 <std+0x5c>)
 8000b3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b74 <std+0x60>)
 8000b40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000b42:	4b0d      	ldr	r3, [pc, #52]	@ (8000b78 <std+0x64>)
 8000b44:	6323      	str	r3, [r4, #48]	@ 0x30
 8000b46:	4b0d      	ldr	r3, [pc, #52]	@ (8000b7c <std+0x68>)
 8000b48:	6224      	str	r4, [r4, #32]
 8000b4a:	429c      	cmp	r4, r3
 8000b4c:	d006      	beq.n	8000b5c <std+0x48>
 8000b4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000b52:	4294      	cmp	r4, r2
 8000b54:	d002      	beq.n	8000b5c <std+0x48>
 8000b56:	33d0      	adds	r3, #208	@ 0xd0
 8000b58:	429c      	cmp	r4, r3
 8000b5a:	d105      	bne.n	8000b68 <std+0x54>
 8000b5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b64:	f000 ba78 	b.w	8001058 <__retarget_lock_init_recursive>
 8000b68:	bd10      	pop	{r4, pc}
 8000b6a:	bf00      	nop
 8000b6c:	08000db9 	.word	0x08000db9
 8000b70:	08000ddb 	.word	0x08000ddb
 8000b74:	08000e13 	.word	0x08000e13
 8000b78:	08000e37 	.word	0x08000e37
 8000b7c:	200000c8 	.word	0x200000c8

08000b80 <stdio_exit_handler>:
 8000b80:	4a02      	ldr	r2, [pc, #8]	@ (8000b8c <stdio_exit_handler+0xc>)
 8000b82:	4903      	ldr	r1, [pc, #12]	@ (8000b90 <stdio_exit_handler+0x10>)
 8000b84:	4803      	ldr	r0, [pc, #12]	@ (8000b94 <stdio_exit_handler+0x14>)
 8000b86:	f000 b869 	b.w	8000c5c <_fwalk_sglue>
 8000b8a:	bf00      	nop
 8000b8c:	20000004 	.word	0x20000004
 8000b90:	08001ba9 	.word	0x08001ba9
 8000b94:	20000014 	.word	0x20000014

08000b98 <cleanup_stdio>:
 8000b98:	6841      	ldr	r1, [r0, #4]
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <cleanup_stdio+0x34>)
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	b510      	push	{r4, lr}
 8000ba0:	4604      	mov	r4, r0
 8000ba2:	d001      	beq.n	8000ba8 <cleanup_stdio+0x10>
 8000ba4:	f001 f800 	bl	8001ba8 <_fflush_r>
 8000ba8:	68a1      	ldr	r1, [r4, #8]
 8000baa:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <cleanup_stdio+0x38>)
 8000bac:	4299      	cmp	r1, r3
 8000bae:	d002      	beq.n	8000bb6 <cleanup_stdio+0x1e>
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	f000 fff9 	bl	8001ba8 <_fflush_r>
 8000bb6:	68e1      	ldr	r1, [r4, #12]
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <cleanup_stdio+0x3c>)
 8000bba:	4299      	cmp	r1, r3
 8000bbc:	d004      	beq.n	8000bc8 <cleanup_stdio+0x30>
 8000bbe:	4620      	mov	r0, r4
 8000bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bc4:	f000 bff0 	b.w	8001ba8 <_fflush_r>
 8000bc8:	bd10      	pop	{r4, pc}
 8000bca:	bf00      	nop
 8000bcc:	200000c8 	.word	0x200000c8
 8000bd0:	20000130 	.word	0x20000130
 8000bd4:	20000198 	.word	0x20000198

08000bd8 <global_stdio_init.part.0>:
 8000bd8:	b510      	push	{r4, lr}
 8000bda:	4b0b      	ldr	r3, [pc, #44]	@ (8000c08 <global_stdio_init.part.0+0x30>)
 8000bdc:	4c0b      	ldr	r4, [pc, #44]	@ (8000c0c <global_stdio_init.part.0+0x34>)
 8000bde:	4a0c      	ldr	r2, [pc, #48]	@ (8000c10 <global_stdio_init.part.0+0x38>)
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	4620      	mov	r0, r4
 8000be4:	2200      	movs	r2, #0
 8000be6:	2104      	movs	r1, #4
 8000be8:	f7ff ff94 	bl	8000b14 <std>
 8000bec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2109      	movs	r1, #9
 8000bf4:	f7ff ff8e 	bl	8000b14 <std>
 8000bf8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c02:	2112      	movs	r1, #18
 8000c04:	f7ff bf86 	b.w	8000b14 <std>
 8000c08:	20000200 	.word	0x20000200
 8000c0c:	200000c8 	.word	0x200000c8
 8000c10:	08000b81 	.word	0x08000b81

08000c14 <__sfp_lock_acquire>:
 8000c14:	4801      	ldr	r0, [pc, #4]	@ (8000c1c <__sfp_lock_acquire+0x8>)
 8000c16:	f000 ba20 	b.w	800105a <__retarget_lock_acquire_recursive>
 8000c1a:	bf00      	nop
 8000c1c:	20000209 	.word	0x20000209

08000c20 <__sfp_lock_release>:
 8000c20:	4801      	ldr	r0, [pc, #4]	@ (8000c28 <__sfp_lock_release+0x8>)
 8000c22:	f000 ba1b 	b.w	800105c <__retarget_lock_release_recursive>
 8000c26:	bf00      	nop
 8000c28:	20000209 	.word	0x20000209

08000c2c <__sinit>:
 8000c2c:	b510      	push	{r4, lr}
 8000c2e:	4604      	mov	r4, r0
 8000c30:	f7ff fff0 	bl	8000c14 <__sfp_lock_acquire>
 8000c34:	6a23      	ldr	r3, [r4, #32]
 8000c36:	b11b      	cbz	r3, 8000c40 <__sinit+0x14>
 8000c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c3c:	f7ff bff0 	b.w	8000c20 <__sfp_lock_release>
 8000c40:	4b04      	ldr	r3, [pc, #16]	@ (8000c54 <__sinit+0x28>)
 8000c42:	6223      	str	r3, [r4, #32]
 8000c44:	4b04      	ldr	r3, [pc, #16]	@ (8000c58 <__sinit+0x2c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1f5      	bne.n	8000c38 <__sinit+0xc>
 8000c4c:	f7ff ffc4 	bl	8000bd8 <global_stdio_init.part.0>
 8000c50:	e7f2      	b.n	8000c38 <__sinit+0xc>
 8000c52:	bf00      	nop
 8000c54:	08000b99 	.word	0x08000b99
 8000c58:	20000200 	.word	0x20000200

08000c5c <_fwalk_sglue>:
 8000c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c60:	4607      	mov	r7, r0
 8000c62:	4688      	mov	r8, r1
 8000c64:	4614      	mov	r4, r2
 8000c66:	2600      	movs	r6, #0
 8000c68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c6c:	f1b9 0901 	subs.w	r9, r9, #1
 8000c70:	d505      	bpl.n	8000c7e <_fwalk_sglue+0x22>
 8000c72:	6824      	ldr	r4, [r4, #0]
 8000c74:	2c00      	cmp	r4, #0
 8000c76:	d1f7      	bne.n	8000c68 <_fwalk_sglue+0xc>
 8000c78:	4630      	mov	r0, r6
 8000c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c7e:	89ab      	ldrh	r3, [r5, #12]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d907      	bls.n	8000c94 <_fwalk_sglue+0x38>
 8000c84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	d003      	beq.n	8000c94 <_fwalk_sglue+0x38>
 8000c8c:	4629      	mov	r1, r5
 8000c8e:	4638      	mov	r0, r7
 8000c90:	47c0      	blx	r8
 8000c92:	4306      	orrs	r6, r0
 8000c94:	3568      	adds	r5, #104	@ 0x68
 8000c96:	e7e9      	b.n	8000c6c <_fwalk_sglue+0x10>

08000c98 <iprintf>:
 8000c98:	b40f      	push	{r0, r1, r2, r3}
 8000c9a:	b507      	push	{r0, r1, r2, lr}
 8000c9c:	4906      	ldr	r1, [pc, #24]	@ (8000cb8 <iprintf+0x20>)
 8000c9e:	ab04      	add	r3, sp, #16
 8000ca0:	6808      	ldr	r0, [r1, #0]
 8000ca2:	f853 2b04 	ldr.w	r2, [r3], #4
 8000ca6:	6881      	ldr	r1, [r0, #8]
 8000ca8:	9301      	str	r3, [sp, #4]
 8000caa:	f000 fc53 	bl	8001554 <_vfiprintf_r>
 8000cae:	b003      	add	sp, #12
 8000cb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr
 8000cb8:	20000010 	.word	0x20000010

08000cbc <_puts_r>:
 8000cbc:	6a03      	ldr	r3, [r0, #32]
 8000cbe:	b570      	push	{r4, r5, r6, lr}
 8000cc0:	6884      	ldr	r4, [r0, #8]
 8000cc2:	4605      	mov	r5, r0
 8000cc4:	460e      	mov	r6, r1
 8000cc6:	b90b      	cbnz	r3, 8000ccc <_puts_r+0x10>
 8000cc8:	f7ff ffb0 	bl	8000c2c <__sinit>
 8000ccc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000cce:	07db      	lsls	r3, r3, #31
 8000cd0:	d405      	bmi.n	8000cde <_puts_r+0x22>
 8000cd2:	89a3      	ldrh	r3, [r4, #12]
 8000cd4:	0598      	lsls	r0, r3, #22
 8000cd6:	d402      	bmi.n	8000cde <_puts_r+0x22>
 8000cd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000cda:	f000 f9be 	bl	800105a <__retarget_lock_acquire_recursive>
 8000cde:	89a3      	ldrh	r3, [r4, #12]
 8000ce0:	0719      	lsls	r1, r3, #28
 8000ce2:	d502      	bpl.n	8000cea <_puts_r+0x2e>
 8000ce4:	6923      	ldr	r3, [r4, #16]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d135      	bne.n	8000d56 <_puts_r+0x9a>
 8000cea:	4621      	mov	r1, r4
 8000cec:	4628      	mov	r0, r5
 8000cee:	f000 f8e5 	bl	8000ebc <__swsetup_r>
 8000cf2:	b380      	cbz	r0, 8000d56 <_puts_r+0x9a>
 8000cf4:	f04f 35ff 	mov.w	r5, #4294967295
 8000cf8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000cfa:	07da      	lsls	r2, r3, #31
 8000cfc:	d405      	bmi.n	8000d0a <_puts_r+0x4e>
 8000cfe:	89a3      	ldrh	r3, [r4, #12]
 8000d00:	059b      	lsls	r3, r3, #22
 8000d02:	d402      	bmi.n	8000d0a <_puts_r+0x4e>
 8000d04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d06:	f000 f9a9 	bl	800105c <__retarget_lock_release_recursive>
 8000d0a:	4628      	mov	r0, r5
 8000d0c:	bd70      	pop	{r4, r5, r6, pc}
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	da04      	bge.n	8000d1c <_puts_r+0x60>
 8000d12:	69a2      	ldr	r2, [r4, #24]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	dc17      	bgt.n	8000d48 <_puts_r+0x8c>
 8000d18:	290a      	cmp	r1, #10
 8000d1a:	d015      	beq.n	8000d48 <_puts_r+0x8c>
 8000d1c:	6823      	ldr	r3, [r4, #0]
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	6022      	str	r2, [r4, #0]
 8000d22:	7019      	strb	r1, [r3, #0]
 8000d24:	68a3      	ldr	r3, [r4, #8]
 8000d26:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	60a3      	str	r3, [r4, #8]
 8000d2e:	2900      	cmp	r1, #0
 8000d30:	d1ed      	bne.n	8000d0e <_puts_r+0x52>
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	da11      	bge.n	8000d5a <_puts_r+0x9e>
 8000d36:	4622      	mov	r2, r4
 8000d38:	210a      	movs	r1, #10
 8000d3a:	4628      	mov	r0, r5
 8000d3c:	f000 f87f 	bl	8000e3e <__swbuf_r>
 8000d40:	3001      	adds	r0, #1
 8000d42:	d0d7      	beq.n	8000cf4 <_puts_r+0x38>
 8000d44:	250a      	movs	r5, #10
 8000d46:	e7d7      	b.n	8000cf8 <_puts_r+0x3c>
 8000d48:	4622      	mov	r2, r4
 8000d4a:	4628      	mov	r0, r5
 8000d4c:	f000 f877 	bl	8000e3e <__swbuf_r>
 8000d50:	3001      	adds	r0, #1
 8000d52:	d1e7      	bne.n	8000d24 <_puts_r+0x68>
 8000d54:	e7ce      	b.n	8000cf4 <_puts_r+0x38>
 8000d56:	3e01      	subs	r6, #1
 8000d58:	e7e4      	b.n	8000d24 <_puts_r+0x68>
 8000d5a:	6823      	ldr	r3, [r4, #0]
 8000d5c:	1c5a      	adds	r2, r3, #1
 8000d5e:	6022      	str	r2, [r4, #0]
 8000d60:	220a      	movs	r2, #10
 8000d62:	701a      	strb	r2, [r3, #0]
 8000d64:	e7ee      	b.n	8000d44 <_puts_r+0x88>
	...

08000d68 <puts>:
 8000d68:	4b02      	ldr	r3, [pc, #8]	@ (8000d74 <puts+0xc>)
 8000d6a:	4601      	mov	r1, r0
 8000d6c:	6818      	ldr	r0, [r3, #0]
 8000d6e:	f7ff bfa5 	b.w	8000cbc <_puts_r>
 8000d72:	bf00      	nop
 8000d74:	20000010 	.word	0x20000010

08000d78 <siprintf>:
 8000d78:	b40e      	push	{r1, r2, r3}
 8000d7a:	b500      	push	{lr}
 8000d7c:	b09c      	sub	sp, #112	@ 0x70
 8000d7e:	ab1d      	add	r3, sp, #116	@ 0x74
 8000d80:	9002      	str	r0, [sp, #8]
 8000d82:	9006      	str	r0, [sp, #24]
 8000d84:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000d88:	4809      	ldr	r0, [pc, #36]	@ (8000db0 <siprintf+0x38>)
 8000d8a:	9107      	str	r1, [sp, #28]
 8000d8c:	9104      	str	r1, [sp, #16]
 8000d8e:	4909      	ldr	r1, [pc, #36]	@ (8000db4 <siprintf+0x3c>)
 8000d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8000d94:	9105      	str	r1, [sp, #20]
 8000d96:	6800      	ldr	r0, [r0, #0]
 8000d98:	9301      	str	r3, [sp, #4]
 8000d9a:	a902      	add	r1, sp, #8
 8000d9c:	f000 fab4 	bl	8001308 <_svfiprintf_r>
 8000da0:	9b02      	ldr	r3, [sp, #8]
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	b01c      	add	sp, #112	@ 0x70
 8000da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8000dac:	b003      	add	sp, #12
 8000dae:	4770      	bx	lr
 8000db0:	20000010 	.word	0x20000010
 8000db4:	ffff0208 	.word	0xffff0208

08000db8 <__sread>:
 8000db8:	b510      	push	{r4, lr}
 8000dba:	460c      	mov	r4, r1
 8000dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dc0:	f000 f8fc 	bl	8000fbc <_read_r>
 8000dc4:	2800      	cmp	r0, #0
 8000dc6:	bfab      	itete	ge
 8000dc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000dca:	89a3      	ldrhlt	r3, [r4, #12]
 8000dcc:	181b      	addge	r3, r3, r0
 8000dce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000dd2:	bfac      	ite	ge
 8000dd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000dd6:	81a3      	strhlt	r3, [r4, #12]
 8000dd8:	bd10      	pop	{r4, pc}

08000dda <__swrite>:
 8000dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dde:	461f      	mov	r7, r3
 8000de0:	898b      	ldrh	r3, [r1, #12]
 8000de2:	05db      	lsls	r3, r3, #23
 8000de4:	4605      	mov	r5, r0
 8000de6:	460c      	mov	r4, r1
 8000de8:	4616      	mov	r6, r2
 8000dea:	d505      	bpl.n	8000df8 <__swrite+0x1e>
 8000dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000df0:	2302      	movs	r3, #2
 8000df2:	2200      	movs	r2, #0
 8000df4:	f000 f8d0 	bl	8000f98 <_lseek_r>
 8000df8:	89a3      	ldrh	r3, [r4, #12]
 8000dfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000dfe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000e02:	81a3      	strh	r3, [r4, #12]
 8000e04:	4632      	mov	r2, r6
 8000e06:	463b      	mov	r3, r7
 8000e08:	4628      	mov	r0, r5
 8000e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e0e:	f000 b8e7 	b.w	8000fe0 <_write_r>

08000e12 <__sseek>:
 8000e12:	b510      	push	{r4, lr}
 8000e14:	460c      	mov	r4, r1
 8000e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e1a:	f000 f8bd 	bl	8000f98 <_lseek_r>
 8000e1e:	1c43      	adds	r3, r0, #1
 8000e20:	89a3      	ldrh	r3, [r4, #12]
 8000e22:	bf15      	itete	ne
 8000e24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000e26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000e2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000e2e:	81a3      	strheq	r3, [r4, #12]
 8000e30:	bf18      	it	ne
 8000e32:	81a3      	strhne	r3, [r4, #12]
 8000e34:	bd10      	pop	{r4, pc}

08000e36 <__sclose>:
 8000e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e3a:	f000 b89d 	b.w	8000f78 <_close_r>

08000e3e <__swbuf_r>:
 8000e3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e40:	460e      	mov	r6, r1
 8000e42:	4614      	mov	r4, r2
 8000e44:	4605      	mov	r5, r0
 8000e46:	b118      	cbz	r0, 8000e50 <__swbuf_r+0x12>
 8000e48:	6a03      	ldr	r3, [r0, #32]
 8000e4a:	b90b      	cbnz	r3, 8000e50 <__swbuf_r+0x12>
 8000e4c:	f7ff feee 	bl	8000c2c <__sinit>
 8000e50:	69a3      	ldr	r3, [r4, #24]
 8000e52:	60a3      	str	r3, [r4, #8]
 8000e54:	89a3      	ldrh	r3, [r4, #12]
 8000e56:	071a      	lsls	r2, r3, #28
 8000e58:	d501      	bpl.n	8000e5e <__swbuf_r+0x20>
 8000e5a:	6923      	ldr	r3, [r4, #16]
 8000e5c:	b943      	cbnz	r3, 8000e70 <__swbuf_r+0x32>
 8000e5e:	4621      	mov	r1, r4
 8000e60:	4628      	mov	r0, r5
 8000e62:	f000 f82b 	bl	8000ebc <__swsetup_r>
 8000e66:	b118      	cbz	r0, 8000e70 <__swbuf_r+0x32>
 8000e68:	f04f 37ff 	mov.w	r7, #4294967295
 8000e6c:	4638      	mov	r0, r7
 8000e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e70:	6823      	ldr	r3, [r4, #0]
 8000e72:	6922      	ldr	r2, [r4, #16]
 8000e74:	1a98      	subs	r0, r3, r2
 8000e76:	6963      	ldr	r3, [r4, #20]
 8000e78:	b2f6      	uxtb	r6, r6
 8000e7a:	4283      	cmp	r3, r0
 8000e7c:	4637      	mov	r7, r6
 8000e7e:	dc05      	bgt.n	8000e8c <__swbuf_r+0x4e>
 8000e80:	4621      	mov	r1, r4
 8000e82:	4628      	mov	r0, r5
 8000e84:	f000 fe90 	bl	8001ba8 <_fflush_r>
 8000e88:	2800      	cmp	r0, #0
 8000e8a:	d1ed      	bne.n	8000e68 <__swbuf_r+0x2a>
 8000e8c:	68a3      	ldr	r3, [r4, #8]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	60a3      	str	r3, [r4, #8]
 8000e92:	6823      	ldr	r3, [r4, #0]
 8000e94:	1c5a      	adds	r2, r3, #1
 8000e96:	6022      	str	r2, [r4, #0]
 8000e98:	701e      	strb	r6, [r3, #0]
 8000e9a:	6962      	ldr	r2, [r4, #20]
 8000e9c:	1c43      	adds	r3, r0, #1
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d004      	beq.n	8000eac <__swbuf_r+0x6e>
 8000ea2:	89a3      	ldrh	r3, [r4, #12]
 8000ea4:	07db      	lsls	r3, r3, #31
 8000ea6:	d5e1      	bpl.n	8000e6c <__swbuf_r+0x2e>
 8000ea8:	2e0a      	cmp	r6, #10
 8000eaa:	d1df      	bne.n	8000e6c <__swbuf_r+0x2e>
 8000eac:	4621      	mov	r1, r4
 8000eae:	4628      	mov	r0, r5
 8000eb0:	f000 fe7a 	bl	8001ba8 <_fflush_r>
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	d0d9      	beq.n	8000e6c <__swbuf_r+0x2e>
 8000eb8:	e7d6      	b.n	8000e68 <__swbuf_r+0x2a>
	...

08000ebc <__swsetup_r>:
 8000ebc:	b538      	push	{r3, r4, r5, lr}
 8000ebe:	4b29      	ldr	r3, [pc, #164]	@ (8000f64 <__swsetup_r+0xa8>)
 8000ec0:	4605      	mov	r5, r0
 8000ec2:	6818      	ldr	r0, [r3, #0]
 8000ec4:	460c      	mov	r4, r1
 8000ec6:	b118      	cbz	r0, 8000ed0 <__swsetup_r+0x14>
 8000ec8:	6a03      	ldr	r3, [r0, #32]
 8000eca:	b90b      	cbnz	r3, 8000ed0 <__swsetup_r+0x14>
 8000ecc:	f7ff feae 	bl	8000c2c <__sinit>
 8000ed0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ed4:	0719      	lsls	r1, r3, #28
 8000ed6:	d422      	bmi.n	8000f1e <__swsetup_r+0x62>
 8000ed8:	06da      	lsls	r2, r3, #27
 8000eda:	d407      	bmi.n	8000eec <__swsetup_r+0x30>
 8000edc:	2209      	movs	r2, #9
 8000ede:	602a      	str	r2, [r5, #0]
 8000ee0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ee4:	81a3      	strh	r3, [r4, #12]
 8000ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8000eea:	e033      	b.n	8000f54 <__swsetup_r+0x98>
 8000eec:	0758      	lsls	r0, r3, #29
 8000eee:	d512      	bpl.n	8000f16 <__swsetup_r+0x5a>
 8000ef0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000ef2:	b141      	cbz	r1, 8000f06 <__swsetup_r+0x4a>
 8000ef4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000ef8:	4299      	cmp	r1, r3
 8000efa:	d002      	beq.n	8000f02 <__swsetup_r+0x46>
 8000efc:	4628      	mov	r0, r5
 8000efe:	f000 f8af 	bl	8001060 <_free_r>
 8000f02:	2300      	movs	r3, #0
 8000f04:	6363      	str	r3, [r4, #52]	@ 0x34
 8000f06:	89a3      	ldrh	r3, [r4, #12]
 8000f08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000f0c:	81a3      	strh	r3, [r4, #12]
 8000f0e:	2300      	movs	r3, #0
 8000f10:	6063      	str	r3, [r4, #4]
 8000f12:	6923      	ldr	r3, [r4, #16]
 8000f14:	6023      	str	r3, [r4, #0]
 8000f16:	89a3      	ldrh	r3, [r4, #12]
 8000f18:	f043 0308 	orr.w	r3, r3, #8
 8000f1c:	81a3      	strh	r3, [r4, #12]
 8000f1e:	6923      	ldr	r3, [r4, #16]
 8000f20:	b94b      	cbnz	r3, 8000f36 <__swsetup_r+0x7a>
 8000f22:	89a3      	ldrh	r3, [r4, #12]
 8000f24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000f28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f2c:	d003      	beq.n	8000f36 <__swsetup_r+0x7a>
 8000f2e:	4621      	mov	r1, r4
 8000f30:	4628      	mov	r0, r5
 8000f32:	f000 fe87 	bl	8001c44 <__smakebuf_r>
 8000f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f3a:	f013 0201 	ands.w	r2, r3, #1
 8000f3e:	d00a      	beq.n	8000f56 <__swsetup_r+0x9a>
 8000f40:	2200      	movs	r2, #0
 8000f42:	60a2      	str	r2, [r4, #8]
 8000f44:	6962      	ldr	r2, [r4, #20]
 8000f46:	4252      	negs	r2, r2
 8000f48:	61a2      	str	r2, [r4, #24]
 8000f4a:	6922      	ldr	r2, [r4, #16]
 8000f4c:	b942      	cbnz	r2, 8000f60 <__swsetup_r+0xa4>
 8000f4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000f52:	d1c5      	bne.n	8000ee0 <__swsetup_r+0x24>
 8000f54:	bd38      	pop	{r3, r4, r5, pc}
 8000f56:	0799      	lsls	r1, r3, #30
 8000f58:	bf58      	it	pl
 8000f5a:	6962      	ldrpl	r2, [r4, #20]
 8000f5c:	60a2      	str	r2, [r4, #8]
 8000f5e:	e7f4      	b.n	8000f4a <__swsetup_r+0x8e>
 8000f60:	2000      	movs	r0, #0
 8000f62:	e7f7      	b.n	8000f54 <__swsetup_r+0x98>
 8000f64:	20000010 	.word	0x20000010

08000f68 <memset>:
 8000f68:	4402      	add	r2, r0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d100      	bne.n	8000f72 <memset+0xa>
 8000f70:	4770      	bx	lr
 8000f72:	f803 1b01 	strb.w	r1, [r3], #1
 8000f76:	e7f9      	b.n	8000f6c <memset+0x4>

08000f78 <_close_r>:
 8000f78:	b538      	push	{r3, r4, r5, lr}
 8000f7a:	4d06      	ldr	r5, [pc, #24]	@ (8000f94 <_close_r+0x1c>)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	4604      	mov	r4, r0
 8000f80:	4608      	mov	r0, r1
 8000f82:	602b      	str	r3, [r5, #0]
 8000f84:	f7ff fd0c 	bl	80009a0 <_close>
 8000f88:	1c43      	adds	r3, r0, #1
 8000f8a:	d102      	bne.n	8000f92 <_close_r+0x1a>
 8000f8c:	682b      	ldr	r3, [r5, #0]
 8000f8e:	b103      	cbz	r3, 8000f92 <_close_r+0x1a>
 8000f90:	6023      	str	r3, [r4, #0]
 8000f92:	bd38      	pop	{r3, r4, r5, pc}
 8000f94:	20000204 	.word	0x20000204

08000f98 <_lseek_r>:
 8000f98:	b538      	push	{r3, r4, r5, lr}
 8000f9a:	4d07      	ldr	r5, [pc, #28]	@ (8000fb8 <_lseek_r+0x20>)
 8000f9c:	4604      	mov	r4, r0
 8000f9e:	4608      	mov	r0, r1
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	602a      	str	r2, [r5, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	f7ff fd21 	bl	80009ee <_lseek>
 8000fac:	1c43      	adds	r3, r0, #1
 8000fae:	d102      	bne.n	8000fb6 <_lseek_r+0x1e>
 8000fb0:	682b      	ldr	r3, [r5, #0]
 8000fb2:	b103      	cbz	r3, 8000fb6 <_lseek_r+0x1e>
 8000fb4:	6023      	str	r3, [r4, #0]
 8000fb6:	bd38      	pop	{r3, r4, r5, pc}
 8000fb8:	20000204 	.word	0x20000204

08000fbc <_read_r>:
 8000fbc:	b538      	push	{r3, r4, r5, lr}
 8000fbe:	4d07      	ldr	r5, [pc, #28]	@ (8000fdc <_read_r+0x20>)
 8000fc0:	4604      	mov	r4, r0
 8000fc2:	4608      	mov	r0, r1
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	602a      	str	r2, [r5, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	f7ff fcaf 	bl	800092e <_read>
 8000fd0:	1c43      	adds	r3, r0, #1
 8000fd2:	d102      	bne.n	8000fda <_read_r+0x1e>
 8000fd4:	682b      	ldr	r3, [r5, #0]
 8000fd6:	b103      	cbz	r3, 8000fda <_read_r+0x1e>
 8000fd8:	6023      	str	r3, [r4, #0]
 8000fda:	bd38      	pop	{r3, r4, r5, pc}
 8000fdc:	20000204 	.word	0x20000204

08000fe0 <_write_r>:
 8000fe0:	b538      	push	{r3, r4, r5, lr}
 8000fe2:	4d07      	ldr	r5, [pc, #28]	@ (8001000 <_write_r+0x20>)
 8000fe4:	4604      	mov	r4, r0
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	4611      	mov	r1, r2
 8000fea:	2200      	movs	r2, #0
 8000fec:	602a      	str	r2, [r5, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	f7ff fcba 	bl	8000968 <_write>
 8000ff4:	1c43      	adds	r3, r0, #1
 8000ff6:	d102      	bne.n	8000ffe <_write_r+0x1e>
 8000ff8:	682b      	ldr	r3, [r5, #0]
 8000ffa:	b103      	cbz	r3, 8000ffe <_write_r+0x1e>
 8000ffc:	6023      	str	r3, [r4, #0]
 8000ffe:	bd38      	pop	{r3, r4, r5, pc}
 8001000:	20000204 	.word	0x20000204

08001004 <__errno>:
 8001004:	4b01      	ldr	r3, [pc, #4]	@ (800100c <__errno+0x8>)
 8001006:	6818      	ldr	r0, [r3, #0]
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000010 	.word	0x20000010

08001010 <__libc_init_array>:
 8001010:	b570      	push	{r4, r5, r6, lr}
 8001012:	4d0d      	ldr	r5, [pc, #52]	@ (8001048 <__libc_init_array+0x38>)
 8001014:	4c0d      	ldr	r4, [pc, #52]	@ (800104c <__libc_init_array+0x3c>)
 8001016:	1b64      	subs	r4, r4, r5
 8001018:	10a4      	asrs	r4, r4, #2
 800101a:	2600      	movs	r6, #0
 800101c:	42a6      	cmp	r6, r4
 800101e:	d109      	bne.n	8001034 <__libc_init_array+0x24>
 8001020:	4d0b      	ldr	r5, [pc, #44]	@ (8001050 <__libc_init_array+0x40>)
 8001022:	4c0c      	ldr	r4, [pc, #48]	@ (8001054 <__libc_init_array+0x44>)
 8001024:	f000 feda 	bl	8001ddc <_init>
 8001028:	1b64      	subs	r4, r4, r5
 800102a:	10a4      	asrs	r4, r4, #2
 800102c:	2600      	movs	r6, #0
 800102e:	42a6      	cmp	r6, r4
 8001030:	d105      	bne.n	800103e <__libc_init_array+0x2e>
 8001032:	bd70      	pop	{r4, r5, r6, pc}
 8001034:	f855 3b04 	ldr.w	r3, [r5], #4
 8001038:	4798      	blx	r3
 800103a:	3601      	adds	r6, #1
 800103c:	e7ee      	b.n	800101c <__libc_init_array+0xc>
 800103e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001042:	4798      	blx	r3
 8001044:	3601      	adds	r6, #1
 8001046:	e7f2      	b.n	800102e <__libc_init_array+0x1e>
 8001048:	08001eec 	.word	0x08001eec
 800104c:	08001eec 	.word	0x08001eec
 8001050:	08001eec 	.word	0x08001eec
 8001054:	08001ef0 	.word	0x08001ef0

08001058 <__retarget_lock_init_recursive>:
 8001058:	4770      	bx	lr

0800105a <__retarget_lock_acquire_recursive>:
 800105a:	4770      	bx	lr

0800105c <__retarget_lock_release_recursive>:
 800105c:	4770      	bx	lr
	...

08001060 <_free_r>:
 8001060:	b538      	push	{r3, r4, r5, lr}
 8001062:	4605      	mov	r5, r0
 8001064:	2900      	cmp	r1, #0
 8001066:	d041      	beq.n	80010ec <_free_r+0x8c>
 8001068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800106c:	1f0c      	subs	r4, r1, #4
 800106e:	2b00      	cmp	r3, #0
 8001070:	bfb8      	it	lt
 8001072:	18e4      	addlt	r4, r4, r3
 8001074:	f000 f8e0 	bl	8001238 <__malloc_lock>
 8001078:	4a1d      	ldr	r2, [pc, #116]	@ (80010f0 <_free_r+0x90>)
 800107a:	6813      	ldr	r3, [r2, #0]
 800107c:	b933      	cbnz	r3, 800108c <_free_r+0x2c>
 800107e:	6063      	str	r3, [r4, #4]
 8001080:	6014      	str	r4, [r2, #0]
 8001082:	4628      	mov	r0, r5
 8001084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001088:	f000 b8dc 	b.w	8001244 <__malloc_unlock>
 800108c:	42a3      	cmp	r3, r4
 800108e:	d908      	bls.n	80010a2 <_free_r+0x42>
 8001090:	6820      	ldr	r0, [r4, #0]
 8001092:	1821      	adds	r1, r4, r0
 8001094:	428b      	cmp	r3, r1
 8001096:	bf01      	itttt	eq
 8001098:	6819      	ldreq	r1, [r3, #0]
 800109a:	685b      	ldreq	r3, [r3, #4]
 800109c:	1809      	addeq	r1, r1, r0
 800109e:	6021      	streq	r1, [r4, #0]
 80010a0:	e7ed      	b.n	800107e <_free_r+0x1e>
 80010a2:	461a      	mov	r2, r3
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	b10b      	cbz	r3, 80010ac <_free_r+0x4c>
 80010a8:	42a3      	cmp	r3, r4
 80010aa:	d9fa      	bls.n	80010a2 <_free_r+0x42>
 80010ac:	6811      	ldr	r1, [r2, #0]
 80010ae:	1850      	adds	r0, r2, r1
 80010b0:	42a0      	cmp	r0, r4
 80010b2:	d10b      	bne.n	80010cc <_free_r+0x6c>
 80010b4:	6820      	ldr	r0, [r4, #0]
 80010b6:	4401      	add	r1, r0
 80010b8:	1850      	adds	r0, r2, r1
 80010ba:	4283      	cmp	r3, r0
 80010bc:	6011      	str	r1, [r2, #0]
 80010be:	d1e0      	bne.n	8001082 <_free_r+0x22>
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	6053      	str	r3, [r2, #4]
 80010c6:	4408      	add	r0, r1
 80010c8:	6010      	str	r0, [r2, #0]
 80010ca:	e7da      	b.n	8001082 <_free_r+0x22>
 80010cc:	d902      	bls.n	80010d4 <_free_r+0x74>
 80010ce:	230c      	movs	r3, #12
 80010d0:	602b      	str	r3, [r5, #0]
 80010d2:	e7d6      	b.n	8001082 <_free_r+0x22>
 80010d4:	6820      	ldr	r0, [r4, #0]
 80010d6:	1821      	adds	r1, r4, r0
 80010d8:	428b      	cmp	r3, r1
 80010da:	bf04      	itt	eq
 80010dc:	6819      	ldreq	r1, [r3, #0]
 80010de:	685b      	ldreq	r3, [r3, #4]
 80010e0:	6063      	str	r3, [r4, #4]
 80010e2:	bf04      	itt	eq
 80010e4:	1809      	addeq	r1, r1, r0
 80010e6:	6021      	streq	r1, [r4, #0]
 80010e8:	6054      	str	r4, [r2, #4]
 80010ea:	e7ca      	b.n	8001082 <_free_r+0x22>
 80010ec:	bd38      	pop	{r3, r4, r5, pc}
 80010ee:	bf00      	nop
 80010f0:	20000210 	.word	0x20000210

080010f4 <sbrk_aligned>:
 80010f4:	b570      	push	{r4, r5, r6, lr}
 80010f6:	4e0f      	ldr	r6, [pc, #60]	@ (8001134 <sbrk_aligned+0x40>)
 80010f8:	460c      	mov	r4, r1
 80010fa:	6831      	ldr	r1, [r6, #0]
 80010fc:	4605      	mov	r5, r0
 80010fe:	b911      	cbnz	r1, 8001106 <sbrk_aligned+0x12>
 8001100:	f000 fe18 	bl	8001d34 <_sbrk_r>
 8001104:	6030      	str	r0, [r6, #0]
 8001106:	4621      	mov	r1, r4
 8001108:	4628      	mov	r0, r5
 800110a:	f000 fe13 	bl	8001d34 <_sbrk_r>
 800110e:	1c43      	adds	r3, r0, #1
 8001110:	d103      	bne.n	800111a <sbrk_aligned+0x26>
 8001112:	f04f 34ff 	mov.w	r4, #4294967295
 8001116:	4620      	mov	r0, r4
 8001118:	bd70      	pop	{r4, r5, r6, pc}
 800111a:	1cc4      	adds	r4, r0, #3
 800111c:	f024 0403 	bic.w	r4, r4, #3
 8001120:	42a0      	cmp	r0, r4
 8001122:	d0f8      	beq.n	8001116 <sbrk_aligned+0x22>
 8001124:	1a21      	subs	r1, r4, r0
 8001126:	4628      	mov	r0, r5
 8001128:	f000 fe04 	bl	8001d34 <_sbrk_r>
 800112c:	3001      	adds	r0, #1
 800112e:	d1f2      	bne.n	8001116 <sbrk_aligned+0x22>
 8001130:	e7ef      	b.n	8001112 <sbrk_aligned+0x1e>
 8001132:	bf00      	nop
 8001134:	2000020c 	.word	0x2000020c

08001138 <_malloc_r>:
 8001138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800113c:	1ccd      	adds	r5, r1, #3
 800113e:	f025 0503 	bic.w	r5, r5, #3
 8001142:	3508      	adds	r5, #8
 8001144:	2d0c      	cmp	r5, #12
 8001146:	bf38      	it	cc
 8001148:	250c      	movcc	r5, #12
 800114a:	2d00      	cmp	r5, #0
 800114c:	4606      	mov	r6, r0
 800114e:	db01      	blt.n	8001154 <_malloc_r+0x1c>
 8001150:	42a9      	cmp	r1, r5
 8001152:	d904      	bls.n	800115e <_malloc_r+0x26>
 8001154:	230c      	movs	r3, #12
 8001156:	6033      	str	r3, [r6, #0]
 8001158:	2000      	movs	r0, #0
 800115a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800115e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001234 <_malloc_r+0xfc>
 8001162:	f000 f869 	bl	8001238 <__malloc_lock>
 8001166:	f8d8 3000 	ldr.w	r3, [r8]
 800116a:	461c      	mov	r4, r3
 800116c:	bb44      	cbnz	r4, 80011c0 <_malloc_r+0x88>
 800116e:	4629      	mov	r1, r5
 8001170:	4630      	mov	r0, r6
 8001172:	f7ff ffbf 	bl	80010f4 <sbrk_aligned>
 8001176:	1c43      	adds	r3, r0, #1
 8001178:	4604      	mov	r4, r0
 800117a:	d158      	bne.n	800122e <_malloc_r+0xf6>
 800117c:	f8d8 4000 	ldr.w	r4, [r8]
 8001180:	4627      	mov	r7, r4
 8001182:	2f00      	cmp	r7, #0
 8001184:	d143      	bne.n	800120e <_malloc_r+0xd6>
 8001186:	2c00      	cmp	r4, #0
 8001188:	d04b      	beq.n	8001222 <_malloc_r+0xea>
 800118a:	6823      	ldr	r3, [r4, #0]
 800118c:	4639      	mov	r1, r7
 800118e:	4630      	mov	r0, r6
 8001190:	eb04 0903 	add.w	r9, r4, r3
 8001194:	f000 fdce 	bl	8001d34 <_sbrk_r>
 8001198:	4581      	cmp	r9, r0
 800119a:	d142      	bne.n	8001222 <_malloc_r+0xea>
 800119c:	6821      	ldr	r1, [r4, #0]
 800119e:	1a6d      	subs	r5, r5, r1
 80011a0:	4629      	mov	r1, r5
 80011a2:	4630      	mov	r0, r6
 80011a4:	f7ff ffa6 	bl	80010f4 <sbrk_aligned>
 80011a8:	3001      	adds	r0, #1
 80011aa:	d03a      	beq.n	8001222 <_malloc_r+0xea>
 80011ac:	6823      	ldr	r3, [r4, #0]
 80011ae:	442b      	add	r3, r5
 80011b0:	6023      	str	r3, [r4, #0]
 80011b2:	f8d8 3000 	ldr.w	r3, [r8]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	bb62      	cbnz	r2, 8001214 <_malloc_r+0xdc>
 80011ba:	f8c8 7000 	str.w	r7, [r8]
 80011be:	e00f      	b.n	80011e0 <_malloc_r+0xa8>
 80011c0:	6822      	ldr	r2, [r4, #0]
 80011c2:	1b52      	subs	r2, r2, r5
 80011c4:	d420      	bmi.n	8001208 <_malloc_r+0xd0>
 80011c6:	2a0b      	cmp	r2, #11
 80011c8:	d917      	bls.n	80011fa <_malloc_r+0xc2>
 80011ca:	1961      	adds	r1, r4, r5
 80011cc:	42a3      	cmp	r3, r4
 80011ce:	6025      	str	r5, [r4, #0]
 80011d0:	bf18      	it	ne
 80011d2:	6059      	strne	r1, [r3, #4]
 80011d4:	6863      	ldr	r3, [r4, #4]
 80011d6:	bf08      	it	eq
 80011d8:	f8c8 1000 	streq.w	r1, [r8]
 80011dc:	5162      	str	r2, [r4, r5]
 80011de:	604b      	str	r3, [r1, #4]
 80011e0:	4630      	mov	r0, r6
 80011e2:	f000 f82f 	bl	8001244 <__malloc_unlock>
 80011e6:	f104 000b 	add.w	r0, r4, #11
 80011ea:	1d23      	adds	r3, r4, #4
 80011ec:	f020 0007 	bic.w	r0, r0, #7
 80011f0:	1ac2      	subs	r2, r0, r3
 80011f2:	bf1c      	itt	ne
 80011f4:	1a1b      	subne	r3, r3, r0
 80011f6:	50a3      	strne	r3, [r4, r2]
 80011f8:	e7af      	b.n	800115a <_malloc_r+0x22>
 80011fa:	6862      	ldr	r2, [r4, #4]
 80011fc:	42a3      	cmp	r3, r4
 80011fe:	bf0c      	ite	eq
 8001200:	f8c8 2000 	streq.w	r2, [r8]
 8001204:	605a      	strne	r2, [r3, #4]
 8001206:	e7eb      	b.n	80011e0 <_malloc_r+0xa8>
 8001208:	4623      	mov	r3, r4
 800120a:	6864      	ldr	r4, [r4, #4]
 800120c:	e7ae      	b.n	800116c <_malloc_r+0x34>
 800120e:	463c      	mov	r4, r7
 8001210:	687f      	ldr	r7, [r7, #4]
 8001212:	e7b6      	b.n	8001182 <_malloc_r+0x4a>
 8001214:	461a      	mov	r2, r3
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	42a3      	cmp	r3, r4
 800121a:	d1fb      	bne.n	8001214 <_malloc_r+0xdc>
 800121c:	2300      	movs	r3, #0
 800121e:	6053      	str	r3, [r2, #4]
 8001220:	e7de      	b.n	80011e0 <_malloc_r+0xa8>
 8001222:	230c      	movs	r3, #12
 8001224:	6033      	str	r3, [r6, #0]
 8001226:	4630      	mov	r0, r6
 8001228:	f000 f80c 	bl	8001244 <__malloc_unlock>
 800122c:	e794      	b.n	8001158 <_malloc_r+0x20>
 800122e:	6005      	str	r5, [r0, #0]
 8001230:	e7d6      	b.n	80011e0 <_malloc_r+0xa8>
 8001232:	bf00      	nop
 8001234:	20000210 	.word	0x20000210

08001238 <__malloc_lock>:
 8001238:	4801      	ldr	r0, [pc, #4]	@ (8001240 <__malloc_lock+0x8>)
 800123a:	f7ff bf0e 	b.w	800105a <__retarget_lock_acquire_recursive>
 800123e:	bf00      	nop
 8001240:	20000208 	.word	0x20000208

08001244 <__malloc_unlock>:
 8001244:	4801      	ldr	r0, [pc, #4]	@ (800124c <__malloc_unlock+0x8>)
 8001246:	f7ff bf09 	b.w	800105c <__retarget_lock_release_recursive>
 800124a:	bf00      	nop
 800124c:	20000208 	.word	0x20000208

08001250 <__ssputs_r>:
 8001250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001254:	688e      	ldr	r6, [r1, #8]
 8001256:	461f      	mov	r7, r3
 8001258:	42be      	cmp	r6, r7
 800125a:	680b      	ldr	r3, [r1, #0]
 800125c:	4682      	mov	sl, r0
 800125e:	460c      	mov	r4, r1
 8001260:	4690      	mov	r8, r2
 8001262:	d82d      	bhi.n	80012c0 <__ssputs_r+0x70>
 8001264:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001268:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800126c:	d026      	beq.n	80012bc <__ssputs_r+0x6c>
 800126e:	6965      	ldr	r5, [r4, #20]
 8001270:	6909      	ldr	r1, [r1, #16]
 8001272:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001276:	eba3 0901 	sub.w	r9, r3, r1
 800127a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800127e:	1c7b      	adds	r3, r7, #1
 8001280:	444b      	add	r3, r9
 8001282:	106d      	asrs	r5, r5, #1
 8001284:	429d      	cmp	r5, r3
 8001286:	bf38      	it	cc
 8001288:	461d      	movcc	r5, r3
 800128a:	0553      	lsls	r3, r2, #21
 800128c:	d527      	bpl.n	80012de <__ssputs_r+0x8e>
 800128e:	4629      	mov	r1, r5
 8001290:	f7ff ff52 	bl	8001138 <_malloc_r>
 8001294:	4606      	mov	r6, r0
 8001296:	b360      	cbz	r0, 80012f2 <__ssputs_r+0xa2>
 8001298:	6921      	ldr	r1, [r4, #16]
 800129a:	464a      	mov	r2, r9
 800129c:	f000 fd5a 	bl	8001d54 <memcpy>
 80012a0:	89a3      	ldrh	r3, [r4, #12]
 80012a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80012a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012aa:	81a3      	strh	r3, [r4, #12]
 80012ac:	6126      	str	r6, [r4, #16]
 80012ae:	6165      	str	r5, [r4, #20]
 80012b0:	444e      	add	r6, r9
 80012b2:	eba5 0509 	sub.w	r5, r5, r9
 80012b6:	6026      	str	r6, [r4, #0]
 80012b8:	60a5      	str	r5, [r4, #8]
 80012ba:	463e      	mov	r6, r7
 80012bc:	42be      	cmp	r6, r7
 80012be:	d900      	bls.n	80012c2 <__ssputs_r+0x72>
 80012c0:	463e      	mov	r6, r7
 80012c2:	6820      	ldr	r0, [r4, #0]
 80012c4:	4632      	mov	r2, r6
 80012c6:	4641      	mov	r1, r8
 80012c8:	f000 fcf8 	bl	8001cbc <memmove>
 80012cc:	68a3      	ldr	r3, [r4, #8]
 80012ce:	1b9b      	subs	r3, r3, r6
 80012d0:	60a3      	str	r3, [r4, #8]
 80012d2:	6823      	ldr	r3, [r4, #0]
 80012d4:	4433      	add	r3, r6
 80012d6:	6023      	str	r3, [r4, #0]
 80012d8:	2000      	movs	r0, #0
 80012da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012de:	462a      	mov	r2, r5
 80012e0:	f000 fd46 	bl	8001d70 <_realloc_r>
 80012e4:	4606      	mov	r6, r0
 80012e6:	2800      	cmp	r0, #0
 80012e8:	d1e0      	bne.n	80012ac <__ssputs_r+0x5c>
 80012ea:	6921      	ldr	r1, [r4, #16]
 80012ec:	4650      	mov	r0, sl
 80012ee:	f7ff feb7 	bl	8001060 <_free_r>
 80012f2:	230c      	movs	r3, #12
 80012f4:	f8ca 3000 	str.w	r3, [sl]
 80012f8:	89a3      	ldrh	r3, [r4, #12]
 80012fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012fe:	81a3      	strh	r3, [r4, #12]
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	e7e9      	b.n	80012da <__ssputs_r+0x8a>
	...

08001308 <_svfiprintf_r>:
 8001308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800130c:	4698      	mov	r8, r3
 800130e:	898b      	ldrh	r3, [r1, #12]
 8001310:	061b      	lsls	r3, r3, #24
 8001312:	b09d      	sub	sp, #116	@ 0x74
 8001314:	4607      	mov	r7, r0
 8001316:	460d      	mov	r5, r1
 8001318:	4614      	mov	r4, r2
 800131a:	d510      	bpl.n	800133e <_svfiprintf_r+0x36>
 800131c:	690b      	ldr	r3, [r1, #16]
 800131e:	b973      	cbnz	r3, 800133e <_svfiprintf_r+0x36>
 8001320:	2140      	movs	r1, #64	@ 0x40
 8001322:	f7ff ff09 	bl	8001138 <_malloc_r>
 8001326:	6028      	str	r0, [r5, #0]
 8001328:	6128      	str	r0, [r5, #16]
 800132a:	b930      	cbnz	r0, 800133a <_svfiprintf_r+0x32>
 800132c:	230c      	movs	r3, #12
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	b01d      	add	sp, #116	@ 0x74
 8001336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800133a:	2340      	movs	r3, #64	@ 0x40
 800133c:	616b      	str	r3, [r5, #20]
 800133e:	2300      	movs	r3, #0
 8001340:	9309      	str	r3, [sp, #36]	@ 0x24
 8001342:	2320      	movs	r3, #32
 8001344:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001348:	f8cd 800c 	str.w	r8, [sp, #12]
 800134c:	2330      	movs	r3, #48	@ 0x30
 800134e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80014ec <_svfiprintf_r+0x1e4>
 8001352:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001356:	f04f 0901 	mov.w	r9, #1
 800135a:	4623      	mov	r3, r4
 800135c:	469a      	mov	sl, r3
 800135e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001362:	b10a      	cbz	r2, 8001368 <_svfiprintf_r+0x60>
 8001364:	2a25      	cmp	r2, #37	@ 0x25
 8001366:	d1f9      	bne.n	800135c <_svfiprintf_r+0x54>
 8001368:	ebba 0b04 	subs.w	fp, sl, r4
 800136c:	d00b      	beq.n	8001386 <_svfiprintf_r+0x7e>
 800136e:	465b      	mov	r3, fp
 8001370:	4622      	mov	r2, r4
 8001372:	4629      	mov	r1, r5
 8001374:	4638      	mov	r0, r7
 8001376:	f7ff ff6b 	bl	8001250 <__ssputs_r>
 800137a:	3001      	adds	r0, #1
 800137c:	f000 80a7 	beq.w	80014ce <_svfiprintf_r+0x1c6>
 8001380:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001382:	445a      	add	r2, fp
 8001384:	9209      	str	r2, [sp, #36]	@ 0x24
 8001386:	f89a 3000 	ldrb.w	r3, [sl]
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 809f 	beq.w	80014ce <_svfiprintf_r+0x1c6>
 8001390:	2300      	movs	r3, #0
 8001392:	f04f 32ff 	mov.w	r2, #4294967295
 8001396:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800139a:	f10a 0a01 	add.w	sl, sl, #1
 800139e:	9304      	str	r3, [sp, #16]
 80013a0:	9307      	str	r3, [sp, #28]
 80013a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80013a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80013a8:	4654      	mov	r4, sl
 80013aa:	2205      	movs	r2, #5
 80013ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013b0:	484e      	ldr	r0, [pc, #312]	@ (80014ec <_svfiprintf_r+0x1e4>)
 80013b2:	f7fe ff3d 	bl	8000230 <memchr>
 80013b6:	9a04      	ldr	r2, [sp, #16]
 80013b8:	b9d8      	cbnz	r0, 80013f2 <_svfiprintf_r+0xea>
 80013ba:	06d0      	lsls	r0, r2, #27
 80013bc:	bf44      	itt	mi
 80013be:	2320      	movmi	r3, #32
 80013c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80013c4:	0711      	lsls	r1, r2, #28
 80013c6:	bf44      	itt	mi
 80013c8:	232b      	movmi	r3, #43	@ 0x2b
 80013ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80013ce:	f89a 3000 	ldrb.w	r3, [sl]
 80013d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80013d4:	d015      	beq.n	8001402 <_svfiprintf_r+0xfa>
 80013d6:	9a07      	ldr	r2, [sp, #28]
 80013d8:	4654      	mov	r4, sl
 80013da:	2000      	movs	r0, #0
 80013dc:	f04f 0c0a 	mov.w	ip, #10
 80013e0:	4621      	mov	r1, r4
 80013e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80013e6:	3b30      	subs	r3, #48	@ 0x30
 80013e8:	2b09      	cmp	r3, #9
 80013ea:	d94b      	bls.n	8001484 <_svfiprintf_r+0x17c>
 80013ec:	b1b0      	cbz	r0, 800141c <_svfiprintf_r+0x114>
 80013ee:	9207      	str	r2, [sp, #28]
 80013f0:	e014      	b.n	800141c <_svfiprintf_r+0x114>
 80013f2:	eba0 0308 	sub.w	r3, r0, r8
 80013f6:	fa09 f303 	lsl.w	r3, r9, r3
 80013fa:	4313      	orrs	r3, r2
 80013fc:	9304      	str	r3, [sp, #16]
 80013fe:	46a2      	mov	sl, r4
 8001400:	e7d2      	b.n	80013a8 <_svfiprintf_r+0xa0>
 8001402:	9b03      	ldr	r3, [sp, #12]
 8001404:	1d19      	adds	r1, r3, #4
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	9103      	str	r1, [sp, #12]
 800140a:	2b00      	cmp	r3, #0
 800140c:	bfbb      	ittet	lt
 800140e:	425b      	neglt	r3, r3
 8001410:	f042 0202 	orrlt.w	r2, r2, #2
 8001414:	9307      	strge	r3, [sp, #28]
 8001416:	9307      	strlt	r3, [sp, #28]
 8001418:	bfb8      	it	lt
 800141a:	9204      	strlt	r2, [sp, #16]
 800141c:	7823      	ldrb	r3, [r4, #0]
 800141e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001420:	d10a      	bne.n	8001438 <_svfiprintf_r+0x130>
 8001422:	7863      	ldrb	r3, [r4, #1]
 8001424:	2b2a      	cmp	r3, #42	@ 0x2a
 8001426:	d132      	bne.n	800148e <_svfiprintf_r+0x186>
 8001428:	9b03      	ldr	r3, [sp, #12]
 800142a:	1d1a      	adds	r2, r3, #4
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	9203      	str	r2, [sp, #12]
 8001430:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001434:	3402      	adds	r4, #2
 8001436:	9305      	str	r3, [sp, #20]
 8001438:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80014fc <_svfiprintf_r+0x1f4>
 800143c:	7821      	ldrb	r1, [r4, #0]
 800143e:	2203      	movs	r2, #3
 8001440:	4650      	mov	r0, sl
 8001442:	f7fe fef5 	bl	8000230 <memchr>
 8001446:	b138      	cbz	r0, 8001458 <_svfiprintf_r+0x150>
 8001448:	9b04      	ldr	r3, [sp, #16]
 800144a:	eba0 000a 	sub.w	r0, r0, sl
 800144e:	2240      	movs	r2, #64	@ 0x40
 8001450:	4082      	lsls	r2, r0
 8001452:	4313      	orrs	r3, r2
 8001454:	3401      	adds	r4, #1
 8001456:	9304      	str	r3, [sp, #16]
 8001458:	f814 1b01 	ldrb.w	r1, [r4], #1
 800145c:	4824      	ldr	r0, [pc, #144]	@ (80014f0 <_svfiprintf_r+0x1e8>)
 800145e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001462:	2206      	movs	r2, #6
 8001464:	f7fe fee4 	bl	8000230 <memchr>
 8001468:	2800      	cmp	r0, #0
 800146a:	d036      	beq.n	80014da <_svfiprintf_r+0x1d2>
 800146c:	4b21      	ldr	r3, [pc, #132]	@ (80014f4 <_svfiprintf_r+0x1ec>)
 800146e:	bb1b      	cbnz	r3, 80014b8 <_svfiprintf_r+0x1b0>
 8001470:	9b03      	ldr	r3, [sp, #12]
 8001472:	3307      	adds	r3, #7
 8001474:	f023 0307 	bic.w	r3, r3, #7
 8001478:	3308      	adds	r3, #8
 800147a:	9303      	str	r3, [sp, #12]
 800147c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800147e:	4433      	add	r3, r6
 8001480:	9309      	str	r3, [sp, #36]	@ 0x24
 8001482:	e76a      	b.n	800135a <_svfiprintf_r+0x52>
 8001484:	fb0c 3202 	mla	r2, ip, r2, r3
 8001488:	460c      	mov	r4, r1
 800148a:	2001      	movs	r0, #1
 800148c:	e7a8      	b.n	80013e0 <_svfiprintf_r+0xd8>
 800148e:	2300      	movs	r3, #0
 8001490:	3401      	adds	r4, #1
 8001492:	9305      	str	r3, [sp, #20]
 8001494:	4619      	mov	r1, r3
 8001496:	f04f 0c0a 	mov.w	ip, #10
 800149a:	4620      	mov	r0, r4
 800149c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80014a0:	3a30      	subs	r2, #48	@ 0x30
 80014a2:	2a09      	cmp	r2, #9
 80014a4:	d903      	bls.n	80014ae <_svfiprintf_r+0x1a6>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0c6      	beq.n	8001438 <_svfiprintf_r+0x130>
 80014aa:	9105      	str	r1, [sp, #20]
 80014ac:	e7c4      	b.n	8001438 <_svfiprintf_r+0x130>
 80014ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80014b2:	4604      	mov	r4, r0
 80014b4:	2301      	movs	r3, #1
 80014b6:	e7f0      	b.n	800149a <_svfiprintf_r+0x192>
 80014b8:	ab03      	add	r3, sp, #12
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	462a      	mov	r2, r5
 80014be:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <_svfiprintf_r+0x1f0>)
 80014c0:	a904      	add	r1, sp, #16
 80014c2:	4638      	mov	r0, r7
 80014c4:	f3af 8000 	nop.w
 80014c8:	1c42      	adds	r2, r0, #1
 80014ca:	4606      	mov	r6, r0
 80014cc:	d1d6      	bne.n	800147c <_svfiprintf_r+0x174>
 80014ce:	89ab      	ldrh	r3, [r5, #12]
 80014d0:	065b      	lsls	r3, r3, #25
 80014d2:	f53f af2d 	bmi.w	8001330 <_svfiprintf_r+0x28>
 80014d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80014d8:	e72c      	b.n	8001334 <_svfiprintf_r+0x2c>
 80014da:	ab03      	add	r3, sp, #12
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	462a      	mov	r2, r5
 80014e0:	4b05      	ldr	r3, [pc, #20]	@ (80014f8 <_svfiprintf_r+0x1f0>)
 80014e2:	a904      	add	r1, sp, #16
 80014e4:	4638      	mov	r0, r7
 80014e6:	f000 f9bb 	bl	8001860 <_printf_i>
 80014ea:	e7ed      	b.n	80014c8 <_svfiprintf_r+0x1c0>
 80014ec:	08001eae 	.word	0x08001eae
 80014f0:	08001eb8 	.word	0x08001eb8
 80014f4:	00000000 	.word	0x00000000
 80014f8:	08001251 	.word	0x08001251
 80014fc:	08001eb4 	.word	0x08001eb4

08001500 <__sfputc_r>:
 8001500:	6893      	ldr	r3, [r2, #8]
 8001502:	3b01      	subs	r3, #1
 8001504:	2b00      	cmp	r3, #0
 8001506:	b410      	push	{r4}
 8001508:	6093      	str	r3, [r2, #8]
 800150a:	da08      	bge.n	800151e <__sfputc_r+0x1e>
 800150c:	6994      	ldr	r4, [r2, #24]
 800150e:	42a3      	cmp	r3, r4
 8001510:	db01      	blt.n	8001516 <__sfputc_r+0x16>
 8001512:	290a      	cmp	r1, #10
 8001514:	d103      	bne.n	800151e <__sfputc_r+0x1e>
 8001516:	f85d 4b04 	ldr.w	r4, [sp], #4
 800151a:	f7ff bc90 	b.w	8000e3e <__swbuf_r>
 800151e:	6813      	ldr	r3, [r2, #0]
 8001520:	1c58      	adds	r0, r3, #1
 8001522:	6010      	str	r0, [r2, #0]
 8001524:	7019      	strb	r1, [r3, #0]
 8001526:	4608      	mov	r0, r1
 8001528:	f85d 4b04 	ldr.w	r4, [sp], #4
 800152c:	4770      	bx	lr

0800152e <__sfputs_r>:
 800152e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001530:	4606      	mov	r6, r0
 8001532:	460f      	mov	r7, r1
 8001534:	4614      	mov	r4, r2
 8001536:	18d5      	adds	r5, r2, r3
 8001538:	42ac      	cmp	r4, r5
 800153a:	d101      	bne.n	8001540 <__sfputs_r+0x12>
 800153c:	2000      	movs	r0, #0
 800153e:	e007      	b.n	8001550 <__sfputs_r+0x22>
 8001540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001544:	463a      	mov	r2, r7
 8001546:	4630      	mov	r0, r6
 8001548:	f7ff ffda 	bl	8001500 <__sfputc_r>
 800154c:	1c43      	adds	r3, r0, #1
 800154e:	d1f3      	bne.n	8001538 <__sfputs_r+0xa>
 8001550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001554 <_vfiprintf_r>:
 8001554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001558:	460d      	mov	r5, r1
 800155a:	b09d      	sub	sp, #116	@ 0x74
 800155c:	4614      	mov	r4, r2
 800155e:	4698      	mov	r8, r3
 8001560:	4606      	mov	r6, r0
 8001562:	b118      	cbz	r0, 800156c <_vfiprintf_r+0x18>
 8001564:	6a03      	ldr	r3, [r0, #32]
 8001566:	b90b      	cbnz	r3, 800156c <_vfiprintf_r+0x18>
 8001568:	f7ff fb60 	bl	8000c2c <__sinit>
 800156c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800156e:	07d9      	lsls	r1, r3, #31
 8001570:	d405      	bmi.n	800157e <_vfiprintf_r+0x2a>
 8001572:	89ab      	ldrh	r3, [r5, #12]
 8001574:	059a      	lsls	r2, r3, #22
 8001576:	d402      	bmi.n	800157e <_vfiprintf_r+0x2a>
 8001578:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800157a:	f7ff fd6e 	bl	800105a <__retarget_lock_acquire_recursive>
 800157e:	89ab      	ldrh	r3, [r5, #12]
 8001580:	071b      	lsls	r3, r3, #28
 8001582:	d501      	bpl.n	8001588 <_vfiprintf_r+0x34>
 8001584:	692b      	ldr	r3, [r5, #16]
 8001586:	b99b      	cbnz	r3, 80015b0 <_vfiprintf_r+0x5c>
 8001588:	4629      	mov	r1, r5
 800158a:	4630      	mov	r0, r6
 800158c:	f7ff fc96 	bl	8000ebc <__swsetup_r>
 8001590:	b170      	cbz	r0, 80015b0 <_vfiprintf_r+0x5c>
 8001592:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001594:	07dc      	lsls	r4, r3, #31
 8001596:	d504      	bpl.n	80015a2 <_vfiprintf_r+0x4e>
 8001598:	f04f 30ff 	mov.w	r0, #4294967295
 800159c:	b01d      	add	sp, #116	@ 0x74
 800159e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015a2:	89ab      	ldrh	r3, [r5, #12]
 80015a4:	0598      	lsls	r0, r3, #22
 80015a6:	d4f7      	bmi.n	8001598 <_vfiprintf_r+0x44>
 80015a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80015aa:	f7ff fd57 	bl	800105c <__retarget_lock_release_recursive>
 80015ae:	e7f3      	b.n	8001598 <_vfiprintf_r+0x44>
 80015b0:	2300      	movs	r3, #0
 80015b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80015b4:	2320      	movs	r3, #32
 80015b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80015ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80015be:	2330      	movs	r3, #48	@ 0x30
 80015c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001770 <_vfiprintf_r+0x21c>
 80015c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80015c8:	f04f 0901 	mov.w	r9, #1
 80015cc:	4623      	mov	r3, r4
 80015ce:	469a      	mov	sl, r3
 80015d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80015d4:	b10a      	cbz	r2, 80015da <_vfiprintf_r+0x86>
 80015d6:	2a25      	cmp	r2, #37	@ 0x25
 80015d8:	d1f9      	bne.n	80015ce <_vfiprintf_r+0x7a>
 80015da:	ebba 0b04 	subs.w	fp, sl, r4
 80015de:	d00b      	beq.n	80015f8 <_vfiprintf_r+0xa4>
 80015e0:	465b      	mov	r3, fp
 80015e2:	4622      	mov	r2, r4
 80015e4:	4629      	mov	r1, r5
 80015e6:	4630      	mov	r0, r6
 80015e8:	f7ff ffa1 	bl	800152e <__sfputs_r>
 80015ec:	3001      	adds	r0, #1
 80015ee:	f000 80a7 	beq.w	8001740 <_vfiprintf_r+0x1ec>
 80015f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80015f4:	445a      	add	r2, fp
 80015f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80015f8:	f89a 3000 	ldrb.w	r3, [sl]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 809f 	beq.w	8001740 <_vfiprintf_r+0x1ec>
 8001602:	2300      	movs	r3, #0
 8001604:	f04f 32ff 	mov.w	r2, #4294967295
 8001608:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800160c:	f10a 0a01 	add.w	sl, sl, #1
 8001610:	9304      	str	r3, [sp, #16]
 8001612:	9307      	str	r3, [sp, #28]
 8001614:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001618:	931a      	str	r3, [sp, #104]	@ 0x68
 800161a:	4654      	mov	r4, sl
 800161c:	2205      	movs	r2, #5
 800161e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001622:	4853      	ldr	r0, [pc, #332]	@ (8001770 <_vfiprintf_r+0x21c>)
 8001624:	f7fe fe04 	bl	8000230 <memchr>
 8001628:	9a04      	ldr	r2, [sp, #16]
 800162a:	b9d8      	cbnz	r0, 8001664 <_vfiprintf_r+0x110>
 800162c:	06d1      	lsls	r1, r2, #27
 800162e:	bf44      	itt	mi
 8001630:	2320      	movmi	r3, #32
 8001632:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001636:	0713      	lsls	r3, r2, #28
 8001638:	bf44      	itt	mi
 800163a:	232b      	movmi	r3, #43	@ 0x2b
 800163c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001640:	f89a 3000 	ldrb.w	r3, [sl]
 8001644:	2b2a      	cmp	r3, #42	@ 0x2a
 8001646:	d015      	beq.n	8001674 <_vfiprintf_r+0x120>
 8001648:	9a07      	ldr	r2, [sp, #28]
 800164a:	4654      	mov	r4, sl
 800164c:	2000      	movs	r0, #0
 800164e:	f04f 0c0a 	mov.w	ip, #10
 8001652:	4621      	mov	r1, r4
 8001654:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001658:	3b30      	subs	r3, #48	@ 0x30
 800165a:	2b09      	cmp	r3, #9
 800165c:	d94b      	bls.n	80016f6 <_vfiprintf_r+0x1a2>
 800165e:	b1b0      	cbz	r0, 800168e <_vfiprintf_r+0x13a>
 8001660:	9207      	str	r2, [sp, #28]
 8001662:	e014      	b.n	800168e <_vfiprintf_r+0x13a>
 8001664:	eba0 0308 	sub.w	r3, r0, r8
 8001668:	fa09 f303 	lsl.w	r3, r9, r3
 800166c:	4313      	orrs	r3, r2
 800166e:	9304      	str	r3, [sp, #16]
 8001670:	46a2      	mov	sl, r4
 8001672:	e7d2      	b.n	800161a <_vfiprintf_r+0xc6>
 8001674:	9b03      	ldr	r3, [sp, #12]
 8001676:	1d19      	adds	r1, r3, #4
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	9103      	str	r1, [sp, #12]
 800167c:	2b00      	cmp	r3, #0
 800167e:	bfbb      	ittet	lt
 8001680:	425b      	neglt	r3, r3
 8001682:	f042 0202 	orrlt.w	r2, r2, #2
 8001686:	9307      	strge	r3, [sp, #28]
 8001688:	9307      	strlt	r3, [sp, #28]
 800168a:	bfb8      	it	lt
 800168c:	9204      	strlt	r2, [sp, #16]
 800168e:	7823      	ldrb	r3, [r4, #0]
 8001690:	2b2e      	cmp	r3, #46	@ 0x2e
 8001692:	d10a      	bne.n	80016aa <_vfiprintf_r+0x156>
 8001694:	7863      	ldrb	r3, [r4, #1]
 8001696:	2b2a      	cmp	r3, #42	@ 0x2a
 8001698:	d132      	bne.n	8001700 <_vfiprintf_r+0x1ac>
 800169a:	9b03      	ldr	r3, [sp, #12]
 800169c:	1d1a      	adds	r2, r3, #4
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	9203      	str	r2, [sp, #12]
 80016a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80016a6:	3402      	adds	r4, #2
 80016a8:	9305      	str	r3, [sp, #20]
 80016aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001780 <_vfiprintf_r+0x22c>
 80016ae:	7821      	ldrb	r1, [r4, #0]
 80016b0:	2203      	movs	r2, #3
 80016b2:	4650      	mov	r0, sl
 80016b4:	f7fe fdbc 	bl	8000230 <memchr>
 80016b8:	b138      	cbz	r0, 80016ca <_vfiprintf_r+0x176>
 80016ba:	9b04      	ldr	r3, [sp, #16]
 80016bc:	eba0 000a 	sub.w	r0, r0, sl
 80016c0:	2240      	movs	r2, #64	@ 0x40
 80016c2:	4082      	lsls	r2, r0
 80016c4:	4313      	orrs	r3, r2
 80016c6:	3401      	adds	r4, #1
 80016c8:	9304      	str	r3, [sp, #16]
 80016ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016ce:	4829      	ldr	r0, [pc, #164]	@ (8001774 <_vfiprintf_r+0x220>)
 80016d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80016d4:	2206      	movs	r2, #6
 80016d6:	f7fe fdab 	bl	8000230 <memchr>
 80016da:	2800      	cmp	r0, #0
 80016dc:	d03f      	beq.n	800175e <_vfiprintf_r+0x20a>
 80016de:	4b26      	ldr	r3, [pc, #152]	@ (8001778 <_vfiprintf_r+0x224>)
 80016e0:	bb1b      	cbnz	r3, 800172a <_vfiprintf_r+0x1d6>
 80016e2:	9b03      	ldr	r3, [sp, #12]
 80016e4:	3307      	adds	r3, #7
 80016e6:	f023 0307 	bic.w	r3, r3, #7
 80016ea:	3308      	adds	r3, #8
 80016ec:	9303      	str	r3, [sp, #12]
 80016ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80016f0:	443b      	add	r3, r7
 80016f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80016f4:	e76a      	b.n	80015cc <_vfiprintf_r+0x78>
 80016f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80016fa:	460c      	mov	r4, r1
 80016fc:	2001      	movs	r0, #1
 80016fe:	e7a8      	b.n	8001652 <_vfiprintf_r+0xfe>
 8001700:	2300      	movs	r3, #0
 8001702:	3401      	adds	r4, #1
 8001704:	9305      	str	r3, [sp, #20]
 8001706:	4619      	mov	r1, r3
 8001708:	f04f 0c0a 	mov.w	ip, #10
 800170c:	4620      	mov	r0, r4
 800170e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001712:	3a30      	subs	r2, #48	@ 0x30
 8001714:	2a09      	cmp	r2, #9
 8001716:	d903      	bls.n	8001720 <_vfiprintf_r+0x1cc>
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0c6      	beq.n	80016aa <_vfiprintf_r+0x156>
 800171c:	9105      	str	r1, [sp, #20]
 800171e:	e7c4      	b.n	80016aa <_vfiprintf_r+0x156>
 8001720:	fb0c 2101 	mla	r1, ip, r1, r2
 8001724:	4604      	mov	r4, r0
 8001726:	2301      	movs	r3, #1
 8001728:	e7f0      	b.n	800170c <_vfiprintf_r+0x1b8>
 800172a:	ab03      	add	r3, sp, #12
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	462a      	mov	r2, r5
 8001730:	4b12      	ldr	r3, [pc, #72]	@ (800177c <_vfiprintf_r+0x228>)
 8001732:	a904      	add	r1, sp, #16
 8001734:	4630      	mov	r0, r6
 8001736:	f3af 8000 	nop.w
 800173a:	4607      	mov	r7, r0
 800173c:	1c78      	adds	r0, r7, #1
 800173e:	d1d6      	bne.n	80016ee <_vfiprintf_r+0x19a>
 8001740:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001742:	07d9      	lsls	r1, r3, #31
 8001744:	d405      	bmi.n	8001752 <_vfiprintf_r+0x1fe>
 8001746:	89ab      	ldrh	r3, [r5, #12]
 8001748:	059a      	lsls	r2, r3, #22
 800174a:	d402      	bmi.n	8001752 <_vfiprintf_r+0x1fe>
 800174c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800174e:	f7ff fc85 	bl	800105c <__retarget_lock_release_recursive>
 8001752:	89ab      	ldrh	r3, [r5, #12]
 8001754:	065b      	lsls	r3, r3, #25
 8001756:	f53f af1f 	bmi.w	8001598 <_vfiprintf_r+0x44>
 800175a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800175c:	e71e      	b.n	800159c <_vfiprintf_r+0x48>
 800175e:	ab03      	add	r3, sp, #12
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	462a      	mov	r2, r5
 8001764:	4b05      	ldr	r3, [pc, #20]	@ (800177c <_vfiprintf_r+0x228>)
 8001766:	a904      	add	r1, sp, #16
 8001768:	4630      	mov	r0, r6
 800176a:	f000 f879 	bl	8001860 <_printf_i>
 800176e:	e7e4      	b.n	800173a <_vfiprintf_r+0x1e6>
 8001770:	08001eae 	.word	0x08001eae
 8001774:	08001eb8 	.word	0x08001eb8
 8001778:	00000000 	.word	0x00000000
 800177c:	0800152f 	.word	0x0800152f
 8001780:	08001eb4 	.word	0x08001eb4

08001784 <_printf_common>:
 8001784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001788:	4616      	mov	r6, r2
 800178a:	4698      	mov	r8, r3
 800178c:	688a      	ldr	r2, [r1, #8]
 800178e:	690b      	ldr	r3, [r1, #16]
 8001790:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001794:	4293      	cmp	r3, r2
 8001796:	bfb8      	it	lt
 8001798:	4613      	movlt	r3, r2
 800179a:	6033      	str	r3, [r6, #0]
 800179c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80017a0:	4607      	mov	r7, r0
 80017a2:	460c      	mov	r4, r1
 80017a4:	b10a      	cbz	r2, 80017aa <_printf_common+0x26>
 80017a6:	3301      	adds	r3, #1
 80017a8:	6033      	str	r3, [r6, #0]
 80017aa:	6823      	ldr	r3, [r4, #0]
 80017ac:	0699      	lsls	r1, r3, #26
 80017ae:	bf42      	ittt	mi
 80017b0:	6833      	ldrmi	r3, [r6, #0]
 80017b2:	3302      	addmi	r3, #2
 80017b4:	6033      	strmi	r3, [r6, #0]
 80017b6:	6825      	ldr	r5, [r4, #0]
 80017b8:	f015 0506 	ands.w	r5, r5, #6
 80017bc:	d106      	bne.n	80017cc <_printf_common+0x48>
 80017be:	f104 0a19 	add.w	sl, r4, #25
 80017c2:	68e3      	ldr	r3, [r4, #12]
 80017c4:	6832      	ldr	r2, [r6, #0]
 80017c6:	1a9b      	subs	r3, r3, r2
 80017c8:	42ab      	cmp	r3, r5
 80017ca:	dc26      	bgt.n	800181a <_printf_common+0x96>
 80017cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80017d0:	6822      	ldr	r2, [r4, #0]
 80017d2:	3b00      	subs	r3, #0
 80017d4:	bf18      	it	ne
 80017d6:	2301      	movne	r3, #1
 80017d8:	0692      	lsls	r2, r2, #26
 80017da:	d42b      	bmi.n	8001834 <_printf_common+0xb0>
 80017dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80017e0:	4641      	mov	r1, r8
 80017e2:	4638      	mov	r0, r7
 80017e4:	47c8      	blx	r9
 80017e6:	3001      	adds	r0, #1
 80017e8:	d01e      	beq.n	8001828 <_printf_common+0xa4>
 80017ea:	6823      	ldr	r3, [r4, #0]
 80017ec:	6922      	ldr	r2, [r4, #16]
 80017ee:	f003 0306 	and.w	r3, r3, #6
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	bf02      	ittt	eq
 80017f6:	68e5      	ldreq	r5, [r4, #12]
 80017f8:	6833      	ldreq	r3, [r6, #0]
 80017fa:	1aed      	subeq	r5, r5, r3
 80017fc:	68a3      	ldr	r3, [r4, #8]
 80017fe:	bf0c      	ite	eq
 8001800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001804:	2500      	movne	r5, #0
 8001806:	4293      	cmp	r3, r2
 8001808:	bfc4      	itt	gt
 800180a:	1a9b      	subgt	r3, r3, r2
 800180c:	18ed      	addgt	r5, r5, r3
 800180e:	2600      	movs	r6, #0
 8001810:	341a      	adds	r4, #26
 8001812:	42b5      	cmp	r5, r6
 8001814:	d11a      	bne.n	800184c <_printf_common+0xc8>
 8001816:	2000      	movs	r0, #0
 8001818:	e008      	b.n	800182c <_printf_common+0xa8>
 800181a:	2301      	movs	r3, #1
 800181c:	4652      	mov	r2, sl
 800181e:	4641      	mov	r1, r8
 8001820:	4638      	mov	r0, r7
 8001822:	47c8      	blx	r9
 8001824:	3001      	adds	r0, #1
 8001826:	d103      	bne.n	8001830 <_printf_common+0xac>
 8001828:	f04f 30ff 	mov.w	r0, #4294967295
 800182c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001830:	3501      	adds	r5, #1
 8001832:	e7c6      	b.n	80017c2 <_printf_common+0x3e>
 8001834:	18e1      	adds	r1, r4, r3
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	2030      	movs	r0, #48	@ 0x30
 800183a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800183e:	4422      	add	r2, r4
 8001840:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001844:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001848:	3302      	adds	r3, #2
 800184a:	e7c7      	b.n	80017dc <_printf_common+0x58>
 800184c:	2301      	movs	r3, #1
 800184e:	4622      	mov	r2, r4
 8001850:	4641      	mov	r1, r8
 8001852:	4638      	mov	r0, r7
 8001854:	47c8      	blx	r9
 8001856:	3001      	adds	r0, #1
 8001858:	d0e6      	beq.n	8001828 <_printf_common+0xa4>
 800185a:	3601      	adds	r6, #1
 800185c:	e7d9      	b.n	8001812 <_printf_common+0x8e>
	...

08001860 <_printf_i>:
 8001860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001864:	7e0f      	ldrb	r7, [r1, #24]
 8001866:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001868:	2f78      	cmp	r7, #120	@ 0x78
 800186a:	4691      	mov	r9, r2
 800186c:	4680      	mov	r8, r0
 800186e:	460c      	mov	r4, r1
 8001870:	469a      	mov	sl, r3
 8001872:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001876:	d807      	bhi.n	8001888 <_printf_i+0x28>
 8001878:	2f62      	cmp	r7, #98	@ 0x62
 800187a:	d80a      	bhi.n	8001892 <_printf_i+0x32>
 800187c:	2f00      	cmp	r7, #0
 800187e:	f000 80d2 	beq.w	8001a26 <_printf_i+0x1c6>
 8001882:	2f58      	cmp	r7, #88	@ 0x58
 8001884:	f000 80b9 	beq.w	80019fa <_printf_i+0x19a>
 8001888:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800188c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001890:	e03a      	b.n	8001908 <_printf_i+0xa8>
 8001892:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001896:	2b15      	cmp	r3, #21
 8001898:	d8f6      	bhi.n	8001888 <_printf_i+0x28>
 800189a:	a101      	add	r1, pc, #4	@ (adr r1, 80018a0 <_printf_i+0x40>)
 800189c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80018a0:	080018f9 	.word	0x080018f9
 80018a4:	0800190d 	.word	0x0800190d
 80018a8:	08001889 	.word	0x08001889
 80018ac:	08001889 	.word	0x08001889
 80018b0:	08001889 	.word	0x08001889
 80018b4:	08001889 	.word	0x08001889
 80018b8:	0800190d 	.word	0x0800190d
 80018bc:	08001889 	.word	0x08001889
 80018c0:	08001889 	.word	0x08001889
 80018c4:	08001889 	.word	0x08001889
 80018c8:	08001889 	.word	0x08001889
 80018cc:	08001a0d 	.word	0x08001a0d
 80018d0:	08001937 	.word	0x08001937
 80018d4:	080019c7 	.word	0x080019c7
 80018d8:	08001889 	.word	0x08001889
 80018dc:	08001889 	.word	0x08001889
 80018e0:	08001a2f 	.word	0x08001a2f
 80018e4:	08001889 	.word	0x08001889
 80018e8:	08001937 	.word	0x08001937
 80018ec:	08001889 	.word	0x08001889
 80018f0:	08001889 	.word	0x08001889
 80018f4:	080019cf 	.word	0x080019cf
 80018f8:	6833      	ldr	r3, [r6, #0]
 80018fa:	1d1a      	adds	r2, r3, #4
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6032      	str	r2, [r6, #0]
 8001900:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001904:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001908:	2301      	movs	r3, #1
 800190a:	e09d      	b.n	8001a48 <_printf_i+0x1e8>
 800190c:	6833      	ldr	r3, [r6, #0]
 800190e:	6820      	ldr	r0, [r4, #0]
 8001910:	1d19      	adds	r1, r3, #4
 8001912:	6031      	str	r1, [r6, #0]
 8001914:	0606      	lsls	r6, r0, #24
 8001916:	d501      	bpl.n	800191c <_printf_i+0xbc>
 8001918:	681d      	ldr	r5, [r3, #0]
 800191a:	e003      	b.n	8001924 <_printf_i+0xc4>
 800191c:	0645      	lsls	r5, r0, #25
 800191e:	d5fb      	bpl.n	8001918 <_printf_i+0xb8>
 8001920:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001924:	2d00      	cmp	r5, #0
 8001926:	da03      	bge.n	8001930 <_printf_i+0xd0>
 8001928:	232d      	movs	r3, #45	@ 0x2d
 800192a:	426d      	negs	r5, r5
 800192c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001930:	4859      	ldr	r0, [pc, #356]	@ (8001a98 <_printf_i+0x238>)
 8001932:	230a      	movs	r3, #10
 8001934:	e011      	b.n	800195a <_printf_i+0xfa>
 8001936:	6821      	ldr	r1, [r4, #0]
 8001938:	6833      	ldr	r3, [r6, #0]
 800193a:	0608      	lsls	r0, r1, #24
 800193c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001940:	d402      	bmi.n	8001948 <_printf_i+0xe8>
 8001942:	0649      	lsls	r1, r1, #25
 8001944:	bf48      	it	mi
 8001946:	b2ad      	uxthmi	r5, r5
 8001948:	2f6f      	cmp	r7, #111	@ 0x6f
 800194a:	4853      	ldr	r0, [pc, #332]	@ (8001a98 <_printf_i+0x238>)
 800194c:	6033      	str	r3, [r6, #0]
 800194e:	bf14      	ite	ne
 8001950:	230a      	movne	r3, #10
 8001952:	2308      	moveq	r3, #8
 8001954:	2100      	movs	r1, #0
 8001956:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800195a:	6866      	ldr	r6, [r4, #4]
 800195c:	60a6      	str	r6, [r4, #8]
 800195e:	2e00      	cmp	r6, #0
 8001960:	bfa2      	ittt	ge
 8001962:	6821      	ldrge	r1, [r4, #0]
 8001964:	f021 0104 	bicge.w	r1, r1, #4
 8001968:	6021      	strge	r1, [r4, #0]
 800196a:	b90d      	cbnz	r5, 8001970 <_printf_i+0x110>
 800196c:	2e00      	cmp	r6, #0
 800196e:	d04b      	beq.n	8001a08 <_printf_i+0x1a8>
 8001970:	4616      	mov	r6, r2
 8001972:	fbb5 f1f3 	udiv	r1, r5, r3
 8001976:	fb03 5711 	mls	r7, r3, r1, r5
 800197a:	5dc7      	ldrb	r7, [r0, r7]
 800197c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001980:	462f      	mov	r7, r5
 8001982:	42bb      	cmp	r3, r7
 8001984:	460d      	mov	r5, r1
 8001986:	d9f4      	bls.n	8001972 <_printf_i+0x112>
 8001988:	2b08      	cmp	r3, #8
 800198a:	d10b      	bne.n	80019a4 <_printf_i+0x144>
 800198c:	6823      	ldr	r3, [r4, #0]
 800198e:	07df      	lsls	r7, r3, #31
 8001990:	d508      	bpl.n	80019a4 <_printf_i+0x144>
 8001992:	6923      	ldr	r3, [r4, #16]
 8001994:	6861      	ldr	r1, [r4, #4]
 8001996:	4299      	cmp	r1, r3
 8001998:	bfde      	ittt	le
 800199a:	2330      	movle	r3, #48	@ 0x30
 800199c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80019a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80019a4:	1b92      	subs	r2, r2, r6
 80019a6:	6122      	str	r2, [r4, #16]
 80019a8:	f8cd a000 	str.w	sl, [sp]
 80019ac:	464b      	mov	r3, r9
 80019ae:	aa03      	add	r2, sp, #12
 80019b0:	4621      	mov	r1, r4
 80019b2:	4640      	mov	r0, r8
 80019b4:	f7ff fee6 	bl	8001784 <_printf_common>
 80019b8:	3001      	adds	r0, #1
 80019ba:	d14a      	bne.n	8001a52 <_printf_i+0x1f2>
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295
 80019c0:	b004      	add	sp, #16
 80019c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019c6:	6823      	ldr	r3, [r4, #0]
 80019c8:	f043 0320 	orr.w	r3, r3, #32
 80019cc:	6023      	str	r3, [r4, #0]
 80019ce:	4833      	ldr	r0, [pc, #204]	@ (8001a9c <_printf_i+0x23c>)
 80019d0:	2778      	movs	r7, #120	@ 0x78
 80019d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80019d6:	6823      	ldr	r3, [r4, #0]
 80019d8:	6831      	ldr	r1, [r6, #0]
 80019da:	061f      	lsls	r7, r3, #24
 80019dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80019e0:	d402      	bmi.n	80019e8 <_printf_i+0x188>
 80019e2:	065f      	lsls	r7, r3, #25
 80019e4:	bf48      	it	mi
 80019e6:	b2ad      	uxthmi	r5, r5
 80019e8:	6031      	str	r1, [r6, #0]
 80019ea:	07d9      	lsls	r1, r3, #31
 80019ec:	bf44      	itt	mi
 80019ee:	f043 0320 	orrmi.w	r3, r3, #32
 80019f2:	6023      	strmi	r3, [r4, #0]
 80019f4:	b11d      	cbz	r5, 80019fe <_printf_i+0x19e>
 80019f6:	2310      	movs	r3, #16
 80019f8:	e7ac      	b.n	8001954 <_printf_i+0xf4>
 80019fa:	4827      	ldr	r0, [pc, #156]	@ (8001a98 <_printf_i+0x238>)
 80019fc:	e7e9      	b.n	80019d2 <_printf_i+0x172>
 80019fe:	6823      	ldr	r3, [r4, #0]
 8001a00:	f023 0320 	bic.w	r3, r3, #32
 8001a04:	6023      	str	r3, [r4, #0]
 8001a06:	e7f6      	b.n	80019f6 <_printf_i+0x196>
 8001a08:	4616      	mov	r6, r2
 8001a0a:	e7bd      	b.n	8001988 <_printf_i+0x128>
 8001a0c:	6833      	ldr	r3, [r6, #0]
 8001a0e:	6825      	ldr	r5, [r4, #0]
 8001a10:	6961      	ldr	r1, [r4, #20]
 8001a12:	1d18      	adds	r0, r3, #4
 8001a14:	6030      	str	r0, [r6, #0]
 8001a16:	062e      	lsls	r6, r5, #24
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	d501      	bpl.n	8001a20 <_printf_i+0x1c0>
 8001a1c:	6019      	str	r1, [r3, #0]
 8001a1e:	e002      	b.n	8001a26 <_printf_i+0x1c6>
 8001a20:	0668      	lsls	r0, r5, #25
 8001a22:	d5fb      	bpl.n	8001a1c <_printf_i+0x1bc>
 8001a24:	8019      	strh	r1, [r3, #0]
 8001a26:	2300      	movs	r3, #0
 8001a28:	6123      	str	r3, [r4, #16]
 8001a2a:	4616      	mov	r6, r2
 8001a2c:	e7bc      	b.n	80019a8 <_printf_i+0x148>
 8001a2e:	6833      	ldr	r3, [r6, #0]
 8001a30:	1d1a      	adds	r2, r3, #4
 8001a32:	6032      	str	r2, [r6, #0]
 8001a34:	681e      	ldr	r6, [r3, #0]
 8001a36:	6862      	ldr	r2, [r4, #4]
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4630      	mov	r0, r6
 8001a3c:	f7fe fbf8 	bl	8000230 <memchr>
 8001a40:	b108      	cbz	r0, 8001a46 <_printf_i+0x1e6>
 8001a42:	1b80      	subs	r0, r0, r6
 8001a44:	6060      	str	r0, [r4, #4]
 8001a46:	6863      	ldr	r3, [r4, #4]
 8001a48:	6123      	str	r3, [r4, #16]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001a50:	e7aa      	b.n	80019a8 <_printf_i+0x148>
 8001a52:	6923      	ldr	r3, [r4, #16]
 8001a54:	4632      	mov	r2, r6
 8001a56:	4649      	mov	r1, r9
 8001a58:	4640      	mov	r0, r8
 8001a5a:	47d0      	blx	sl
 8001a5c:	3001      	adds	r0, #1
 8001a5e:	d0ad      	beq.n	80019bc <_printf_i+0x15c>
 8001a60:	6823      	ldr	r3, [r4, #0]
 8001a62:	079b      	lsls	r3, r3, #30
 8001a64:	d413      	bmi.n	8001a8e <_printf_i+0x22e>
 8001a66:	68e0      	ldr	r0, [r4, #12]
 8001a68:	9b03      	ldr	r3, [sp, #12]
 8001a6a:	4298      	cmp	r0, r3
 8001a6c:	bfb8      	it	lt
 8001a6e:	4618      	movlt	r0, r3
 8001a70:	e7a6      	b.n	80019c0 <_printf_i+0x160>
 8001a72:	2301      	movs	r3, #1
 8001a74:	4632      	mov	r2, r6
 8001a76:	4649      	mov	r1, r9
 8001a78:	4640      	mov	r0, r8
 8001a7a:	47d0      	blx	sl
 8001a7c:	3001      	adds	r0, #1
 8001a7e:	d09d      	beq.n	80019bc <_printf_i+0x15c>
 8001a80:	3501      	adds	r5, #1
 8001a82:	68e3      	ldr	r3, [r4, #12]
 8001a84:	9903      	ldr	r1, [sp, #12]
 8001a86:	1a5b      	subs	r3, r3, r1
 8001a88:	42ab      	cmp	r3, r5
 8001a8a:	dcf2      	bgt.n	8001a72 <_printf_i+0x212>
 8001a8c:	e7eb      	b.n	8001a66 <_printf_i+0x206>
 8001a8e:	2500      	movs	r5, #0
 8001a90:	f104 0619 	add.w	r6, r4, #25
 8001a94:	e7f5      	b.n	8001a82 <_printf_i+0x222>
 8001a96:	bf00      	nop
 8001a98:	08001ebf 	.word	0x08001ebf
 8001a9c:	08001ed0 	.word	0x08001ed0

08001aa0 <__sflush_r>:
 8001aa0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001aa8:	0716      	lsls	r6, r2, #28
 8001aaa:	4605      	mov	r5, r0
 8001aac:	460c      	mov	r4, r1
 8001aae:	d454      	bmi.n	8001b5a <__sflush_r+0xba>
 8001ab0:	684b      	ldr	r3, [r1, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	dc02      	bgt.n	8001abc <__sflush_r+0x1c>
 8001ab6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	dd48      	ble.n	8001b4e <__sflush_r+0xae>
 8001abc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001abe:	2e00      	cmp	r6, #0
 8001ac0:	d045      	beq.n	8001b4e <__sflush_r+0xae>
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001ac8:	682f      	ldr	r7, [r5, #0]
 8001aca:	6a21      	ldr	r1, [r4, #32]
 8001acc:	602b      	str	r3, [r5, #0]
 8001ace:	d030      	beq.n	8001b32 <__sflush_r+0x92>
 8001ad0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001ad2:	89a3      	ldrh	r3, [r4, #12]
 8001ad4:	0759      	lsls	r1, r3, #29
 8001ad6:	d505      	bpl.n	8001ae4 <__sflush_r+0x44>
 8001ad8:	6863      	ldr	r3, [r4, #4]
 8001ada:	1ad2      	subs	r2, r2, r3
 8001adc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001ade:	b10b      	cbz	r3, 8001ae4 <__sflush_r+0x44>
 8001ae0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001ae2:	1ad2      	subs	r2, r2, r3
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001ae8:	6a21      	ldr	r1, [r4, #32]
 8001aea:	4628      	mov	r0, r5
 8001aec:	47b0      	blx	r6
 8001aee:	1c43      	adds	r3, r0, #1
 8001af0:	89a3      	ldrh	r3, [r4, #12]
 8001af2:	d106      	bne.n	8001b02 <__sflush_r+0x62>
 8001af4:	6829      	ldr	r1, [r5, #0]
 8001af6:	291d      	cmp	r1, #29
 8001af8:	d82b      	bhi.n	8001b52 <__sflush_r+0xb2>
 8001afa:	4a2a      	ldr	r2, [pc, #168]	@ (8001ba4 <__sflush_r+0x104>)
 8001afc:	410a      	asrs	r2, r1
 8001afe:	07d6      	lsls	r6, r2, #31
 8001b00:	d427      	bmi.n	8001b52 <__sflush_r+0xb2>
 8001b02:	2200      	movs	r2, #0
 8001b04:	6062      	str	r2, [r4, #4]
 8001b06:	04d9      	lsls	r1, r3, #19
 8001b08:	6922      	ldr	r2, [r4, #16]
 8001b0a:	6022      	str	r2, [r4, #0]
 8001b0c:	d504      	bpl.n	8001b18 <__sflush_r+0x78>
 8001b0e:	1c42      	adds	r2, r0, #1
 8001b10:	d101      	bne.n	8001b16 <__sflush_r+0x76>
 8001b12:	682b      	ldr	r3, [r5, #0]
 8001b14:	b903      	cbnz	r3, 8001b18 <__sflush_r+0x78>
 8001b16:	6560      	str	r0, [r4, #84]	@ 0x54
 8001b18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001b1a:	602f      	str	r7, [r5, #0]
 8001b1c:	b1b9      	cbz	r1, 8001b4e <__sflush_r+0xae>
 8001b1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001b22:	4299      	cmp	r1, r3
 8001b24:	d002      	beq.n	8001b2c <__sflush_r+0x8c>
 8001b26:	4628      	mov	r0, r5
 8001b28:	f7ff fa9a 	bl	8001060 <_free_r>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8001b30:	e00d      	b.n	8001b4e <__sflush_r+0xae>
 8001b32:	2301      	movs	r3, #1
 8001b34:	4628      	mov	r0, r5
 8001b36:	47b0      	blx	r6
 8001b38:	4602      	mov	r2, r0
 8001b3a:	1c50      	adds	r0, r2, #1
 8001b3c:	d1c9      	bne.n	8001ad2 <__sflush_r+0x32>
 8001b3e:	682b      	ldr	r3, [r5, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0c6      	beq.n	8001ad2 <__sflush_r+0x32>
 8001b44:	2b1d      	cmp	r3, #29
 8001b46:	d001      	beq.n	8001b4c <__sflush_r+0xac>
 8001b48:	2b16      	cmp	r3, #22
 8001b4a:	d11e      	bne.n	8001b8a <__sflush_r+0xea>
 8001b4c:	602f      	str	r7, [r5, #0]
 8001b4e:	2000      	movs	r0, #0
 8001b50:	e022      	b.n	8001b98 <__sflush_r+0xf8>
 8001b52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	e01b      	b.n	8001b92 <__sflush_r+0xf2>
 8001b5a:	690f      	ldr	r7, [r1, #16]
 8001b5c:	2f00      	cmp	r7, #0
 8001b5e:	d0f6      	beq.n	8001b4e <__sflush_r+0xae>
 8001b60:	0793      	lsls	r3, r2, #30
 8001b62:	680e      	ldr	r6, [r1, #0]
 8001b64:	bf08      	it	eq
 8001b66:	694b      	ldreq	r3, [r1, #20]
 8001b68:	600f      	str	r7, [r1, #0]
 8001b6a:	bf18      	it	ne
 8001b6c:	2300      	movne	r3, #0
 8001b6e:	eba6 0807 	sub.w	r8, r6, r7
 8001b72:	608b      	str	r3, [r1, #8]
 8001b74:	f1b8 0f00 	cmp.w	r8, #0
 8001b78:	dde9      	ble.n	8001b4e <__sflush_r+0xae>
 8001b7a:	6a21      	ldr	r1, [r4, #32]
 8001b7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001b7e:	4643      	mov	r3, r8
 8001b80:	463a      	mov	r2, r7
 8001b82:	4628      	mov	r0, r5
 8001b84:	47b0      	blx	r6
 8001b86:	2800      	cmp	r0, #0
 8001b88:	dc08      	bgt.n	8001b9c <__sflush_r+0xfc>
 8001b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b92:	81a3      	strh	r3, [r4, #12]
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295
 8001b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b9c:	4407      	add	r7, r0
 8001b9e:	eba8 0800 	sub.w	r8, r8, r0
 8001ba2:	e7e7      	b.n	8001b74 <__sflush_r+0xd4>
 8001ba4:	dfbffffe 	.word	0xdfbffffe

08001ba8 <_fflush_r>:
 8001ba8:	b538      	push	{r3, r4, r5, lr}
 8001baa:	690b      	ldr	r3, [r1, #16]
 8001bac:	4605      	mov	r5, r0
 8001bae:	460c      	mov	r4, r1
 8001bb0:	b913      	cbnz	r3, 8001bb8 <_fflush_r+0x10>
 8001bb2:	2500      	movs	r5, #0
 8001bb4:	4628      	mov	r0, r5
 8001bb6:	bd38      	pop	{r3, r4, r5, pc}
 8001bb8:	b118      	cbz	r0, 8001bc2 <_fflush_r+0x1a>
 8001bba:	6a03      	ldr	r3, [r0, #32]
 8001bbc:	b90b      	cbnz	r3, 8001bc2 <_fflush_r+0x1a>
 8001bbe:	f7ff f835 	bl	8000c2c <__sinit>
 8001bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f3      	beq.n	8001bb2 <_fflush_r+0xa>
 8001bca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001bcc:	07d0      	lsls	r0, r2, #31
 8001bce:	d404      	bmi.n	8001bda <_fflush_r+0x32>
 8001bd0:	0599      	lsls	r1, r3, #22
 8001bd2:	d402      	bmi.n	8001bda <_fflush_r+0x32>
 8001bd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001bd6:	f7ff fa40 	bl	800105a <__retarget_lock_acquire_recursive>
 8001bda:	4628      	mov	r0, r5
 8001bdc:	4621      	mov	r1, r4
 8001bde:	f7ff ff5f 	bl	8001aa0 <__sflush_r>
 8001be2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001be4:	07da      	lsls	r2, r3, #31
 8001be6:	4605      	mov	r5, r0
 8001be8:	d4e4      	bmi.n	8001bb4 <_fflush_r+0xc>
 8001bea:	89a3      	ldrh	r3, [r4, #12]
 8001bec:	059b      	lsls	r3, r3, #22
 8001bee:	d4e1      	bmi.n	8001bb4 <_fflush_r+0xc>
 8001bf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001bf2:	f7ff fa33 	bl	800105c <__retarget_lock_release_recursive>
 8001bf6:	e7dd      	b.n	8001bb4 <_fflush_r+0xc>

08001bf8 <__swhatbuf_r>:
 8001bf8:	b570      	push	{r4, r5, r6, lr}
 8001bfa:	460c      	mov	r4, r1
 8001bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c00:	2900      	cmp	r1, #0
 8001c02:	b096      	sub	sp, #88	@ 0x58
 8001c04:	4615      	mov	r5, r2
 8001c06:	461e      	mov	r6, r3
 8001c08:	da0d      	bge.n	8001c26 <__swhatbuf_r+0x2e>
 8001c0a:	89a3      	ldrh	r3, [r4, #12]
 8001c0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001c10:	f04f 0100 	mov.w	r1, #0
 8001c14:	bf14      	ite	ne
 8001c16:	2340      	movne	r3, #64	@ 0x40
 8001c18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	6031      	str	r1, [r6, #0]
 8001c20:	602b      	str	r3, [r5, #0]
 8001c22:	b016      	add	sp, #88	@ 0x58
 8001c24:	bd70      	pop	{r4, r5, r6, pc}
 8001c26:	466a      	mov	r2, sp
 8001c28:	f000 f862 	bl	8001cf0 <_fstat_r>
 8001c2c:	2800      	cmp	r0, #0
 8001c2e:	dbec      	blt.n	8001c0a <__swhatbuf_r+0x12>
 8001c30:	9901      	ldr	r1, [sp, #4]
 8001c32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001c36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001c3a:	4259      	negs	r1, r3
 8001c3c:	4159      	adcs	r1, r3
 8001c3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c42:	e7eb      	b.n	8001c1c <__swhatbuf_r+0x24>

08001c44 <__smakebuf_r>:
 8001c44:	898b      	ldrh	r3, [r1, #12]
 8001c46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c48:	079d      	lsls	r5, r3, #30
 8001c4a:	4606      	mov	r6, r0
 8001c4c:	460c      	mov	r4, r1
 8001c4e:	d507      	bpl.n	8001c60 <__smakebuf_r+0x1c>
 8001c50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001c54:	6023      	str	r3, [r4, #0]
 8001c56:	6123      	str	r3, [r4, #16]
 8001c58:	2301      	movs	r3, #1
 8001c5a:	6163      	str	r3, [r4, #20]
 8001c5c:	b003      	add	sp, #12
 8001c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c60:	ab01      	add	r3, sp, #4
 8001c62:	466a      	mov	r2, sp
 8001c64:	f7ff ffc8 	bl	8001bf8 <__swhatbuf_r>
 8001c68:	9f00      	ldr	r7, [sp, #0]
 8001c6a:	4605      	mov	r5, r0
 8001c6c:	4639      	mov	r1, r7
 8001c6e:	4630      	mov	r0, r6
 8001c70:	f7ff fa62 	bl	8001138 <_malloc_r>
 8001c74:	b948      	cbnz	r0, 8001c8a <__smakebuf_r+0x46>
 8001c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c7a:	059a      	lsls	r2, r3, #22
 8001c7c:	d4ee      	bmi.n	8001c5c <__smakebuf_r+0x18>
 8001c7e:	f023 0303 	bic.w	r3, r3, #3
 8001c82:	f043 0302 	orr.w	r3, r3, #2
 8001c86:	81a3      	strh	r3, [r4, #12]
 8001c88:	e7e2      	b.n	8001c50 <__smakebuf_r+0xc>
 8001c8a:	89a3      	ldrh	r3, [r4, #12]
 8001c8c:	6020      	str	r0, [r4, #0]
 8001c8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c92:	81a3      	strh	r3, [r4, #12]
 8001c94:	9b01      	ldr	r3, [sp, #4]
 8001c96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001c9a:	b15b      	cbz	r3, 8001cb4 <__smakebuf_r+0x70>
 8001c9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ca0:	4630      	mov	r0, r6
 8001ca2:	f000 f837 	bl	8001d14 <_isatty_r>
 8001ca6:	b128      	cbz	r0, 8001cb4 <__smakebuf_r+0x70>
 8001ca8:	89a3      	ldrh	r3, [r4, #12]
 8001caa:	f023 0303 	bic.w	r3, r3, #3
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	81a3      	strh	r3, [r4, #12]
 8001cb4:	89a3      	ldrh	r3, [r4, #12]
 8001cb6:	431d      	orrs	r5, r3
 8001cb8:	81a5      	strh	r5, [r4, #12]
 8001cba:	e7cf      	b.n	8001c5c <__smakebuf_r+0x18>

08001cbc <memmove>:
 8001cbc:	4288      	cmp	r0, r1
 8001cbe:	b510      	push	{r4, lr}
 8001cc0:	eb01 0402 	add.w	r4, r1, r2
 8001cc4:	d902      	bls.n	8001ccc <memmove+0x10>
 8001cc6:	4284      	cmp	r4, r0
 8001cc8:	4623      	mov	r3, r4
 8001cca:	d807      	bhi.n	8001cdc <memmove+0x20>
 8001ccc:	1e43      	subs	r3, r0, #1
 8001cce:	42a1      	cmp	r1, r4
 8001cd0:	d008      	beq.n	8001ce4 <memmove+0x28>
 8001cd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001cd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001cda:	e7f8      	b.n	8001cce <memmove+0x12>
 8001cdc:	4402      	add	r2, r0
 8001cde:	4601      	mov	r1, r0
 8001ce0:	428a      	cmp	r2, r1
 8001ce2:	d100      	bne.n	8001ce6 <memmove+0x2a>
 8001ce4:	bd10      	pop	{r4, pc}
 8001ce6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001cea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001cee:	e7f7      	b.n	8001ce0 <memmove+0x24>

08001cf0 <_fstat_r>:
 8001cf0:	b538      	push	{r3, r4, r5, lr}
 8001cf2:	4d07      	ldr	r5, [pc, #28]	@ (8001d10 <_fstat_r+0x20>)
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	4604      	mov	r4, r0
 8001cf8:	4608      	mov	r0, r1
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	602b      	str	r3, [r5, #0]
 8001cfe:	f7fe fe5b 	bl	80009b8 <_fstat>
 8001d02:	1c43      	adds	r3, r0, #1
 8001d04:	d102      	bne.n	8001d0c <_fstat_r+0x1c>
 8001d06:	682b      	ldr	r3, [r5, #0]
 8001d08:	b103      	cbz	r3, 8001d0c <_fstat_r+0x1c>
 8001d0a:	6023      	str	r3, [r4, #0]
 8001d0c:	bd38      	pop	{r3, r4, r5, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000204 	.word	0x20000204

08001d14 <_isatty_r>:
 8001d14:	b538      	push	{r3, r4, r5, lr}
 8001d16:	4d06      	ldr	r5, [pc, #24]	@ (8001d30 <_isatty_r+0x1c>)
 8001d18:	2300      	movs	r3, #0
 8001d1a:	4604      	mov	r4, r0
 8001d1c:	4608      	mov	r0, r1
 8001d1e:	602b      	str	r3, [r5, #0]
 8001d20:	f7fe fe5a 	bl	80009d8 <_isatty>
 8001d24:	1c43      	adds	r3, r0, #1
 8001d26:	d102      	bne.n	8001d2e <_isatty_r+0x1a>
 8001d28:	682b      	ldr	r3, [r5, #0]
 8001d2a:	b103      	cbz	r3, 8001d2e <_isatty_r+0x1a>
 8001d2c:	6023      	str	r3, [r4, #0]
 8001d2e:	bd38      	pop	{r3, r4, r5, pc}
 8001d30:	20000204 	.word	0x20000204

08001d34 <_sbrk_r>:
 8001d34:	b538      	push	{r3, r4, r5, lr}
 8001d36:	4d06      	ldr	r5, [pc, #24]	@ (8001d50 <_sbrk_r+0x1c>)
 8001d38:	2300      	movs	r3, #0
 8001d3a:	4604      	mov	r4, r0
 8001d3c:	4608      	mov	r0, r1
 8001d3e:	602b      	str	r3, [r5, #0]
 8001d40:	f7fe fe62 	bl	8000a08 <_sbrk>
 8001d44:	1c43      	adds	r3, r0, #1
 8001d46:	d102      	bne.n	8001d4e <_sbrk_r+0x1a>
 8001d48:	682b      	ldr	r3, [r5, #0]
 8001d4a:	b103      	cbz	r3, 8001d4e <_sbrk_r+0x1a>
 8001d4c:	6023      	str	r3, [r4, #0]
 8001d4e:	bd38      	pop	{r3, r4, r5, pc}
 8001d50:	20000204 	.word	0x20000204

08001d54 <memcpy>:
 8001d54:	440a      	add	r2, r1
 8001d56:	4291      	cmp	r1, r2
 8001d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8001d5c:	d100      	bne.n	8001d60 <memcpy+0xc>
 8001d5e:	4770      	bx	lr
 8001d60:	b510      	push	{r4, lr}
 8001d62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001d66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001d6a:	4291      	cmp	r1, r2
 8001d6c:	d1f9      	bne.n	8001d62 <memcpy+0xe>
 8001d6e:	bd10      	pop	{r4, pc}

08001d70 <_realloc_r>:
 8001d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d74:	4680      	mov	r8, r0
 8001d76:	4615      	mov	r5, r2
 8001d78:	460c      	mov	r4, r1
 8001d7a:	b921      	cbnz	r1, 8001d86 <_realloc_r+0x16>
 8001d7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d80:	4611      	mov	r1, r2
 8001d82:	f7ff b9d9 	b.w	8001138 <_malloc_r>
 8001d86:	b92a      	cbnz	r2, 8001d94 <_realloc_r+0x24>
 8001d88:	f7ff f96a 	bl	8001060 <_free_r>
 8001d8c:	2400      	movs	r4, #0
 8001d8e:	4620      	mov	r0, r4
 8001d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d94:	f000 f81a 	bl	8001dcc <_malloc_usable_size_r>
 8001d98:	4285      	cmp	r5, r0
 8001d9a:	4606      	mov	r6, r0
 8001d9c:	d802      	bhi.n	8001da4 <_realloc_r+0x34>
 8001d9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001da2:	d8f4      	bhi.n	8001d8e <_realloc_r+0x1e>
 8001da4:	4629      	mov	r1, r5
 8001da6:	4640      	mov	r0, r8
 8001da8:	f7ff f9c6 	bl	8001138 <_malloc_r>
 8001dac:	4607      	mov	r7, r0
 8001dae:	2800      	cmp	r0, #0
 8001db0:	d0ec      	beq.n	8001d8c <_realloc_r+0x1c>
 8001db2:	42b5      	cmp	r5, r6
 8001db4:	462a      	mov	r2, r5
 8001db6:	4621      	mov	r1, r4
 8001db8:	bf28      	it	cs
 8001dba:	4632      	movcs	r2, r6
 8001dbc:	f7ff ffca 	bl	8001d54 <memcpy>
 8001dc0:	4621      	mov	r1, r4
 8001dc2:	4640      	mov	r0, r8
 8001dc4:	f7ff f94c 	bl	8001060 <_free_r>
 8001dc8:	463c      	mov	r4, r7
 8001dca:	e7e0      	b.n	8001d8e <_realloc_r+0x1e>

08001dcc <_malloc_usable_size_r>:
 8001dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001dd0:	1f18      	subs	r0, r3, #4
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	bfbc      	itt	lt
 8001dd6:	580b      	ldrlt	r3, [r1, r0]
 8001dd8:	18c0      	addlt	r0, r0, r3
 8001dda:	4770      	bx	lr

08001ddc <_init>:
 8001ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dde:	bf00      	nop
 8001de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001de2:	bc08      	pop	{r3}
 8001de4:	469e      	mov	lr, r3
 8001de6:	4770      	bx	lr

08001de8 <_fini>:
 8001de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dea:	bf00      	nop
 8001dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dee:	bc08      	pop	{r3}
 8001df0:	469e      	mov	lr, r3
 8001df2:	4770      	bx	lr
